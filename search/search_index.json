{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bash-my-AWS is a simple but powerful set of CLI commands for managing resources on Amazon Web Services. They harness the power of Amazon's AWSCLI, while abstracting away verbosity. The project implements some innovative patterns but (arguably) remains simple, beautiful and readable. github.com/bash-my-aws/bash-my-aws Introduction \u00b6 Short, Memorable Commands Shell Command Completion (including AWS resources) Unix Pipeline Friendly (instead of JSON) Convenient Shortcuts Short, Memorable Commands \u00b6 There are two main types of commands. 1. Resource Listing Commands These generally consist of the pluralised form of the resource name. $ buckets example-assets 2019 -12-08 02 :35:44.758551 example-logs 2019 -12-08 02 :35:52.669771 example-backups 2019 -12-08 02 :35:56.579434 $ stacks nagios CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres01 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED prometheus CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED $ keypairs alice 8f:85:9a:1e:6c:76:29:34:37:45:de:7f:8d:f9:70:eb bob 56 :73:29:c2:ad:7b:6f:b6:f2:f3:b4:de:e4:2b:12:d4 carol 29 :4e:1c:cb:ba:d4:85:0e:4f:b6:34:4c:d4:79:32:00 2. Resource detail/action commands These generally consist of a resource name and action separated by a hyphen. This makes discovering them via shell completion simple. Some retrieve information about resources while others make changes to them. $ keypair-delete alice bob You are about to delete the following EC2 SSH KeyPairs: alice bob Are you sure you want to continue ? y See the Command Reference for a full list of commands. Shell Command Completion \u00b6 In the example above, shell autocompletion retrieved the existing EC2 Keypair names ( alice , bob ) from AWS. This helps avoid the need to rely on human memory or terminal copypasta. Unix Pipeline Friendly \u00b6 The commands themselves are line oriented and work nicely in unix pipelines with other unix commands (e.g. grep , awk , etc). $ stacks | grep postgres postgres01 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED They also work incredibly well with each other due to the way they treat input from STDIN. The first token from each line of STDIN is taken to be a resource identifiers (and the rest is discarded). $ stacks | grep postgres | stack-delete You are about to delete the following stacks: postgres01 postgres02 Are you sure you want to continue ? y Some users have compared this User Experience to functionality in Windows Powershell. Convenient Shortcuts \u00b6 Bash-my-AWS is insanely simple to pick up and start using but contains a lot of convenient shortcuts you can make use of. Example: resource listing commands accept a filter argument, removing the need for | grep . In the following example someone has given a CloudFormation stack a really long name: $ stacks nagios CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres01 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED prometheus CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED stack-with-a-annoyingly-long-name CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED This affects the output when we look at our Postgres stacks: $ stacks | grep postgres postgres01 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED The resource listing command can filter output before applying column . $ stacks postgres postgres01 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED Quickstart \u00b6 Prerequisites \u00b6 awscli bash jq-1.4 or later (for stack-diff) Installation \u00b6 As shown below, you may simply clone the GitHub repo and source the files required. (You should probably fork it instead to keep your customisations) $ git clone https://github.com/bash-my-aws/bash-my-aws.git ~/.bash-my-aws Put the following in your shell's startup file: export PATH = \" $PATH : $HOME /.bash-my-aws/bin\" source ~/.bash-my-aws/aliases # For ZSH users, uncomment the following two lines: # autoload -U +X compinit && compinit # autoload -U +X bashcompinit && bashcompinit source ~/.bash-my-aws/bash_completion.sh Why use shell aliases? Bash-my-AWS began as a collection of bash functions, sourced into your shell. More recently, the default suggestion has been to load aliases that execute a small wrapper script that loads the functions and executes the desired function. After years of zsh users asking for support, one stepped up and identified a changes that would eliminate any shell compatibility problems without compromising the functionaility, simplicity and discoverability of the project. Massive thanks to @ninth-dev for this. # bash users may source the functions instead of loading the aliases if [ -d ${HOME}/.bash-my-aws ]; then for f in ~/.bash-my-aws/lib/*-functions; do source $f; done fi Usage \u00b6 Running Commands \u00b6 The default way to run the commands is using the aliases: $ instances i-e6f097f6ea4457757 ami-123456789012 t3.nano running example-ec2-ap-southeast-2 2019-12-07T08:12:00.000Z ap-southeast-2a None i-b983805b4b254f749 ami-123456789012 t3.nano running postfix-prod 2019-12-07T08:26:30.000Z ap-southeast-2a None i-fed39ebe7204dfd37 ami-123456789012 t3.nano running postfix-prod 2019-12-07T08:26:34.000Z ap-southeast-2a None i-47955eb46d98b4dd8 ami-123456789012 t3.nano running prometheus 2019-12-07T08:27:02.000Z ap-southeast-2a None i-8d25b78d40d17f38a ami-123456789012 t3.nano running plex-server 2019-12-07T08:27:38.000Z ap-southeast-2a None It's also possible to run them using the bma wrapper. (This is sometimes required when using a restrictive auth tool.) $ bma instances i-e6f097f6ea4457757 ami-123456789012 t3.nano running example-ec2-ap-southeast-2 2019-12-07T08:12:00.000Z ap-southeast-2a None i-b983805b4b254f749 ami-123456789012 t3.nano running postfix-prod 2019-12-07T08:26:30.000Z ap-southeast-2a None i-fed39ebe7204dfd37 ami-123456789012 t3.nano running postfix-prod 2019-12-07T08:26:34.000Z ap-southeast-2a None i-47955eb46d98b4dd8 ami-123456789012 t3.nano running prometheus 2019-12-07T08:27:02.000Z ap-southeast-2a None i-8d25b78d40d17f38a ami-123456789012 t3.nano running plex-server 2019-12-07T08:27:38.000Z ap-southeast-2a None Discovering Commands \u00b6 For each resource type, there is a command to list them: $ instances i-e6f097f6ea4457757 ami-123456789012 t3.nano running example-ec2-ap-southeast-2 2019 -12-07T08:12:00.000Z ap-southeast-2a None i-b983805b4b254f749 ami-123456789012 t3.nano running postfix-prod 2019 -12-07T08:26:30.000Z ap-southeast-2a None i-fed39ebe7204dfd37 ami-123456789012 t3.nano running postfix-prod 2019 -12-07T08:26:34.000Z ap-southeast-2a None i-47955eb46d98b4dd8 ami-123456789012 t3.nano running prometheus 2019 -12-07T08:27:02.000Z ap-southeast-2a None i-8d25b78d40d17f38a ami-123456789012 t3.nano running plex-server 2019 -12-07T08:27:38.000Z ap-southeast-2a None and a number of command to act on these resources: $ instance-[TAB][TAB] instance-asg instance-ssh-details instance-termination-protection instance-az instance-stack instance-termination-protection-disable instance-console instance-start instance-termination-protection-enable instance-dns instance-state instance-type instance-iam-profile instance-stop instance-userdata instance-ip instance-tags instance-volumes instance-ssh instance-terminate instance-vpc Whether you're new to the tools or just have a bad memory, bash completion makes discovering these commands simple. See the Command Reference for a full list with usage examples Piping Between Commands \u00b6 This is where the magic happens! The first token on each line is almost always a resource identifier. When you pipe output between the commands they just take the first token from each line. $ instances | grep postfix | instance-ip i-b983805b4b254f749 10.190.1.70 54.214.71.51 i-fed39ebe7204dfd37 10.135.204.82 54.214.26.190 Note Most commands that list resources ( stacks , instances , etc) accept filter term as first arg. As well as reducing keystrokes, it can also improve output as columnisation is done after filtering. $ instances postfix | instance-ip i-b983805b4b254f749 10.190.1.70 54.214.71.51 i-fed39ebe7204dfd37 10.135.204.82 54.214.26.190 Inspecting Commands \u00b6 For those interested in how it works: Each command is a bash function. Most are very simple and wrap an AWSCLI command. For a quick look at how a command works, you can use bma type : $ bma type instances instances is a function instances () { local instance_ids = $( __bma_read_inputs ) ; local filters = $( __bma_read_filters $@ ) ; aws ec2 describe-instances $( [[ -n ${ instance_ids } ]] && echo --instance-ids ${ instance_ids } ) --query \" Reservations[].Instances[][ InstanceId, ImageId, InstanceType, State.Name, [Tags[?Key=='Name'].Value][0][0], LaunchTime, Placement.AvailabilityZone, VpcId ]\" --output text | grep -E -- \" $filters \" | LC_ALL = C sort -b -k 6 | column -s ' ' -t } A prettier version can be found in the source code: # ~/.bash-my-aws/lib/instance-functions instances () { local instance_ids = $( __bma_read_inputs ) local filters = $( __bma_read_filters $@ ) aws ec2 describe-instances \\ $( [[ -n ${ instance_ids } ]] && echo --instance-ids ${ instance_ids } ) \\ --query \" Reservations[].Instances[][ InstanceId, ImageId, InstanceType, State.Name, [Tags[?Key=='Name'].Value][0][0], LaunchTime, Placement.AvailabilityZone, VpcId ]\" \\ --output text | grep -E -- \" $filters \" | LC_ALL = C sort -b -k 6 | column -s $'\\t' -t } For more info on AWSCLI query syntax, check out http://jmespath.org/tutorial.html","title":"Home"},{"location":"#introduction","text":"Short, Memorable Commands Shell Command Completion (including AWS resources) Unix Pipeline Friendly (instead of JSON) Convenient Shortcuts","title":"Introduction"},{"location":"#short-memorable-commands","text":"There are two main types of commands. 1. Resource Listing Commands These generally consist of the pluralised form of the resource name. $ buckets example-assets 2019 -12-08 02 :35:44.758551 example-logs 2019 -12-08 02 :35:52.669771 example-backups 2019 -12-08 02 :35:56.579434 $ stacks nagios CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres01 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED prometheus CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED $ keypairs alice 8f:85:9a:1e:6c:76:29:34:37:45:de:7f:8d:f9:70:eb bob 56 :73:29:c2:ad:7b:6f:b6:f2:f3:b4:de:e4:2b:12:d4 carol 29 :4e:1c:cb:ba:d4:85:0e:4f:b6:34:4c:d4:79:32:00 2. Resource detail/action commands These generally consist of a resource name and action separated by a hyphen. This makes discovering them via shell completion simple. Some retrieve information about resources while others make changes to them. $ keypair-delete alice bob You are about to delete the following EC2 SSH KeyPairs: alice bob Are you sure you want to continue ? y See the Command Reference for a full list of commands.","title":"Short, Memorable Commands"},{"location":"#shell-command-completion","text":"In the example above, shell autocompletion retrieved the existing EC2 Keypair names ( alice , bob ) from AWS. This helps avoid the need to rely on human memory or terminal copypasta.","title":"Shell Command Completion"},{"location":"#unix-pipeline-friendly","text":"The commands themselves are line oriented and work nicely in unix pipelines with other unix commands (e.g. grep , awk , etc). $ stacks | grep postgres postgres01 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED They also work incredibly well with each other due to the way they treat input from STDIN. The first token from each line of STDIN is taken to be a resource identifiers (and the rest is discarded). $ stacks | grep postgres | stack-delete You are about to delete the following stacks: postgres01 postgres02 Are you sure you want to continue ? y Some users have compared this User Experience to functionality in Windows Powershell.","title":"Unix Pipeline Friendly"},{"location":"#convenient-shortcuts","text":"Bash-my-AWS is insanely simple to pick up and start using but contains a lot of convenient shortcuts you can make use of. Example: resource listing commands accept a filter argument, removing the need for | grep . In the following example someone has given a CloudFormation stack a really long name: $ stacks nagios CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres01 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED prometheus CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED stack-with-a-annoyingly-long-name CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED This affects the output when we look at our Postgres stacks: $ stacks | grep postgres postgres01 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED The resource listing command can filter output before applying column . $ stacks postgres postgres01 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED","title":"Convenient Shortcuts"},{"location":"#quickstart","text":"","title":"Quickstart"},{"location":"#prerequisites","text":"awscli bash jq-1.4 or later (for stack-diff)","title":"Prerequisites"},{"location":"#installation","text":"As shown below, you may simply clone the GitHub repo and source the files required. (You should probably fork it instead to keep your customisations) $ git clone https://github.com/bash-my-aws/bash-my-aws.git ~/.bash-my-aws Put the following in your shell's startup file: export PATH = \" $PATH : $HOME /.bash-my-aws/bin\" source ~/.bash-my-aws/aliases # For ZSH users, uncomment the following two lines: # autoload -U +X compinit && compinit # autoload -U +X bashcompinit && bashcompinit source ~/.bash-my-aws/bash_completion.sh Why use shell aliases? Bash-my-AWS began as a collection of bash functions, sourced into your shell. More recently, the default suggestion has been to load aliases that execute a small wrapper script that loads the functions and executes the desired function. After years of zsh users asking for support, one stepped up and identified a changes that would eliminate any shell compatibility problems without compromising the functionaility, simplicity and discoverability of the project. Massive thanks to @ninth-dev for this. # bash users may source the functions instead of loading the aliases if [ -d ${HOME}/.bash-my-aws ]; then for f in ~/.bash-my-aws/lib/*-functions; do source $f; done fi","title":"Installation"},{"location":"#usage","text":"","title":"Usage"},{"location":"#running-commands","text":"The default way to run the commands is using the aliases: $ instances i-e6f097f6ea4457757 ami-123456789012 t3.nano running example-ec2-ap-southeast-2 2019-12-07T08:12:00.000Z ap-southeast-2a None i-b983805b4b254f749 ami-123456789012 t3.nano running postfix-prod 2019-12-07T08:26:30.000Z ap-southeast-2a None i-fed39ebe7204dfd37 ami-123456789012 t3.nano running postfix-prod 2019-12-07T08:26:34.000Z ap-southeast-2a None i-47955eb46d98b4dd8 ami-123456789012 t3.nano running prometheus 2019-12-07T08:27:02.000Z ap-southeast-2a None i-8d25b78d40d17f38a ami-123456789012 t3.nano running plex-server 2019-12-07T08:27:38.000Z ap-southeast-2a None It's also possible to run them using the bma wrapper. (This is sometimes required when using a restrictive auth tool.) $ bma instances i-e6f097f6ea4457757 ami-123456789012 t3.nano running example-ec2-ap-southeast-2 2019-12-07T08:12:00.000Z ap-southeast-2a None i-b983805b4b254f749 ami-123456789012 t3.nano running postfix-prod 2019-12-07T08:26:30.000Z ap-southeast-2a None i-fed39ebe7204dfd37 ami-123456789012 t3.nano running postfix-prod 2019-12-07T08:26:34.000Z ap-southeast-2a None i-47955eb46d98b4dd8 ami-123456789012 t3.nano running prometheus 2019-12-07T08:27:02.000Z ap-southeast-2a None i-8d25b78d40d17f38a ami-123456789012 t3.nano running plex-server 2019-12-07T08:27:38.000Z ap-southeast-2a None","title":"Running Commands"},{"location":"#discovering-commands","text":"For each resource type, there is a command to list them: $ instances i-e6f097f6ea4457757 ami-123456789012 t3.nano running example-ec2-ap-southeast-2 2019 -12-07T08:12:00.000Z ap-southeast-2a None i-b983805b4b254f749 ami-123456789012 t3.nano running postfix-prod 2019 -12-07T08:26:30.000Z ap-southeast-2a None i-fed39ebe7204dfd37 ami-123456789012 t3.nano running postfix-prod 2019 -12-07T08:26:34.000Z ap-southeast-2a None i-47955eb46d98b4dd8 ami-123456789012 t3.nano running prometheus 2019 -12-07T08:27:02.000Z ap-southeast-2a None i-8d25b78d40d17f38a ami-123456789012 t3.nano running plex-server 2019 -12-07T08:27:38.000Z ap-southeast-2a None and a number of command to act on these resources: $ instance-[TAB][TAB] instance-asg instance-ssh-details instance-termination-protection instance-az instance-stack instance-termination-protection-disable instance-console instance-start instance-termination-protection-enable instance-dns instance-state instance-type instance-iam-profile instance-stop instance-userdata instance-ip instance-tags instance-volumes instance-ssh instance-terminate instance-vpc Whether you're new to the tools or just have a bad memory, bash completion makes discovering these commands simple. See the Command Reference for a full list with usage examples","title":"Discovering Commands"},{"location":"#piping-between-commands","text":"This is where the magic happens! The first token on each line is almost always a resource identifier. When you pipe output between the commands they just take the first token from each line. $ instances | grep postfix | instance-ip i-b983805b4b254f749 10.190.1.70 54.214.71.51 i-fed39ebe7204dfd37 10.135.204.82 54.214.26.190 Note Most commands that list resources ( stacks , instances , etc) accept filter term as first arg. As well as reducing keystrokes, it can also improve output as columnisation is done after filtering. $ instances postfix | instance-ip i-b983805b4b254f749 10.190.1.70 54.214.71.51 i-fed39ebe7204dfd37 10.135.204.82 54.214.26.190","title":"Piping Between Commands"},{"location":"#inspecting-commands","text":"For those interested in how it works: Each command is a bash function. Most are very simple and wrap an AWSCLI command. For a quick look at how a command works, you can use bma type : $ bma type instances instances is a function instances () { local instance_ids = $( __bma_read_inputs ) ; local filters = $( __bma_read_filters $@ ) ; aws ec2 describe-instances $( [[ -n ${ instance_ids } ]] && echo --instance-ids ${ instance_ids } ) --query \" Reservations[].Instances[][ InstanceId, ImageId, InstanceType, State.Name, [Tags[?Key=='Name'].Value][0][0], LaunchTime, Placement.AvailabilityZone, VpcId ]\" --output text | grep -E -- \" $filters \" | LC_ALL = C sort -b -k 6 | column -s ' ' -t } A prettier version can be found in the source code: # ~/.bash-my-aws/lib/instance-functions instances () { local instance_ids = $( __bma_read_inputs ) local filters = $( __bma_read_filters $@ ) aws ec2 describe-instances \\ $( [[ -n ${ instance_ids } ]] && echo --instance-ids ${ instance_ids } ) \\ --query \" Reservations[].Instances[][ InstanceId, ImageId, InstanceType, State.Name, [Tags[?Key=='Name'].Value][0][0], LaunchTime, Placement.AvailabilityZone, VpcId ]\" \\ --output text | grep -E -- \" $filters \" | LC_ALL = C sort -b -k 6 | column -s $'\\t' -t } For more info on AWSCLI query syntax, check out http://jmespath.org/tutorial.html","title":"Inspecting Commands"},{"location":"CONTRIBUTING/","text":"CONTRIBUTING \u00b6 How to build and maintain your own functions without worrying about future merge conflicts Modern software has so many interdependencies that maintaining your own changes locally can be a pain. BMA doesn't want to be a bottleneck but also wants to maintain consistency and avoid bloat. Proposing changes upstream - Read docs/style.md - Allowing changes to a pull request branch created from a fork","title":"CONTRIBUTING"},{"location":"CONTRIBUTING/#contributing","text":"How to build and maintain your own functions without worrying about future merge conflicts Modern software has so many interdependencies that maintaining your own changes locally can be a pain. BMA doesn't want to be a bottleneck but also wants to maintain consistency and avoid bloat. Proposing changes upstream - Read docs/style.md - Allowing changes to a pull request branch created from a fork","title":"CONTRIBUTING"},{"location":"cloudformation-naming/","text":"Suggested stack/template/param file naming conventions \u00b6 bash-my-aws can take a lot of the effort out of creating and updating CloudFormation (CFN) stacks. Tab completion on remote stack names and even local file names is provided. Additionally, the create/update/diff commands can make life much easier if you follow some simple file naming conventions. These are completely optional. stack : token-env template: token.yml params : token-params-env.json or params/token-params-env.json Where: token : describes the resources (mywebsite, vpc, bastion, etc) env : environment descriptor (dev, test, prod, etc) Following these (entirely optional) conventions means bash-my-aws can infer template & params file from stack name. For example: $ stack-create mywebsite-test is equivalent (if files present) to: $ stack-create mywebsite-test mywebsite.yml mywebsite-params-test.json you could even achieve the same result with: $ stack-create mywebsite-params-test.json Other benefits include: ease in locating stack for template (and vice versa) based on name template and params files are listed together on filesystem stack name env suffixes protect against accidents (wrong account error) supports prodlike non-prod environments through using same template And don't forget, these naming conventions are completely optional.","title":"CloudFormation Naming"},{"location":"cloudformation-naming/#suggested-stacktemplateparam-file-naming-conventions","text":"bash-my-aws can take a lot of the effort out of creating and updating CloudFormation (CFN) stacks. Tab completion on remote stack names and even local file names is provided. Additionally, the create/update/diff commands can make life much easier if you follow some simple file naming conventions. These are completely optional. stack : token-env template: token.yml params : token-params-env.json or params/token-params-env.json Where: token : describes the resources (mywebsite, vpc, bastion, etc) env : environment descriptor (dev, test, prod, etc) Following these (entirely optional) conventions means bash-my-aws can infer template & params file from stack name. For example: $ stack-create mywebsite-test is equivalent (if files present) to: $ stack-create mywebsite-test mywebsite.yml mywebsite-params-test.json you could even achieve the same result with: $ stack-create mywebsite-params-test.json Other benefits include: ease in locating stack for template (and vice versa) based on name template and params files are listed together on filesystem stack name env suffixes protect against accidents (wrong account error) supports prodlike non-prod environments through using same template And don't forget, these naming conventions are completely optional.","title":"Suggested stack/template/param file naming conventions"},{"location":"command-reference/","text":"The project provides over 120 commands but fear not, much has been done to make them discoverable , memorable and hopefully in many cases obvious . The reference material below is all extracted from the source of the commands. While not necessary to use the commands. Be curious. Read the source. :-) Lists in this project are alphabetised except where it makes sense not to. The first few sets of commands were chosen because they are likely to be of the most interest to readers. General Rules Commands expect $AWS_DEFAULT_REGION environment variable to be set (check/set with region command) Most commands that list resources ( stacks , `instances , etc) accept filter term as first arg. e.g. stacks blah is equivalent to stacks | grep blah Most commands accept resource identifiers via STDIN (first token of each line) Resources are generally listed in chronological order of creation. aws-account-commands \u00b6 aws-account-alias \u00b6 Retrieve AWS Account Alias for current account $ aws-account-alias example-account-prod aws-account-id \u00b6 Retrieve AWS Account ID for current account $ aws-account-id 012345678901 aws-account-each \u00b6 Run a script/command across a number of AWS Accounts USAGE: aws-account-each cmd # pipe in AWS_ACCOUNT_IDS $ grep non_prod AWS_ACCOUNTS | aws-account-each stacks FAILED # account=012345678901 alias=example-account-prod example-stack1-prod CREATED_FAILED example-stack2-prod UPDATE_ROLLBACK_FAILED # account=123456789012 alias=example-account-staging example-stack1-staging CREATED_FAILED example-stack2-staging UPDATE_ROLLBACK_FAILED Note In order to use aws-account-each , you need to be authenticated with an IAM Role that can assume a Role in each of the specified accounts. Check the source for more info. aws-panopticon \u00b6 aws-panopticon was previous name for aws-account-each() aws-account-cost-explorer \u00b6 Use with an AWS Organisations Master Account to open multiple accounts in Cost Explorer. $ grep demo AWS_ACCOUNTS | aws-account-cost-explorer #=> Opens web browser to AWS Cost Explorer with accounts selected aws-account-cost-recommendations \u00b6 Use with an AWS Organisations Master Account to open multiple accounts in Cost Recommendations. $ grep non_prod AWS_ACCOUNTS | aws-account-each stacks FAILED #=> Opens web browser to AWS Cost Recommendations with accounts selected region-commands \u00b6 regions \u00b6 List regions The region() function must be sourced in order to update the AWS_DEFAULT_REGION environment variable. This is because it cannot update an environment variable when run as a subprocess. $ regions ap-northeast-1 ap-northeast-2 ap-south-1 ap-southeast-1 ap-southeast-2 ... us-west-2 region \u00b6 Get/Set $AWS_DEFAULT_REGION shell environment variable $ region us-east-1 $ region ap-southeast-2 $ region ap-southeast-2 region-each \u00b6 Run a command in every region. Any output lines will be appended with \"#${REGION}\". $ region-each stacks | column -t example-ec2-ap-northeast-1 CREATE_COMPLETE 2011-05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #ap-northeast-1 example-ec2-ap-northeast-2 CREATE_COMPLETE 2011-05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #ap-northeast-2 ... example-ec2-us-west-2 CREATE_COMPLETE 2011-05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #us-west-2 stack-commands \u00b6 stacks \u00b6 List CloudFormation stacks. To make it fly we omit stacks with status of DELETE_COMPLETE Output is sorted by CreationTime $ stacks nagios CREATE_COMPLETE 2018-03-12T11:41:31Z NEVER_UPDATED NOT_NESTED postgres1 CREATE_COMPLETE 2019-04-14T15:22:44Z NEVER_UPDATED NOT_NESTED postgres2 CREATE_COMPLETE 2019-05-18T05:45:50Z NEVER_UPDATED NOT_NESTED prometheus-web CREATE_COMPLETE 2019-11-23T15:57:04Z NEVER_UPDATED NOT_NESTED Provide a filter string for a | grep effect with tighter columisation: $ stacks postgres postgres1 CREATE_COMPLETE 2019-04-14T15:22:44Z NEVER_UPDATED NOT_NESTED postgres2 CREATE_COMPLETE 2019-05-18T05:45:50Z NEVER_UPDATED NOT_NESTED stack-arn \u00b6 Returns ARN(s) for stacks. USAGE: stack-arn stack [stack] $ stack-arn prometheus-web arn:aws:cloudformation:us-east-1:000000000000:stack/prometheus-web/805e081c-b8eb-4f6c-9872-2b5cddc77fba Supports multiple stack names from STDIN : $ stacks | stack-arn arn:aws:cloudformation:us-east-1:000000000000:stack/nagios/c0f0ef04-b505-4c0c-87cd-ca924153ad1c arn:aws:cloudformation:us-east-1:000000000000:stack/postgres1/758b0ba2-60f2-4432-8935-f79f47708f23 arn:aws:cloudformation:us-east-1:000000000000:stack/postgres2/7420bbd4-3026-444f-b55b-fa0a9d564730 arn:aws:cloudformation:us-east-1:000000000000:stack/prometheus-web/805e081c-b8eb-4f6c-9872-2b5cddc77fba stack-cancel-update \u00b6 Cancel an in-progress stack update stack-create \u00b6 Create a CloudFormation Stack See suggested CloudFormation File Naming Conventions to take advantage of shorter commands USAGE: stack-create stack [template-file] [parameters-file] \\ [--capabilities=OPTIONAL_VALUE] [--role-arn=OPTIONAL_VALUE] $ stack-create params/asg-params-prod.json Resolved arguments: asg-prod ./asg.yml params/asg-params-prod.json arn:aws:cloudformation:ap-southeast-2:812094344564:stack/asg-prod/98d40130-23f2-11ea-b7c1-06494f833672 ---------------------------------------------------------------------------------------------- | DescribeStackEvents | +---------------------------+-----------+------------------------------+---------------------+ | 2019-12-21T13:05:44.261Z | asg-prod | AWS::CloudFormation::Stack | CREATE_IN_PROGRESS | -------------------------------------------------------------------------------------------------------------------- | DescribeStackEvents | +--------------------------+----------------------+-----------------------------------------+----------------------+ | 2019-12-21T13:05:44.261Z| asg-prod | AWS::CloudFormation::Stack | CREATE_IN_PROGRESS | | 2019-12-21T13:05:48.351Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_IN_PROGRESS | | 2019-12-21T13:05:48.828Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_IN_PROGRESS | | 2019-12-21T13:05:49.187Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_COMPLETE | | 2019-12-21T13:05:51.230Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_IN_PROGRESS | | 2019-12-21T13:05:51.837Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_IN_PROGRESS | | 2019-12-21T13:05:52.950Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_COMPLETE | | 2019-12-21T13:05:54.493Z| asg-prod | AWS::CloudFormation::Stack | CREATE_COMPLETE | +--------------------------+----------------------+-----------------------------------------+----------------------+ stack-update \u00b6 Update a CloudFormation Stack See suggested CloudFormation File Naming Conventions to take advantage of shorter commands USAGE: stack-update stack [template-file] [parameters-file] \\ [--capabilities=OPTIONAL_VALUE] [--role-arn=OPTIONAL_VALUE] $ stack-update params/asg-params-prod.json Resolved arguments: asg-prod ./asg.yml params/asg-params-prod.json arn:aws:cloudformation:ap-southeast-2:812094344564:stack/asg-prod/98d40130-23f2-11ea-b7c1-06494f833672 -------------------------------------------------------------------------------------------------------------------- | DescribeStackEvents | +--------------------------+----------------------+-----------------------------------------+----------------------+ | 2019-12-21T13:05:44.261Z| asg-prod | AWS::CloudFormation::Stack | CREATE_IN_PROGRESS | | 2019-12-21T13:05:48.351Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_IN_PROGRESS | | 2019-12-21T13:05:48.828Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_IN_PROGRESS | | 2019-12-21T13:05:49.187Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_COMPLETE | | 2019-12-21T13:05:51.230Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_IN_PROGRESS | | 2019-12-21T13:05:51.837Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_IN_PROGRESS | | 2019-12-21T13:05:52.950Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_COMPLETE | | 2019-12-21T13:05:54.493Z| asg-prod | AWS::CloudFormation::Stack | CREATE_COMPLETE | | 2019-12-21T13:12:43.731Z| asg-prod | AWS::CloudFormation::Stack | UPDATE_IN_PROGRESS | | 2019-12-21T13:12:48.294Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | UPDATE_IN_PROGRESS | ------------------------------------------------------------------------------------------------------------------------------------- | DescribeStackEvents | +--------------------------+----------------------+-----------------------------------------+---------------------------------------+ | 2019-12-21T13:05:44.261Z| asg-prod | AWS::CloudFormation::Stack | CREATE_IN_PROGRESS | | 2019-12-21T13:05:48.351Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_IN_PROGRESS | | 2019-12-21T13:05:48.828Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_IN_PROGRESS | | 2019-12-21T13:05:49.187Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_COMPLETE | | 2019-12-21T13:05:51.230Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_IN_PROGRESS | | 2019-12-21T13:05:51.837Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_IN_PROGRESS | | 2019-12-21T13:05:52.950Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_COMPLETE | | 2019-12-21T13:05:54.493Z| asg-prod | AWS::CloudFormation::Stack | CREATE_COMPLETE | | 2019-12-21T13:12:43.731Z| asg-prod | AWS::CloudFormation::Stack | UPDATE_IN_PROGRESS | | 2019-12-21T13:12:48.294Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | UPDATE_IN_PROGRESS | | 2019-12-21T13:14:05.182Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | UPDATE_COMPLETE | | 2019-12-21T13:14:07.118Z| asg-prod | AWS::CloudFormation::Stack | UPDATE_COMPLETE_CLEANUP_IN_PROGRESS | | 2019-12-21T13:14:07.820Z| asg-prod | AWS::CloudFormation::Stack | UPDATE_COMPLETE | +--------------------------+----------------------+-----------------------------------------+---------------------------------------+ stack-delete \u00b6 Delete a CloudFormation Stack USAGE: stack-delete stack [stack] $ stacks | stack-delete You are about to delete the following stacks: asg-prod Are you sure you want to continue? y ------------------------------------------------------------------------------------------------------------------------------------- | DescribeStackEvents | +--------------------------+----------------------+-----------------------------------------+---------------------------------------+ | 2019-12-21T13:05:44.261Z| asg-prod | AWS::CloudFormation::Stack | CREATE_IN_PROGRESS | | 2019-12-21T13:05:48.351Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_IN_PROGRESS | | 2019-12-21T13:05:48.828Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_IN_PROGRESS | | 2019-12-21T13:05:49.187Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_COMPLETE | | 2019-12-21T13:05:51.230Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_IN_PROGRESS | | 2019-12-21T13:05:51.837Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_IN_PROGRESS | | 2019-12-21T13:05:52.950Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_COMPLETE | | 2019-12-21T13:05:54.493Z| asg-prod | AWS::CloudFormation::Stack | CREATE_COMPLETE | | 2019-12-21T13:12:43.731Z| asg-prod | AWS::CloudFormation::Stack | UPDATE_IN_PROGRESS | | 2019-12-21T13:12:48.294Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | UPDATE_IN_PROGRESS | | 2019-12-21T13:14:05.182Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | UPDATE_COMPLETE | | 2019-12-21T13:14:07.118Z| asg-prod | AWS::CloudFormation::Stack | UPDATE_COMPLETE_CLEANUP_IN_PROGRESS | | 2019-12-21T13:14:07.820Z| asg-prod | AWS::CloudFormation::Stack | UPDATE_COMPLETE | | 2019-12-21T13:18:06.709Z| asg-prod | AWS::CloudFormation::Stack | DELETE_IN_PROGRESS | | 2019-12-21T13:18:08.931Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | DELETE_IN_PROGRESS | An error occurred (ValidationError) when calling the DescribeStackEvents operation: Stack [asg-prod] does not exist Note that the error reported at the end of stack-delete command is just AWSCLI saying it can't find the stack anymore. stack-exports \u00b6 stack-recreate \u00b6 stack-failure \u00b6 Return reason a stack failed to update/create/delete stack-events \u00b6 List event history for a single Stack USAGE: stack-events stack stack-resources \u00b6 List all resources in Stack(s) USAGE: stack-resources stack [stack] $ stacks | stack-resources i-7d54924538baa7a1f AWS::EC2::Instance ec2 i-c54279c6055c3c794 AWS::EC2::Instance nagios i-a8b8dd6783e1a40cc AWS::EC2::Instance postgres1 i-5d74753e210bfe04d AWS::EC2::Instance postgres2 i-2aa95cc214a461398 AWS::EC2::Instance prometheus-web stack-asgs \u00b6 List ASGs in Stack(s) USAGE: stack-asgs stack [stack] $ stacks | stack-asgs asg-bash-my-aws-AutoScalingGroup-MSBCWRTI3PVM AWS::AutoScaling::AutoScalingGroup asg-bash-my-aws asg2-AutoScalingGroup-1FHUVUJ7SLPU7 AWS::AutoScaling::AutoScalingGroup asg2 stack-asg-instances \u00b6 List EC2 Instances of EC2 Autoscaling Groups in Stack(s) USAGE: stack-asg-instances stack [stack] $ stacks | stack-asg-instances i-06ee900565652ecc5 ami-0119aa4d67e59007c t3.nano running asg-bash-my-aws 2019-12-13T03:15:22.000Z ap-southeast-2c vpc-deb8edb9 i-01c7edb986c18c16a ami-0119aa4d67e59007c t3.nano running asg2 2019-12-13T03:37:51.000Z ap-southeast-2c vpc-deb8edb9 stack-elbs \u00b6 List EC2 Elastic Load Balancers in Stack(s) USAGE: stack-elbs stack [stack] $ stacks | stack-elbs elb-MyLoadBalancer-NA5S72MLA5KI AWS::ElasticLoadBalancing::LoadBalancer elb-stack-1 load-bala-MyLoadBa-11HZ0DHUHJZZI AWS::ElasticLoadBalancing::LoadBalancer elb-stack-2 stack-instances \u00b6 List instances in stack(s) USAGE: stack-instances stack [stack] $ stacks | stack-instances i-7d54924538baa7a1f ami-123456789012 t3.nano stopped ec2 2019-12-11T09:31:03.000Z ap-southeast-2a None i-c54279c6055c3c794 ami-123456789012 t3.nano running nagios 2019-12-13T02:24:30.000Z ap-southeast-2a None i-a8b8dd6783e1a40cc ami-123456789012 t3.nano running postgres1 2019-12-13T02:24:32.000Z ap-southeast-2a None i-5d74753e210bfe04d ami-123456789012 t3.nano running postgres2 2019-12-13T02:24:34.000Z ap-southeast-2a None i-2aa95cc214a461398 ami-123456789012 t3.nano running prometheus-web 2019-12-13T02:24:36.000Z ap-southeast-2a None stack-parameters \u00b6 List parameters of stack stack-status \u00b6 List status of stack stack-tag \u00b6 Return selected stack tag stack-tail \u00b6 Show all events for CF stack until update completes or fails. stack-template \u00b6 Return template of a stack stack-tags \u00b6 List stack-tags applied to a stack stack-tags-text \u00b6 List stack-tags applied to a stack on a single line stack-outputs \u00b6 List outputs of a stack stack-validate \u00b6 Validate a stack template stack-diff \u00b6 Compare live stack against local template (and optional params file) USAGE: stack-diff stack [template-file] $ stack-diff params/asg-params-prod.json Resolved arguments: asg-prod ./asg.yml params/asg-params-prod.json template for stack (asg-prod) and contents of file (./asg.yml) are the same Resolved arguments: asg-prod ./asg.yml params/asg-params-prod.json --- params +++ params/asg-params-prod.json @@ -1,11 +1,11 @@ [ { \"ParameterKey\": \"AsgMaxSize\", - \"ParameterValue\": \"5\" + \"ParameterValue\": \"2\" }, { \"ParameterKey\": \"AsgMinSize\", - \"ParameterValue\": \"0\" + \"ParameterValue\": \"1\" }, { \"ParameterKey\": \"InstanceType\", report changes which would be made to stack if template were applied report on what changes would be made to stack by applying params Derive and check arguments for: stack-create stack-delete stack-diff In the interests of making the functions simple and a shallow read, it's unusual for us to abstract out shared code like this. This bit is doing some funky stuff though and I think it deserves to go in it's own function to DRY (Don't Repeat Yourself) it up a bit. This function takes the unusual approach of writing to variables of the calling function: stack template params This is generally not good practice for readability and unexpected outcomes. To contain this, the calling functions all clearly declare these three variables as local and contain a comment that they will be set by this function. If we are working from a single argument (ignore args starting with -- ) Strip path and extension from template Deduce params filename from stack and template names Strip path and extension from template File extension gets stripped off if template name provided as stack name Determine name of template to use determine name of params file to use determine what (if any) capabilities a given stack was deployed with instance-commands \u00b6 instances \u00b6 List EC2 Instances $ instances i-4e15ece1de1a3f869 ami-123456789012 t3.nano running nagios 2019-12-10T08:17:18.000Z ap-southeast-2a None i-89cefa9403373d7a5 ami-123456789012 t3.nano running postgres1 2019-12-10T08:17:20.000Z ap-southeast-2a None i-806d8f1592e2a2efd ami-123456789012 t3.nano running postgres2 2019-12-10T08:17:22.000Z ap-southeast-2a None i-61e86ac6be1e2c193 ami-123456789012 t3.nano running prometheus-web 2019-12-10T08:17:24.000Z ap-southeast-2a None Optionally provide a filter string for a | grep effect with tighter columisation: $ instances postgres i-89cefa9403373d7a5 ami-123456789012 t3.nano running postgres1 2019-12-10T08:17:20.000Z ap-southeast-2a None i-806d8f1592e2a2efd ami-123456789012 t3.nano running postgres2 2019-12-10T08:17:22.000Z ap-southeast-2a None instance-asg \u00b6 List autoscaling group membership of EC2 Instance(s) USAGE: instance-asg instance-id [instance-id] instance-az \u00b6 List availability zone of EC2 Instance(s) USAGE: instance-az instance-id [instance-id] $ instances postgres | instance-az i-89cefa9403373d7a5 ap-southeast-2a i-806d8f1592e2a2efd ap-southeast-2a instance-console \u00b6 List console output of EC2 Instance(s) USAGE: instance-console instance-id [instance-id] $ instances postgres | instance-console Console output for EC2 Instance i-89cefa9403373d7a5 Linux version 2.6.16-xenU (builder@patchbat.amazonsa) (gcc version 4.0.1 20050727 (Red Hat 4.0.1-5)) #1 SMP Thu Oct 26 08:41:26 SAST 2006 BIOS-provided physical RAM map: Xen: 0000000000000000 - 000000006a400000 (usable) ...snip... Console output for EC2 Instance i-806d8f1592e2a2efd Linux version 2.6.16-xenU (builder@patchbat.amazonsa) (gcc version 4.0.1 20050727 (Red Hat 4.0.1-5)) #1 SMP Thu Oct 26 08:41:26 SAST 2006 BIOS-provided physical RAM map: Xen: 0000000000000000 - 000000006a400000 (usable) ...snip... instance-dns \u00b6 List DNS name of EC2 Instance(s) USAGE: instance-dns instance-id [instance-id] $ instances postgres | instance-dns i-89cefa9403373d7a5 ip-10-155-35-61.ap-southeast-2.compute.internal ec2-54-214-206-114.ap-southeast-2.compute.amazonaws.com i-806d8f1592e2a2efd ip-10-178-243-63.ap-southeast-2.compute.internal ec2-54-214-244-90.ap-southeast-2.compute.amazonaws.com instance-health-set-unhealthy \u00b6 Mark EC2 Instance(s) as unhealthy (to trigger replacement by ASG) USAGE: instance-health-set-unhealthy instance-id [instance-id] instance-iam-profile \u00b6 List iam-profile of EC2 Instance(s) USAGE: instance-iam-profile instance-id [instance-id] instance-ip \u00b6 List ip address of EC2 Instance(s) USAGE: instance-ip instance-id [instance-id] $ instances postgres | instance-ip i-89cefa9403373d7a5 10.155.35.61 54.214.206.114 i-806d8f1592e2a2efd 10.178.243.63 54.214.244.90 instance-ssh \u00b6 Establish SSH connection to EC2 Instance(s) USAGE: instance-ssh [login] [instance-id] [instance-id] instance-ssh-details \u00b6 List details needed to SSH into EC2 Instance(s) USAGE: instance-ssh-details [login] [instance-id] [instance-id] instance-stack \u00b6 List CloudFormation stack EC2 Instance(s) belong to (if any) USAGE: instance-stack instance-id [instance-id] $ instances postgres | instance-stack postgres1 i-89cefa9403373d7a5 postgres2 i-806d8f1592e2a2efd instance-start \u00b6 Start stopped EC2 Instance(s) USAGE: instance-start instance-id [instance-id] $ instances postgres | instance-start i-a8b8dd6783e1a40cc PreviousState=stopped CurrentState=pending i-5d74753e210bfe04d PreviousState=stopped CurrentState=pending instance-state \u00b6 List state of EC2 Instance(s) USAGE: instance-state instance-id [instance-id] $ instances postgres | instance-state i-89cefa9403373d7a5 running i-806d8f1592e2a2efd running instance-stop \u00b6 Stop EC2 Instance(s) USAGE: instance-stop instance-id [instance-id] $ instances postgres | instance-stop i-a8b8dd6783e1a40cc PreviousState=running CurrentState=stopping i-5d74753e210bfe04d PreviousState=running CurrentState=stopping instance-tags \u00b6 List tags applied EC2 Instance(s) USAGE: instance-tags instance-id [instance-id] instance-terminate \u00b6 Terminate EC2 Instance(s) USAGE: instance-terminate instance-id [instance-id] $ instances | head -3 | instance-terminate You are about to terminate the following instances: i-01c7edb986c18c16a ami-0119aa4d67e59007c t3.nano terminated asg2 2019-12-13T03:37:51.000Z ap-southeast-2c None i-012dded46894dfa04 ami-0119aa4d67e59007c t3.nano running ec2 2019-12-13T10:12:55.000Z ap-southeast-2b vpc-deb8edb9 Are you sure you want to continue? y i-06ee900565652ecc5 PreviousState=terminated CurrentState=terminated i-01c7edb986c18c16a PreviousState=terminated CurrentState=terminated i-012dded46894dfa04 PreviousState=running CurrentState=shutting-down instance-termination-protection \u00b6 List current state of Termination Protection for EC2 Instance(s) USAGE: instance-termination-protection instance-id [instance-id] $ instances | instance-termination-protection i-4e15ece1de1a3f869 DisableApiTermination=true i-89cefa9403373d7a5 DisableApiTermination=false i-806d8f1592e2a2efd DisableApiTermination=false i-61e86ac6be1e2c193 DisableApiTermination=false instance-termination-protection-disable \u00b6 Disable EC2 Instance termination protection USAGE: instance-termination-protection-disable instance-id [instance-id] instance-termination-protection-enable \u00b6 Enable EC2 Instance termination protection USAGE: instance-termination-protection-enable instance-id [instance-id] instance-type \u00b6 List type of instance(s) USAGE: instance-type instance-id [instance-id] $ instances | instance-type i-4e15ece1de1a3f869 t3.nano i-89cefa9403373d7a5 t3.nano i-806d8f1592e2a2efd t3.nano i-61e86ac6be1e2c193 t3.nano instance-userdata \u00b6 List userdata for instance(s) USAGE: instance-userdata instance-id [instance-id] instance-volumes \u00b6 List volumes of instance(s) USAGE: instance-volumes instance-id [instance-id] $ instances postgres | instance-volumes i-89cefa9403373d7a5 vol-cf5ddae9 i-806d8f1592e2a2efd vol-38fd45c3 instance-vpc \u00b6 List VPC of instance(s) USAGE: instance-vpcs instance-id [instance-id] asg-commands \u00b6 asgs \u00b6 List EC2 Autoscaling Groups asg-capacity \u00b6 List min, desired and maximum capacities of EC2 Autoscaling Group(s) asg-desired-size-set \u00b6 Set desired capacity of autoscaling group(s) asg-instances \u00b6 List instances of autoscaling group(s) asg-launch-configuration \u00b6 List Launch Configurations of Autoscaling Group(s) launch-configurations \u00b6 List Launch Configurations launch-configuration-asgs \u00b6 List EC2 Autoscaling Groups of Launch Configuration(s) asg-max-size-set \u00b6 Set maximum size of autoscaling group(s) asg-min-size-set \u00b6 Set minimum size of autoscaling group(s) asg-processes_suspended \u00b6 List suspended processes of an autoscaling group asg-resume \u00b6 Resume all processes of an autoscaling group asg-suspend \u00b6 Suspend all processes of an autoscaling group asg-stack \u00b6 List CloudFormation stack for asg(s) asg-scaling-activities \u00b6 List scaling activities for Autoscaling Group(s) cert-commands \u00b6 certs \u00b6 List ACM Certificates certs-arn \u00b6 Same as certs but with the ARN in first column cert-users \u00b6 List resources using ACM Cert(s) USAGE: cert-users cert-arn [cert-arn] cert-delete \u00b6 Delete ACM Cert(s) USAGE: cert-delete cert-arn [cert-arn] cloudtrail-commands \u00b6 cloudtrails \u00b6 List Cloudtrails $ cloudtrails failmode failmode-cloudtrail ap-southeast-2 IsMultiRegionTrail=true IncludeGlobalServiceEvents=true cloudtrail-status \u00b6 List logging status of Cloudtrails USAGE: cloudtrail-status cloudtrail [cloudtrail] ecr-commands \u00b6 ecr-repositories \u00b6 List ECR Repositories ecr-repository-images \u00b6 List images for ECR Repositories elb-commands \u00b6 elbs \u00b6 List ELBs Accepts LoadBalancer names on STDIN and converts to LoadBalancer names $ elbs elb-MyLoadBalancer-1FNISWJN0W6N9 2019-12-13T10:24:55.220Z another-e-MyLoadBa-171CPCZF2E84T 2019-12-13T10:25:24.300Z elb-dnsname \u00b6 List DNS Names of ELB(s) USAGE: elb-dnsname load-balancer [load-balancer] $ elbs | elb-dnsname elb-MyLoadBalancer-1FNISWJN0W6N9 elb-MyLoadBalancer-1FNISWJN0W6N9-563832045.ap-southeast-2.elb.amazonaws.com another-e-MyLoadBa-171CPCZF2E84T another-e-MyLoadBa-171CPCZF2E84T-1832721930.ap-southeast-2.elb.amazonaws.com elb-instances \u00b6 List instances of ELB(s) USAGE: elb-instances load-balancer [load-balancer] elb-stack \u00b6 List CloudFormation stack names of ELB(s) USAGE: elb-stack load-balancer [load-balancer] $ elbs | elb-stack elb elb-MyLoadBalancer-1FNISWJN0W6N9 another-elb another-e-MyLoadBa-171CPCZF2E84T elb-subnets \u00b6 List subnets of ELB(s) USAGE: elb-subnets load-balancer [load-balancer] $ elbs | elb-subnets rails-demo-ELB-FRBEQPCYSZQD subnet-5e257318 subnet-7828cd0f subnet-c25fa0a7 huginn-ELB-BMD0QUX179PK subnet-5e257318 subnet-7828cd0f subnet-c25fa0a7 prometheus-ELB-C0FGVLGQ64UH subnet-5e257318 subnet-7828cd0f subnet-c25fa0a7 elb-azs \u00b6 List Availability Zones of ELB(s) USAGE: elb-azs load-balancer [load-balancer] $ elbs | elb-azs rails-demo-ELB-FRBEQPCYSZQD ap-southeast-2a ap-southeast-2b ap-southeast-2c huginn-ELB-BMD0QUX179PK ap-southeast-2a ap-southeast-2b ap-southeast-2c elbv2-commands \u00b6 elbv2s \u00b6 List EC2 ELBv2 load balancers (both Network and Application types) Accepts Load Balancer names on STDIN and converts to Network Load Balancer names $ elbv2s bash-my-aws network internet-facing active 2020-01-04T11:18:49.733Z bash-my-aws-alb application internet-facing provisioning 2020-01-04T11:29:45.030Z elbv2-dnsname \u00b6 List DNS Names of elbv2(s) USAGE: elbv2-dnsname load-balancer [load-balancer] $ elbv2s | elbv2-dnsname bash-my-aws bash-my-aws-c23c598688520e51.elb.ap-southeast-2.amazonaws.com bash-my-aws-alb bash-my-aws-alb-2036199590.ap-southeast-2.elb.amazonaws.com elbv2-subnets \u00b6 List subnets of ELBv2(s) [Application and Network Load Balancers) USAGE: elbv2-subnets load-balancer [load-balancer] $ elbv2s | elbv2-subnets bash-my-aws subnet-c25fa0a7 bash-my-aws-alb subnet-7828cd0f subnet-c25fa0a7 elbv2-azs \u00b6 List Availability Zones of ELB(s) USAGE: elb-azs load-balancer [load-balancer] $ elbv2s | elbv2-subnets bash-my-aws ap-southeast-2a bash-my-aws-alb ap-southeast-2a ap-southeast-2b iam-commands \u00b6 iam-roles \u00b6 List IAM Roles $ iam-roles config-role-ap-southeast-2 AROAI3QHAU3J2CDRNLQHD 2017-02-02T03:03:02Z AWSBatchServiceRole AROAJJWRGUPTRXTV52TED 2017-03-09T05:31:39Z ecsInstanceRole AROAJFQ3WMZXESGIKW5YD 2017-03-09T05:31:39Z iam-role-principal \u00b6 List role principal for IAM Role(s) USAGE: iam-role-principal role-name [role-name] iam-users \u00b6 List IAM Users $ iam-users config-role-ap-southeast-2 AROAI3QHAU3J2CDRNLQHD 2017-02-02T03:03:02Z AWSBatchServiceRole AROAJJWRGUPTRXTV52TED 2017-03-09T05:31:39Z ecsInstanceRole AROAJFQ3WMZXESGIKW5YD 2017-03-09T05:31:39Z image-commands \u00b6 images \u00b6 List EC2 AMI's Usage: images [owner] [image-id] [image-id]... owner defaults to self or can one or more of: an AWS_ACCOUNT_ID (e.g. 1234567890) an AWS_OWNER_ALIAS (amazon, amazon-marketplace, microsoft) image_id can be one or more AMIs Trialing a different approach for grabbing resource ids from input. As normal, you can pipe resource ids in as first token on each line. We treat all args that don't start with ami- as owner identifiers. Trialing a new pattern for output - putting the Name at the end. This is more like the output of ls -la Pro: Preceding fields tend to be of the same length Pro: Easier for eyes to scan final column for names(?) Con: Using this pattern for instances() would put name past 80 char point Con: Migrating instances() to this output is A Big Change (not made lightly) image-deregister \u00b6 Deregister AMI(s) USAGE: image-deregister image_id [image_id] keypair-commands \u00b6 keypairs \u00b6 List EC2 SSH Keypairs in current Region $ keypairs alice 8f:85:9a:1e:6c:76:29:34:37:45:de:7f:8d:f9:70:eb bob 56:73:29:c2:ad:7b:6f:b6:f2:f3:b4:de:e4:2b:12:d4 keypair-create \u00b6 Create SSH Keypair on local machine and import public key into new EC2 Keypair. Provides benefits over AWS creating the keypair: Amazon never has access to private key. Private key is protected with passphrase before being written to disk. Keys is written to ~/.ssh with correct file permissions. You control the SSH Key type (algorithm, length, etc). USAGE: keypair-create [key_name] [key_dir] $ keypair-create yet-another-keypair Creating /home/m/.ssh/yet-another-keypair Generating public/private rsa key pair. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/m/.ssh/yet-another-keypair. Your public key has been saved in /home/m/.ssh/yet-another-keypair.pub. The key fingerprint is: SHA256:zIpbxLo7rpQvKyezOLATk96B1kSL0QP41q6x8tUrySk m@localhost.localdomain The key's randomart image is: +---[RSA 4096]----+ |..o | |.. + | | .+.o | | .oo.. o | | o+. o S | |=o.+.= . | |+++==o+ | |XoE+ + . | |o@+ *+. | +----[SHA256]-----+ { \"KeyFingerprint\": \"21:82:f9:5b:79:d6:dc:0f:7b:79:43:7c:c5:34:6c:2d\", \"KeyName\": \"yet-another-keypair\" } Note KeyPair Name defaults to \"$(aws-account-alias)-$(region)\" if none provided keypair-delete \u00b6 Delete EC2 SSH Keypairs by providing their names as arguments or via STDIN USAGE: keypair-delete key_name [key_name] $ keypair-delete alice bob You are about to delete the following EC2 SSH KeyPairs: alice bob Are you sure you want to continue? y $ keypairs | keypair-delete You are about to delete the following EC2 SSH KeyPairs: yet-another-keypair Are you sure you want to continue? y kms-commands \u00b6 kms-encrypt \u00b6 Encrypt and base64 encode STDIN or file USAGE: kms-encrypt key_id/alias_id [plaintext_file] $ echo foobar | kms-encrypt alias/default AQICAHgcyN4vd3V/OB7NKI6IMbpENEu1+UfyiU... kms-decrypt \u00b6 base64 decode and decrypt KMS Encrypted file or STDIN USAGE: kms-decrypt [ciphertext_file] $ kms-decrypt ciphertext.txt foobar $ echo foobar | kms-encrypt alias/default | kms-decrypt foobar kms-aliases \u00b6 List KMS Aliases $ kms-aliases default alias/default d714a175-db12-4574-8f27-aa071a1dfd8a arn:aws:kms:ap-southeast-2:089834043791:alias/default kms-alias-create \u00b6 Create alias for KMS Key USAGE: kms-alias-create alias_name key_id $ kms-keys | tail -1 d714a175-db12-4574-8f27-aa071a1dfd8a $ kms-keys | tail -1 | kms-alias-create alias/foobar $ kms-aliases foobar alias/foobar d714a175-db12-4574-8f27-aa071a1dfd8a arn:aws:kms:ap-southeast-2:089834043791:alias/foobar kms-alias-delete \u00b6 Delete alias for KMS Key USAGE: kms-alias-delete alias_name [alias_name] $ kms-aliases foobar | kms-alias-delete You are about to delete the following kms aliases: alias/foobar Are you sure you want to continue? y kms-keys \u00b6 List KMS Keys $ kms-keys 5044958c-151d-4995-bed4-dd05c1385b48 8ada3e65-e377-4435-a709-fbe75dfa1dd0 d714a175-db12-4574-8f27-aa071a1dfd8a kms-key-create \u00b6 Create a KMS Key $ kms-key-create 9e94333b-8e85-497a-9791-e7c5edf9c35e kms-key-details \u00b6 List details for KMS Key(s) kms-key-disable \u00b6 Disable KMS Key(s) USAGE: kms-key-disable key_id [key_id] $ kms-key-disable 9e94333b-8e85-497a-9791-e7c5edf9c35e kms-key-enable \u00b6 Enable KMS Key(s) USAGE: kms-key-enable key_id [key_id] $ kms-key-enable 9e94333b-8e85-497a-9791-e7c5edf9c35e lambda-commands \u00b6 lambda-functions \u00b6 List lambda functions $ lambda-functions stars 2019-12-18T10:00:00.000+0000 python2.7 256 stripes 2019-12-19T10:21:42.444+0000 python3.7 128 lambda-function-memory \u00b6 List memorySize for lambda function(s) USAGE: lambda-function-memory function [function] lambda-function-memory-set \u00b6 Update memorySize for lambda function(s) USAGE: lambda-function-memory-set memory function [function] lambda-function-memory-step \u00b6 Repeatedly update memorySize for lambda function(s) Useful for measuring impact of memory on cost/performance. The function increases memorySize by 64KB every two minutes until it reaches the value requested. There is a two minute delay between increases to provide time to collect data from function execution. USAGE: lambda-function-memory-step memory function [function] log-commands \u00b6 log-groups \u00b6 List CloudWatch Log Groups $ log-groups /aws/lambda/stars2 1576495961429 0 11736 /aws/lambda/stars 1576566745961 0 107460 /aws/lambda/walk 1576567300172 0 11794 rds-commands \u00b6 rds-db-instances \u00b6 List RDS Database Instances rds-db-clusters \u00b6 List RDS Database Clusters route53-commands \u00b6 hosted-zones \u00b6 List Route53 Hosted Zones $ hosted-zones /hostedzone/Z3333333333333 5 NotPrivateZone bash-my-aws.org. /hostedzone/Z5555555555555 2 NotPrivateZone bash-my-universe.com. /hostedzone/Z4444444444444 3 NotPrivateZone bashmyaws.org. /hostedzone/Z1111111111111 3 NotPrivateZone bash-my-aws.com. /hostedzone/Z2222222222222 3 NotPrivateZone bashmyaws.com. hosted-zone-ns-records \u00b6 Generate NS records for delegating domain to AWS $ hosted-zones bash-my-aws.org /hostedzone/ZJ6ZCG2UD6OKX 5 NotPrivateZone bash-my-aws.org. $ hosted-zones bash-my-aws.org | hosted-zone-ns-records bash-my-aws.org. 300 IN NS ns-786.awsdns-34.net. bash-my-aws.org. 300 IN NS ns-1549.awsdns-01.co.uk. bash-my-aws.org. 300 IN NS ns-362.awsdns-45.com. bash-my-aws.org. 300 IN NS ns-1464.awsdns-55.org. s3-commands \u00b6 buckets \u00b6 List S3 Buckets $ buckets web-assets 2019-12-20 08:24:38.182045 backups 2019-12-20 08:24:44.351215 archive 2019-12-20 08:24:57.567652 bucket-acls \u00b6 List S3 Bucket Access Control Lists. $ bucket-acls another-example-bucket another-example-bucket Note The only recommended use case for the bucket ACL is to grant write permission to the Amazon S3 Log Delivery group to write access log objects to your bucket. AWS docs bucket-remove \u00b6 Remove an empty S3 Bucket. In this example the bucket is not empty. $ bucket-remove another-example-bucket You are about to remove the following buckets: another-example-bucket 2019-12-07 06:51:12.022496 Are you sure you want to continue? y remove_bucket failed: s3://another-example-bucket An error occurred (BucketNotEmpty) when calling the DeleteBucket operation: The bucket you tried to delete is not empty bucket-remove-force \u00b6 Remove an S3 Bucket, and delete all objects if it's not empty. $ bucket-remove-force another-example-bucket You are about to delete all objects from and remove the following buckets: another-example-bucket 2019-12-07 06:51:12.022496 Are you sure you want to continue? y delete: s3://another-example-bucket/aliases remove_bucket: another-example-bucket sts-commands \u00b6 sts-assume-role \u00b6 Assume an IAM Role USAGE: sts-assume-role role_arn vpc-commands \u00b6 pcxs \u00b6 List VPC Peering connections subnets \u00b6 List subnets for all VPCs $ subnets subnet-34fd9cfa vpc-018d9739 ap-southeast-2c 172.31.32.0/20 NO_NAME subnet-8bb774fe vpc-018d9739 ap-southeast-2a 172.31.0.0/20 NO_NAME subnet-9eea2c07 vpc-018d9739 ap-southeast-2b 172.31.16.0/20 NO_NAME vpcs \u00b6 List VPCs $ vpcs vpc-018d9739 default-vpc NO_NAME 172.31.0.0/16 NO_STACK NO_VERSION vpc-azs \u00b6 List availability zones of VPC(s) USAGE: vpc-azs vpc-id [vpc-id] $ vpcs | vpc-azs vpc-018d9739 ap-southeast-2a ap-southeast-2b ap-southeast-2c vpc-az-count \u00b6 List number of Availability Zones of VPC(s) USAGE: vpc-az-count vpc-id [vpc-id] $ vpcs | vpc-az-count vpc-018d9739 3 vpc-lambda-functions \u00b6 List lambda functions of VPC(s) USAGE: vpc-lambda-functions vpc-id [vpc-id] vpc-dhcp-options-ntp \u00b6 List NTP servers of VPC(s) USAGE: vpc-dhcp-options-ntp vpc-id [vpc-id] vpc-endpoints \u00b6 List VPC Endpoints USAGE: vpc-endpoints [filter] vpc-endpoint-services \u00b6 List available VPC endpoint services USAGE: vpc-endpoint-services vpc-igw \u00b6 List Internet Gateway of VPC(s) USAGE: vpc-igw vpc-id [vpc-id] vpc-route-tables \u00b6 List Route Tables of VPC(s) USAGE: vpc-route-tables vpc-id [vpc-id] $ vpcs | vpc-route-tables rtb-8e841c39 vpc-018d9739 NO_NAME vpc-nat-gateways \u00b6 List NAT Gateways of VPC(s) USAGE: vpc-nat-gateways vpc-id [vpc-id] vpc-subnets \u00b6 List subnets of VPC(s) USAGE: vpc-subnets vpc-id [vpc-id] $ vpcs | vpc-subnets subnet-34fd9cfa vpc-018d9739 ap-southeast-2c 172.31.32.0/20 NO_NAME subnet-8bb774fe vpc-018d9739 ap-southeast-2a 172.31.0.0/20 NO_NAME subnet-9eea2c07 vpc-018d9739 ap-southeast-2b 172.31.16.0/20 NO_NAME vpc-network-acls \u00b6 List Network ACLs of VPC(s) USAGE: vpc-network-acls vpc-id [vpc-id] $ vpcs | vpc-network-acls acl-ff4914d1 vpc-018d9739 vpc-rds \u00b6 List RDS instances of VPC(s) USAGE: vpc-rds vpc-id [vpc-id] vpc-default-delete \u00b6 Print commands you would need to run to delete that pesky default VPC Exclude default VPCs that contain: - instances - lambda functions $ vpc-default-delete # Deleting default VPC vpc-018d9739 in ap-southeast-2 aws --region ap-southeast-2 ec2 delete-subnet --subnet-id=subnet-8bb774fe aws --region ap-southeast-2 ec2 delete-subnet --subnet-id=subnet-9eea2c07 aws --region ap-southeast-2 ec2 delete-subnet --subnet-id=subnet-34fd9cfa aws --region ap-southeast-2 ec2 delete-vpc --vpc-id=vpc-018d9739","title":"Command Reference"},{"location":"command-reference/#aws-account-commands","text":"","title":"aws-account-commands"},{"location":"command-reference/#aws-account-alias","text":"Retrieve AWS Account Alias for current account $ aws-account-alias example-account-prod","title":"aws-account-alias"},{"location":"command-reference/#aws-account-id","text":"Retrieve AWS Account ID for current account $ aws-account-id 012345678901","title":"aws-account-id"},{"location":"command-reference/#aws-account-each","text":"Run a script/command across a number of AWS Accounts USAGE: aws-account-each cmd # pipe in AWS_ACCOUNT_IDS $ grep non_prod AWS_ACCOUNTS | aws-account-each stacks FAILED # account=012345678901 alias=example-account-prod example-stack1-prod CREATED_FAILED example-stack2-prod UPDATE_ROLLBACK_FAILED # account=123456789012 alias=example-account-staging example-stack1-staging CREATED_FAILED example-stack2-staging UPDATE_ROLLBACK_FAILED Note In order to use aws-account-each , you need to be authenticated with an IAM Role that can assume a Role in each of the specified accounts. Check the source for more info.","title":"aws-account-each"},{"location":"command-reference/#aws-panopticon","text":"aws-panopticon was previous name for aws-account-each()","title":"aws-panopticon"},{"location":"command-reference/#aws-account-cost-explorer","text":"Use with an AWS Organisations Master Account to open multiple accounts in Cost Explorer. $ grep demo AWS_ACCOUNTS | aws-account-cost-explorer #=> Opens web browser to AWS Cost Explorer with accounts selected","title":"aws-account-cost-explorer"},{"location":"command-reference/#aws-account-cost-recommendations","text":"Use with an AWS Organisations Master Account to open multiple accounts in Cost Recommendations. $ grep non_prod AWS_ACCOUNTS | aws-account-each stacks FAILED #=> Opens web browser to AWS Cost Recommendations with accounts selected","title":"aws-account-cost-recommendations"},{"location":"command-reference/#region-commands","text":"","title":"region-commands"},{"location":"command-reference/#regions","text":"List regions The region() function must be sourced in order to update the AWS_DEFAULT_REGION environment variable. This is because it cannot update an environment variable when run as a subprocess. $ regions ap-northeast-1 ap-northeast-2 ap-south-1 ap-southeast-1 ap-southeast-2 ... us-west-2","title":"regions"},{"location":"command-reference/#region","text":"Get/Set $AWS_DEFAULT_REGION shell environment variable $ region us-east-1 $ region ap-southeast-2 $ region ap-southeast-2","title":"region"},{"location":"command-reference/#region-each","text":"Run a command in every region. Any output lines will be appended with \"#${REGION}\". $ region-each stacks | column -t example-ec2-ap-northeast-1 CREATE_COMPLETE 2011-05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #ap-northeast-1 example-ec2-ap-northeast-2 CREATE_COMPLETE 2011-05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #ap-northeast-2 ... example-ec2-us-west-2 CREATE_COMPLETE 2011-05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #us-west-2","title":"region-each"},{"location":"command-reference/#stack-commands","text":"","title":"stack-commands"},{"location":"command-reference/#stacks","text":"List CloudFormation stacks. To make it fly we omit stacks with status of DELETE_COMPLETE Output is sorted by CreationTime $ stacks nagios CREATE_COMPLETE 2018-03-12T11:41:31Z NEVER_UPDATED NOT_NESTED postgres1 CREATE_COMPLETE 2019-04-14T15:22:44Z NEVER_UPDATED NOT_NESTED postgres2 CREATE_COMPLETE 2019-05-18T05:45:50Z NEVER_UPDATED NOT_NESTED prometheus-web CREATE_COMPLETE 2019-11-23T15:57:04Z NEVER_UPDATED NOT_NESTED Provide a filter string for a | grep effect with tighter columisation: $ stacks postgres postgres1 CREATE_COMPLETE 2019-04-14T15:22:44Z NEVER_UPDATED NOT_NESTED postgres2 CREATE_COMPLETE 2019-05-18T05:45:50Z NEVER_UPDATED NOT_NESTED","title":"stacks"},{"location":"command-reference/#stack-arn","text":"Returns ARN(s) for stacks. USAGE: stack-arn stack [stack] $ stack-arn prometheus-web arn:aws:cloudformation:us-east-1:000000000000:stack/prometheus-web/805e081c-b8eb-4f6c-9872-2b5cddc77fba Supports multiple stack names from STDIN : $ stacks | stack-arn arn:aws:cloudformation:us-east-1:000000000000:stack/nagios/c0f0ef04-b505-4c0c-87cd-ca924153ad1c arn:aws:cloudformation:us-east-1:000000000000:stack/postgres1/758b0ba2-60f2-4432-8935-f79f47708f23 arn:aws:cloudformation:us-east-1:000000000000:stack/postgres2/7420bbd4-3026-444f-b55b-fa0a9d564730 arn:aws:cloudformation:us-east-1:000000000000:stack/prometheus-web/805e081c-b8eb-4f6c-9872-2b5cddc77fba","title":"stack-arn"},{"location":"command-reference/#stack-cancel-update","text":"Cancel an in-progress stack update","title":"stack-cancel-update"},{"location":"command-reference/#stack-create","text":"Create a CloudFormation Stack See suggested CloudFormation File Naming Conventions to take advantage of shorter commands USAGE: stack-create stack [template-file] [parameters-file] \\ [--capabilities=OPTIONAL_VALUE] [--role-arn=OPTIONAL_VALUE] $ stack-create params/asg-params-prod.json Resolved arguments: asg-prod ./asg.yml params/asg-params-prod.json arn:aws:cloudformation:ap-southeast-2:812094344564:stack/asg-prod/98d40130-23f2-11ea-b7c1-06494f833672 ---------------------------------------------------------------------------------------------- | DescribeStackEvents | +---------------------------+-----------+------------------------------+---------------------+ | 2019-12-21T13:05:44.261Z | asg-prod | AWS::CloudFormation::Stack | CREATE_IN_PROGRESS | -------------------------------------------------------------------------------------------------------------------- | DescribeStackEvents | +--------------------------+----------------------+-----------------------------------------+----------------------+ | 2019-12-21T13:05:44.261Z| asg-prod | AWS::CloudFormation::Stack | CREATE_IN_PROGRESS | | 2019-12-21T13:05:48.351Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_IN_PROGRESS | | 2019-12-21T13:05:48.828Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_IN_PROGRESS | | 2019-12-21T13:05:49.187Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_COMPLETE | | 2019-12-21T13:05:51.230Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_IN_PROGRESS | | 2019-12-21T13:05:51.837Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_IN_PROGRESS | | 2019-12-21T13:05:52.950Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_COMPLETE | | 2019-12-21T13:05:54.493Z| asg-prod | AWS::CloudFormation::Stack | CREATE_COMPLETE | +--------------------------+----------------------+-----------------------------------------+----------------------+","title":"stack-create"},{"location":"command-reference/#stack-update","text":"Update a CloudFormation Stack See suggested CloudFormation File Naming Conventions to take advantage of shorter commands USAGE: stack-update stack [template-file] [parameters-file] \\ [--capabilities=OPTIONAL_VALUE] [--role-arn=OPTIONAL_VALUE] $ stack-update params/asg-params-prod.json Resolved arguments: asg-prod ./asg.yml params/asg-params-prod.json arn:aws:cloudformation:ap-southeast-2:812094344564:stack/asg-prod/98d40130-23f2-11ea-b7c1-06494f833672 -------------------------------------------------------------------------------------------------------------------- | DescribeStackEvents | +--------------------------+----------------------+-----------------------------------------+----------------------+ | 2019-12-21T13:05:44.261Z| asg-prod | AWS::CloudFormation::Stack | CREATE_IN_PROGRESS | | 2019-12-21T13:05:48.351Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_IN_PROGRESS | | 2019-12-21T13:05:48.828Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_IN_PROGRESS | | 2019-12-21T13:05:49.187Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_COMPLETE | | 2019-12-21T13:05:51.230Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_IN_PROGRESS | | 2019-12-21T13:05:51.837Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_IN_PROGRESS | | 2019-12-21T13:05:52.950Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_COMPLETE | | 2019-12-21T13:05:54.493Z| asg-prod | AWS::CloudFormation::Stack | CREATE_COMPLETE | | 2019-12-21T13:12:43.731Z| asg-prod | AWS::CloudFormation::Stack | UPDATE_IN_PROGRESS | | 2019-12-21T13:12:48.294Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | UPDATE_IN_PROGRESS | ------------------------------------------------------------------------------------------------------------------------------------- | DescribeStackEvents | +--------------------------+----------------------+-----------------------------------------+---------------------------------------+ | 2019-12-21T13:05:44.261Z| asg-prod | AWS::CloudFormation::Stack | CREATE_IN_PROGRESS | | 2019-12-21T13:05:48.351Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_IN_PROGRESS | | 2019-12-21T13:05:48.828Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_IN_PROGRESS | | 2019-12-21T13:05:49.187Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_COMPLETE | | 2019-12-21T13:05:51.230Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_IN_PROGRESS | | 2019-12-21T13:05:51.837Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_IN_PROGRESS | | 2019-12-21T13:05:52.950Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_COMPLETE | | 2019-12-21T13:05:54.493Z| asg-prod | AWS::CloudFormation::Stack | CREATE_COMPLETE | | 2019-12-21T13:12:43.731Z| asg-prod | AWS::CloudFormation::Stack | UPDATE_IN_PROGRESS | | 2019-12-21T13:12:48.294Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | UPDATE_IN_PROGRESS | | 2019-12-21T13:14:05.182Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | UPDATE_COMPLETE | | 2019-12-21T13:14:07.118Z| asg-prod | AWS::CloudFormation::Stack | UPDATE_COMPLETE_CLEANUP_IN_PROGRESS | | 2019-12-21T13:14:07.820Z| asg-prod | AWS::CloudFormation::Stack | UPDATE_COMPLETE | +--------------------------+----------------------+-----------------------------------------+---------------------------------------+","title":"stack-update"},{"location":"command-reference/#stack-delete","text":"Delete a CloudFormation Stack USAGE: stack-delete stack [stack] $ stacks | stack-delete You are about to delete the following stacks: asg-prod Are you sure you want to continue? y ------------------------------------------------------------------------------------------------------------------------------------- | DescribeStackEvents | +--------------------------+----------------------+-----------------------------------------+---------------------------------------+ | 2019-12-21T13:05:44.261Z| asg-prod | AWS::CloudFormation::Stack | CREATE_IN_PROGRESS | | 2019-12-21T13:05:48.351Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_IN_PROGRESS | | 2019-12-21T13:05:48.828Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_IN_PROGRESS | | 2019-12-21T13:05:49.187Z| LaunchConfiguration | AWS::AutoScaling::LaunchConfiguration | CREATE_COMPLETE | | 2019-12-21T13:05:51.230Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_IN_PROGRESS | | 2019-12-21T13:05:51.837Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_IN_PROGRESS | | 2019-12-21T13:05:52.950Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | CREATE_COMPLETE | | 2019-12-21T13:05:54.493Z| asg-prod | AWS::CloudFormation::Stack | CREATE_COMPLETE | | 2019-12-21T13:12:43.731Z| asg-prod | AWS::CloudFormation::Stack | UPDATE_IN_PROGRESS | | 2019-12-21T13:12:48.294Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | UPDATE_IN_PROGRESS | | 2019-12-21T13:14:05.182Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | UPDATE_COMPLETE | | 2019-12-21T13:14:07.118Z| asg-prod | AWS::CloudFormation::Stack | UPDATE_COMPLETE_CLEANUP_IN_PROGRESS | | 2019-12-21T13:14:07.820Z| asg-prod | AWS::CloudFormation::Stack | UPDATE_COMPLETE | | 2019-12-21T13:18:06.709Z| asg-prod | AWS::CloudFormation::Stack | DELETE_IN_PROGRESS | | 2019-12-21T13:18:08.931Z| AutoScalingGroup | AWS::AutoScaling::AutoScalingGroup | DELETE_IN_PROGRESS | An error occurred (ValidationError) when calling the DescribeStackEvents operation: Stack [asg-prod] does not exist Note that the error reported at the end of stack-delete command is just AWSCLI saying it can't find the stack anymore.","title":"stack-delete"},{"location":"command-reference/#stack-exports","text":"","title":"stack-exports"},{"location":"command-reference/#stack-recreate","text":"","title":"stack-recreate"},{"location":"command-reference/#stack-failure","text":"Return reason a stack failed to update/create/delete","title":"stack-failure"},{"location":"command-reference/#stack-events","text":"List event history for a single Stack USAGE: stack-events stack","title":"stack-events"},{"location":"command-reference/#stack-resources","text":"List all resources in Stack(s) USAGE: stack-resources stack [stack] $ stacks | stack-resources i-7d54924538baa7a1f AWS::EC2::Instance ec2 i-c54279c6055c3c794 AWS::EC2::Instance nagios i-a8b8dd6783e1a40cc AWS::EC2::Instance postgres1 i-5d74753e210bfe04d AWS::EC2::Instance postgres2 i-2aa95cc214a461398 AWS::EC2::Instance prometheus-web","title":"stack-resources"},{"location":"command-reference/#stack-asgs","text":"List ASGs in Stack(s) USAGE: stack-asgs stack [stack] $ stacks | stack-asgs asg-bash-my-aws-AutoScalingGroup-MSBCWRTI3PVM AWS::AutoScaling::AutoScalingGroup asg-bash-my-aws asg2-AutoScalingGroup-1FHUVUJ7SLPU7 AWS::AutoScaling::AutoScalingGroup asg2","title":"stack-asgs"},{"location":"command-reference/#stack-asg-instances","text":"List EC2 Instances of EC2 Autoscaling Groups in Stack(s) USAGE: stack-asg-instances stack [stack] $ stacks | stack-asg-instances i-06ee900565652ecc5 ami-0119aa4d67e59007c t3.nano running asg-bash-my-aws 2019-12-13T03:15:22.000Z ap-southeast-2c vpc-deb8edb9 i-01c7edb986c18c16a ami-0119aa4d67e59007c t3.nano running asg2 2019-12-13T03:37:51.000Z ap-southeast-2c vpc-deb8edb9","title":"stack-asg-instances"},{"location":"command-reference/#stack-elbs","text":"List EC2 Elastic Load Balancers in Stack(s) USAGE: stack-elbs stack [stack] $ stacks | stack-elbs elb-MyLoadBalancer-NA5S72MLA5KI AWS::ElasticLoadBalancing::LoadBalancer elb-stack-1 load-bala-MyLoadBa-11HZ0DHUHJZZI AWS::ElasticLoadBalancing::LoadBalancer elb-stack-2","title":"stack-elbs"},{"location":"command-reference/#stack-instances","text":"List instances in stack(s) USAGE: stack-instances stack [stack] $ stacks | stack-instances i-7d54924538baa7a1f ami-123456789012 t3.nano stopped ec2 2019-12-11T09:31:03.000Z ap-southeast-2a None i-c54279c6055c3c794 ami-123456789012 t3.nano running nagios 2019-12-13T02:24:30.000Z ap-southeast-2a None i-a8b8dd6783e1a40cc ami-123456789012 t3.nano running postgres1 2019-12-13T02:24:32.000Z ap-southeast-2a None i-5d74753e210bfe04d ami-123456789012 t3.nano running postgres2 2019-12-13T02:24:34.000Z ap-southeast-2a None i-2aa95cc214a461398 ami-123456789012 t3.nano running prometheus-web 2019-12-13T02:24:36.000Z ap-southeast-2a None","title":"stack-instances"},{"location":"command-reference/#stack-parameters","text":"List parameters of stack","title":"stack-parameters"},{"location":"command-reference/#stack-status","text":"List status of stack","title":"stack-status"},{"location":"command-reference/#stack-tag","text":"Return selected stack tag","title":"stack-tag"},{"location":"command-reference/#stack-tail","text":"Show all events for CF stack until update completes or fails.","title":"stack-tail"},{"location":"command-reference/#stack-template","text":"Return template of a stack","title":"stack-template"},{"location":"command-reference/#stack-tags","text":"List stack-tags applied to a stack","title":"stack-tags"},{"location":"command-reference/#stack-tags-text","text":"List stack-tags applied to a stack on a single line","title":"stack-tags-text"},{"location":"command-reference/#stack-outputs","text":"List outputs of a stack","title":"stack-outputs"},{"location":"command-reference/#stack-validate","text":"Validate a stack template","title":"stack-validate"},{"location":"command-reference/#stack-diff","text":"Compare live stack against local template (and optional params file) USAGE: stack-diff stack [template-file] $ stack-diff params/asg-params-prod.json Resolved arguments: asg-prod ./asg.yml params/asg-params-prod.json template for stack (asg-prod) and contents of file (./asg.yml) are the same Resolved arguments: asg-prod ./asg.yml params/asg-params-prod.json --- params +++ params/asg-params-prod.json @@ -1,11 +1,11 @@ [ { \"ParameterKey\": \"AsgMaxSize\", - \"ParameterValue\": \"5\" + \"ParameterValue\": \"2\" }, { \"ParameterKey\": \"AsgMinSize\", - \"ParameterValue\": \"0\" + \"ParameterValue\": \"1\" }, { \"ParameterKey\": \"InstanceType\", report changes which would be made to stack if template were applied report on what changes would be made to stack by applying params Derive and check arguments for: stack-create stack-delete stack-diff In the interests of making the functions simple and a shallow read, it's unusual for us to abstract out shared code like this. This bit is doing some funky stuff though and I think it deserves to go in it's own function to DRY (Don't Repeat Yourself) it up a bit. This function takes the unusual approach of writing to variables of the calling function: stack template params This is generally not good practice for readability and unexpected outcomes. To contain this, the calling functions all clearly declare these three variables as local and contain a comment that they will be set by this function. If we are working from a single argument (ignore args starting with -- ) Strip path and extension from template Deduce params filename from stack and template names Strip path and extension from template File extension gets stripped off if template name provided as stack name Determine name of template to use determine name of params file to use determine what (if any) capabilities a given stack was deployed with","title":"stack-diff"},{"location":"command-reference/#instance-commands","text":"","title":"instance-commands"},{"location":"command-reference/#instances","text":"List EC2 Instances $ instances i-4e15ece1de1a3f869 ami-123456789012 t3.nano running nagios 2019-12-10T08:17:18.000Z ap-southeast-2a None i-89cefa9403373d7a5 ami-123456789012 t3.nano running postgres1 2019-12-10T08:17:20.000Z ap-southeast-2a None i-806d8f1592e2a2efd ami-123456789012 t3.nano running postgres2 2019-12-10T08:17:22.000Z ap-southeast-2a None i-61e86ac6be1e2c193 ami-123456789012 t3.nano running prometheus-web 2019-12-10T08:17:24.000Z ap-southeast-2a None Optionally provide a filter string for a | grep effect with tighter columisation: $ instances postgres i-89cefa9403373d7a5 ami-123456789012 t3.nano running postgres1 2019-12-10T08:17:20.000Z ap-southeast-2a None i-806d8f1592e2a2efd ami-123456789012 t3.nano running postgres2 2019-12-10T08:17:22.000Z ap-southeast-2a None","title":"instances"},{"location":"command-reference/#instance-asg","text":"List autoscaling group membership of EC2 Instance(s) USAGE: instance-asg instance-id [instance-id]","title":"instance-asg"},{"location":"command-reference/#instance-az","text":"List availability zone of EC2 Instance(s) USAGE: instance-az instance-id [instance-id] $ instances postgres | instance-az i-89cefa9403373d7a5 ap-southeast-2a i-806d8f1592e2a2efd ap-southeast-2a","title":"instance-az"},{"location":"command-reference/#instance-console","text":"List console output of EC2 Instance(s) USAGE: instance-console instance-id [instance-id] $ instances postgres | instance-console Console output for EC2 Instance i-89cefa9403373d7a5 Linux version 2.6.16-xenU (builder@patchbat.amazonsa) (gcc version 4.0.1 20050727 (Red Hat 4.0.1-5)) #1 SMP Thu Oct 26 08:41:26 SAST 2006 BIOS-provided physical RAM map: Xen: 0000000000000000 - 000000006a400000 (usable) ...snip... Console output for EC2 Instance i-806d8f1592e2a2efd Linux version 2.6.16-xenU (builder@patchbat.amazonsa) (gcc version 4.0.1 20050727 (Red Hat 4.0.1-5)) #1 SMP Thu Oct 26 08:41:26 SAST 2006 BIOS-provided physical RAM map: Xen: 0000000000000000 - 000000006a400000 (usable) ...snip...","title":"instance-console"},{"location":"command-reference/#instance-dns","text":"List DNS name of EC2 Instance(s) USAGE: instance-dns instance-id [instance-id] $ instances postgres | instance-dns i-89cefa9403373d7a5 ip-10-155-35-61.ap-southeast-2.compute.internal ec2-54-214-206-114.ap-southeast-2.compute.amazonaws.com i-806d8f1592e2a2efd ip-10-178-243-63.ap-southeast-2.compute.internal ec2-54-214-244-90.ap-southeast-2.compute.amazonaws.com","title":"instance-dns"},{"location":"command-reference/#instance-health-set-unhealthy","text":"Mark EC2 Instance(s) as unhealthy (to trigger replacement by ASG) USAGE: instance-health-set-unhealthy instance-id [instance-id]","title":"instance-health-set-unhealthy"},{"location":"command-reference/#instance-iam-profile","text":"List iam-profile of EC2 Instance(s) USAGE: instance-iam-profile instance-id [instance-id]","title":"instance-iam-profile"},{"location":"command-reference/#instance-ip","text":"List ip address of EC2 Instance(s) USAGE: instance-ip instance-id [instance-id] $ instances postgres | instance-ip i-89cefa9403373d7a5 10.155.35.61 54.214.206.114 i-806d8f1592e2a2efd 10.178.243.63 54.214.244.90","title":"instance-ip"},{"location":"command-reference/#instance-ssh","text":"Establish SSH connection to EC2 Instance(s) USAGE: instance-ssh [login] [instance-id] [instance-id]","title":"instance-ssh"},{"location":"command-reference/#instance-ssh-details","text":"List details needed to SSH into EC2 Instance(s) USAGE: instance-ssh-details [login] [instance-id] [instance-id]","title":"instance-ssh-details"},{"location":"command-reference/#instance-stack","text":"List CloudFormation stack EC2 Instance(s) belong to (if any) USAGE: instance-stack instance-id [instance-id] $ instances postgres | instance-stack postgres1 i-89cefa9403373d7a5 postgres2 i-806d8f1592e2a2efd","title":"instance-stack"},{"location":"command-reference/#instance-start","text":"Start stopped EC2 Instance(s) USAGE: instance-start instance-id [instance-id] $ instances postgres | instance-start i-a8b8dd6783e1a40cc PreviousState=stopped CurrentState=pending i-5d74753e210bfe04d PreviousState=stopped CurrentState=pending","title":"instance-start"},{"location":"command-reference/#instance-state","text":"List state of EC2 Instance(s) USAGE: instance-state instance-id [instance-id] $ instances postgres | instance-state i-89cefa9403373d7a5 running i-806d8f1592e2a2efd running","title":"instance-state"},{"location":"command-reference/#instance-stop","text":"Stop EC2 Instance(s) USAGE: instance-stop instance-id [instance-id] $ instances postgres | instance-stop i-a8b8dd6783e1a40cc PreviousState=running CurrentState=stopping i-5d74753e210bfe04d PreviousState=running CurrentState=stopping","title":"instance-stop"},{"location":"command-reference/#instance-tags","text":"List tags applied EC2 Instance(s) USAGE: instance-tags instance-id [instance-id]","title":"instance-tags"},{"location":"command-reference/#instance-terminate","text":"Terminate EC2 Instance(s) USAGE: instance-terminate instance-id [instance-id] $ instances | head -3 | instance-terminate You are about to terminate the following instances: i-01c7edb986c18c16a ami-0119aa4d67e59007c t3.nano terminated asg2 2019-12-13T03:37:51.000Z ap-southeast-2c None i-012dded46894dfa04 ami-0119aa4d67e59007c t3.nano running ec2 2019-12-13T10:12:55.000Z ap-southeast-2b vpc-deb8edb9 Are you sure you want to continue? y i-06ee900565652ecc5 PreviousState=terminated CurrentState=terminated i-01c7edb986c18c16a PreviousState=terminated CurrentState=terminated i-012dded46894dfa04 PreviousState=running CurrentState=shutting-down","title":"instance-terminate"},{"location":"command-reference/#instance-termination-protection","text":"List current state of Termination Protection for EC2 Instance(s) USAGE: instance-termination-protection instance-id [instance-id] $ instances | instance-termination-protection i-4e15ece1de1a3f869 DisableApiTermination=true i-89cefa9403373d7a5 DisableApiTermination=false i-806d8f1592e2a2efd DisableApiTermination=false i-61e86ac6be1e2c193 DisableApiTermination=false","title":"instance-termination-protection"},{"location":"command-reference/#instance-termination-protection-disable","text":"Disable EC2 Instance termination protection USAGE: instance-termination-protection-disable instance-id [instance-id]","title":"instance-termination-protection-disable"},{"location":"command-reference/#instance-termination-protection-enable","text":"Enable EC2 Instance termination protection USAGE: instance-termination-protection-enable instance-id [instance-id]","title":"instance-termination-protection-enable"},{"location":"command-reference/#instance-type","text":"List type of instance(s) USAGE: instance-type instance-id [instance-id] $ instances | instance-type i-4e15ece1de1a3f869 t3.nano i-89cefa9403373d7a5 t3.nano i-806d8f1592e2a2efd t3.nano i-61e86ac6be1e2c193 t3.nano","title":"instance-type"},{"location":"command-reference/#instance-userdata","text":"List userdata for instance(s) USAGE: instance-userdata instance-id [instance-id]","title":"instance-userdata"},{"location":"command-reference/#instance-volumes","text":"List volumes of instance(s) USAGE: instance-volumes instance-id [instance-id] $ instances postgres | instance-volumes i-89cefa9403373d7a5 vol-cf5ddae9 i-806d8f1592e2a2efd vol-38fd45c3","title":"instance-volumes"},{"location":"command-reference/#instance-vpc","text":"List VPC of instance(s) USAGE: instance-vpcs instance-id [instance-id]","title":"instance-vpc"},{"location":"command-reference/#asg-commands","text":"","title":"asg-commands"},{"location":"command-reference/#asgs","text":"List EC2 Autoscaling Groups","title":"asgs"},{"location":"command-reference/#asg-capacity","text":"List min, desired and maximum capacities of EC2 Autoscaling Group(s)","title":"asg-capacity"},{"location":"command-reference/#asg-desired-size-set","text":"Set desired capacity of autoscaling group(s)","title":"asg-desired-size-set"},{"location":"command-reference/#asg-instances","text":"List instances of autoscaling group(s)","title":"asg-instances"},{"location":"command-reference/#asg-launch-configuration","text":"List Launch Configurations of Autoscaling Group(s)","title":"asg-launch-configuration"},{"location":"command-reference/#launch-configurations","text":"List Launch Configurations","title":"launch-configurations"},{"location":"command-reference/#launch-configuration-asgs","text":"List EC2 Autoscaling Groups of Launch Configuration(s)","title":"launch-configuration-asgs"},{"location":"command-reference/#asg-max-size-set","text":"Set maximum size of autoscaling group(s)","title":"asg-max-size-set"},{"location":"command-reference/#asg-min-size-set","text":"Set minimum size of autoscaling group(s)","title":"asg-min-size-set"},{"location":"command-reference/#asg-processes_suspended","text":"List suspended processes of an autoscaling group","title":"asg-processes_suspended"},{"location":"command-reference/#asg-resume","text":"Resume all processes of an autoscaling group","title":"asg-resume"},{"location":"command-reference/#asg-suspend","text":"Suspend all processes of an autoscaling group","title":"asg-suspend"},{"location":"command-reference/#asg-stack","text":"List CloudFormation stack for asg(s)","title":"asg-stack"},{"location":"command-reference/#asg-scaling-activities","text":"List scaling activities for Autoscaling Group(s)","title":"asg-scaling-activities"},{"location":"command-reference/#cert-commands","text":"","title":"cert-commands"},{"location":"command-reference/#certs","text":"List ACM Certificates","title":"certs"},{"location":"command-reference/#certs-arn","text":"Same as certs but with the ARN in first column","title":"certs-arn"},{"location":"command-reference/#cert-users","text":"List resources using ACM Cert(s) USAGE: cert-users cert-arn [cert-arn]","title":"cert-users"},{"location":"command-reference/#cert-delete","text":"Delete ACM Cert(s) USAGE: cert-delete cert-arn [cert-arn]","title":"cert-delete"},{"location":"command-reference/#cloudtrail-commands","text":"","title":"cloudtrail-commands"},{"location":"command-reference/#cloudtrails","text":"List Cloudtrails $ cloudtrails failmode failmode-cloudtrail ap-southeast-2 IsMultiRegionTrail=true IncludeGlobalServiceEvents=true","title":"cloudtrails"},{"location":"command-reference/#cloudtrail-status","text":"List logging status of Cloudtrails USAGE: cloudtrail-status cloudtrail [cloudtrail]","title":"cloudtrail-status"},{"location":"command-reference/#ecr-commands","text":"","title":"ecr-commands"},{"location":"command-reference/#ecr-repositories","text":"List ECR Repositories","title":"ecr-repositories"},{"location":"command-reference/#ecr-repository-images","text":"List images for ECR Repositories","title":"ecr-repository-images"},{"location":"command-reference/#elb-commands","text":"","title":"elb-commands"},{"location":"command-reference/#elbs","text":"List ELBs Accepts LoadBalancer names on STDIN and converts to LoadBalancer names $ elbs elb-MyLoadBalancer-1FNISWJN0W6N9 2019-12-13T10:24:55.220Z another-e-MyLoadBa-171CPCZF2E84T 2019-12-13T10:25:24.300Z","title":"elbs"},{"location":"command-reference/#elb-dnsname","text":"List DNS Names of ELB(s) USAGE: elb-dnsname load-balancer [load-balancer] $ elbs | elb-dnsname elb-MyLoadBalancer-1FNISWJN0W6N9 elb-MyLoadBalancer-1FNISWJN0W6N9-563832045.ap-southeast-2.elb.amazonaws.com another-e-MyLoadBa-171CPCZF2E84T another-e-MyLoadBa-171CPCZF2E84T-1832721930.ap-southeast-2.elb.amazonaws.com","title":"elb-dnsname"},{"location":"command-reference/#elb-instances","text":"List instances of ELB(s) USAGE: elb-instances load-balancer [load-balancer]","title":"elb-instances"},{"location":"command-reference/#elb-stack","text":"List CloudFormation stack names of ELB(s) USAGE: elb-stack load-balancer [load-balancer] $ elbs | elb-stack elb elb-MyLoadBalancer-1FNISWJN0W6N9 another-elb another-e-MyLoadBa-171CPCZF2E84T","title":"elb-stack"},{"location":"command-reference/#elb-subnets","text":"List subnets of ELB(s) USAGE: elb-subnets load-balancer [load-balancer] $ elbs | elb-subnets rails-demo-ELB-FRBEQPCYSZQD subnet-5e257318 subnet-7828cd0f subnet-c25fa0a7 huginn-ELB-BMD0QUX179PK subnet-5e257318 subnet-7828cd0f subnet-c25fa0a7 prometheus-ELB-C0FGVLGQ64UH subnet-5e257318 subnet-7828cd0f subnet-c25fa0a7","title":"elb-subnets"},{"location":"command-reference/#elb-azs","text":"List Availability Zones of ELB(s) USAGE: elb-azs load-balancer [load-balancer] $ elbs | elb-azs rails-demo-ELB-FRBEQPCYSZQD ap-southeast-2a ap-southeast-2b ap-southeast-2c huginn-ELB-BMD0QUX179PK ap-southeast-2a ap-southeast-2b ap-southeast-2c","title":"elb-azs"},{"location":"command-reference/#elbv2-commands","text":"","title":"elbv2-commands"},{"location":"command-reference/#elbv2s","text":"List EC2 ELBv2 load balancers (both Network and Application types) Accepts Load Balancer names on STDIN and converts to Network Load Balancer names $ elbv2s bash-my-aws network internet-facing active 2020-01-04T11:18:49.733Z bash-my-aws-alb application internet-facing provisioning 2020-01-04T11:29:45.030Z","title":"elbv2s"},{"location":"command-reference/#elbv2-dnsname","text":"List DNS Names of elbv2(s) USAGE: elbv2-dnsname load-balancer [load-balancer] $ elbv2s | elbv2-dnsname bash-my-aws bash-my-aws-c23c598688520e51.elb.ap-southeast-2.amazonaws.com bash-my-aws-alb bash-my-aws-alb-2036199590.ap-southeast-2.elb.amazonaws.com","title":"elbv2-dnsname"},{"location":"command-reference/#elbv2-subnets","text":"List subnets of ELBv2(s) [Application and Network Load Balancers) USAGE: elbv2-subnets load-balancer [load-balancer] $ elbv2s | elbv2-subnets bash-my-aws subnet-c25fa0a7 bash-my-aws-alb subnet-7828cd0f subnet-c25fa0a7","title":"elbv2-subnets"},{"location":"command-reference/#elbv2-azs","text":"List Availability Zones of ELB(s) USAGE: elb-azs load-balancer [load-balancer] $ elbv2s | elbv2-subnets bash-my-aws ap-southeast-2a bash-my-aws-alb ap-southeast-2a ap-southeast-2b","title":"elbv2-azs"},{"location":"command-reference/#iam-commands","text":"","title":"iam-commands"},{"location":"command-reference/#iam-roles","text":"List IAM Roles $ iam-roles config-role-ap-southeast-2 AROAI3QHAU3J2CDRNLQHD 2017-02-02T03:03:02Z AWSBatchServiceRole AROAJJWRGUPTRXTV52TED 2017-03-09T05:31:39Z ecsInstanceRole AROAJFQ3WMZXESGIKW5YD 2017-03-09T05:31:39Z","title":"iam-roles"},{"location":"command-reference/#iam-role-principal","text":"List role principal for IAM Role(s) USAGE: iam-role-principal role-name [role-name]","title":"iam-role-principal"},{"location":"command-reference/#iam-users","text":"List IAM Users $ iam-users config-role-ap-southeast-2 AROAI3QHAU3J2CDRNLQHD 2017-02-02T03:03:02Z AWSBatchServiceRole AROAJJWRGUPTRXTV52TED 2017-03-09T05:31:39Z ecsInstanceRole AROAJFQ3WMZXESGIKW5YD 2017-03-09T05:31:39Z","title":"iam-users"},{"location":"command-reference/#image-commands","text":"","title":"image-commands"},{"location":"command-reference/#images","text":"List EC2 AMI's Usage: images [owner] [image-id] [image-id]... owner defaults to self or can one or more of: an AWS_ACCOUNT_ID (e.g. 1234567890) an AWS_OWNER_ALIAS (amazon, amazon-marketplace, microsoft) image_id can be one or more AMIs Trialing a different approach for grabbing resource ids from input. As normal, you can pipe resource ids in as first token on each line. We treat all args that don't start with ami- as owner identifiers. Trialing a new pattern for output - putting the Name at the end. This is more like the output of ls -la Pro: Preceding fields tend to be of the same length Pro: Easier for eyes to scan final column for names(?) Con: Using this pattern for instances() would put name past 80 char point Con: Migrating instances() to this output is A Big Change (not made lightly)","title":"images"},{"location":"command-reference/#image-deregister","text":"Deregister AMI(s) USAGE: image-deregister image_id [image_id]","title":"image-deregister"},{"location":"command-reference/#keypair-commands","text":"","title":"keypair-commands"},{"location":"command-reference/#keypairs","text":"List EC2 SSH Keypairs in current Region $ keypairs alice 8f:85:9a:1e:6c:76:29:34:37:45:de:7f:8d:f9:70:eb bob 56:73:29:c2:ad:7b:6f:b6:f2:f3:b4:de:e4:2b:12:d4","title":"keypairs"},{"location":"command-reference/#keypair-create","text":"Create SSH Keypair on local machine and import public key into new EC2 Keypair. Provides benefits over AWS creating the keypair: Amazon never has access to private key. Private key is protected with passphrase before being written to disk. Keys is written to ~/.ssh with correct file permissions. You control the SSH Key type (algorithm, length, etc). USAGE: keypair-create [key_name] [key_dir] $ keypair-create yet-another-keypair Creating /home/m/.ssh/yet-another-keypair Generating public/private rsa key pair. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/m/.ssh/yet-another-keypair. Your public key has been saved in /home/m/.ssh/yet-another-keypair.pub. The key fingerprint is: SHA256:zIpbxLo7rpQvKyezOLATk96B1kSL0QP41q6x8tUrySk m@localhost.localdomain The key's randomart image is: +---[RSA 4096]----+ |..o | |.. + | | .+.o | | .oo.. o | | o+. o S | |=o.+.= . | |+++==o+ | |XoE+ + . | |o@+ *+. | +----[SHA256]-----+ { \"KeyFingerprint\": \"21:82:f9:5b:79:d6:dc:0f:7b:79:43:7c:c5:34:6c:2d\", \"KeyName\": \"yet-another-keypair\" } Note KeyPair Name defaults to \"$(aws-account-alias)-$(region)\" if none provided","title":"keypair-create"},{"location":"command-reference/#keypair-delete","text":"Delete EC2 SSH Keypairs by providing their names as arguments or via STDIN USAGE: keypair-delete key_name [key_name] $ keypair-delete alice bob You are about to delete the following EC2 SSH KeyPairs: alice bob Are you sure you want to continue? y $ keypairs | keypair-delete You are about to delete the following EC2 SSH KeyPairs: yet-another-keypair Are you sure you want to continue? y","title":"keypair-delete"},{"location":"command-reference/#kms-commands","text":"","title":"kms-commands"},{"location":"command-reference/#kms-encrypt","text":"Encrypt and base64 encode STDIN or file USAGE: kms-encrypt key_id/alias_id [plaintext_file] $ echo foobar | kms-encrypt alias/default AQICAHgcyN4vd3V/OB7NKI6IMbpENEu1+UfyiU...","title":"kms-encrypt"},{"location":"command-reference/#kms-decrypt","text":"base64 decode and decrypt KMS Encrypted file or STDIN USAGE: kms-decrypt [ciphertext_file] $ kms-decrypt ciphertext.txt foobar $ echo foobar | kms-encrypt alias/default | kms-decrypt foobar","title":"kms-decrypt"},{"location":"command-reference/#kms-aliases","text":"List KMS Aliases $ kms-aliases default alias/default d714a175-db12-4574-8f27-aa071a1dfd8a arn:aws:kms:ap-southeast-2:089834043791:alias/default","title":"kms-aliases"},{"location":"command-reference/#kms-alias-create","text":"Create alias for KMS Key USAGE: kms-alias-create alias_name key_id $ kms-keys | tail -1 d714a175-db12-4574-8f27-aa071a1dfd8a $ kms-keys | tail -1 | kms-alias-create alias/foobar $ kms-aliases foobar alias/foobar d714a175-db12-4574-8f27-aa071a1dfd8a arn:aws:kms:ap-southeast-2:089834043791:alias/foobar","title":"kms-alias-create"},{"location":"command-reference/#kms-alias-delete","text":"Delete alias for KMS Key USAGE: kms-alias-delete alias_name [alias_name] $ kms-aliases foobar | kms-alias-delete You are about to delete the following kms aliases: alias/foobar Are you sure you want to continue? y","title":"kms-alias-delete"},{"location":"command-reference/#kms-keys","text":"List KMS Keys $ kms-keys 5044958c-151d-4995-bed4-dd05c1385b48 8ada3e65-e377-4435-a709-fbe75dfa1dd0 d714a175-db12-4574-8f27-aa071a1dfd8a","title":"kms-keys"},{"location":"command-reference/#kms-key-create","text":"Create a KMS Key $ kms-key-create 9e94333b-8e85-497a-9791-e7c5edf9c35e","title":"kms-key-create"},{"location":"command-reference/#kms-key-details","text":"List details for KMS Key(s)","title":"kms-key-details"},{"location":"command-reference/#kms-key-disable","text":"Disable KMS Key(s) USAGE: kms-key-disable key_id [key_id] $ kms-key-disable 9e94333b-8e85-497a-9791-e7c5edf9c35e","title":"kms-key-disable"},{"location":"command-reference/#kms-key-enable","text":"Enable KMS Key(s) USAGE: kms-key-enable key_id [key_id] $ kms-key-enable 9e94333b-8e85-497a-9791-e7c5edf9c35e","title":"kms-key-enable"},{"location":"command-reference/#lambda-commands","text":"","title":"lambda-commands"},{"location":"command-reference/#lambda-functions","text":"List lambda functions $ lambda-functions stars 2019-12-18T10:00:00.000+0000 python2.7 256 stripes 2019-12-19T10:21:42.444+0000 python3.7 128","title":"lambda-functions"},{"location":"command-reference/#lambda-function-memory","text":"List memorySize for lambda function(s) USAGE: lambda-function-memory function [function]","title":"lambda-function-memory"},{"location":"command-reference/#lambda-function-memory-set","text":"Update memorySize for lambda function(s) USAGE: lambda-function-memory-set memory function [function]","title":"lambda-function-memory-set"},{"location":"command-reference/#lambda-function-memory-step","text":"Repeatedly update memorySize for lambda function(s) Useful for measuring impact of memory on cost/performance. The function increases memorySize by 64KB every two minutes until it reaches the value requested. There is a two minute delay between increases to provide time to collect data from function execution. USAGE: lambda-function-memory-step memory function [function]","title":"lambda-function-memory-step"},{"location":"command-reference/#log-commands","text":"","title":"log-commands"},{"location":"command-reference/#log-groups","text":"List CloudWatch Log Groups $ log-groups /aws/lambda/stars2 1576495961429 0 11736 /aws/lambda/stars 1576566745961 0 107460 /aws/lambda/walk 1576567300172 0 11794","title":"log-groups"},{"location":"command-reference/#rds-commands","text":"","title":"rds-commands"},{"location":"command-reference/#rds-db-instances","text":"List RDS Database Instances","title":"rds-db-instances"},{"location":"command-reference/#rds-db-clusters","text":"List RDS Database Clusters","title":"rds-db-clusters"},{"location":"command-reference/#route53-commands","text":"","title":"route53-commands"},{"location":"command-reference/#hosted-zones","text":"List Route53 Hosted Zones $ hosted-zones /hostedzone/Z3333333333333 5 NotPrivateZone bash-my-aws.org. /hostedzone/Z5555555555555 2 NotPrivateZone bash-my-universe.com. /hostedzone/Z4444444444444 3 NotPrivateZone bashmyaws.org. /hostedzone/Z1111111111111 3 NotPrivateZone bash-my-aws.com. /hostedzone/Z2222222222222 3 NotPrivateZone bashmyaws.com.","title":"hosted-zones"},{"location":"command-reference/#hosted-zone-ns-records","text":"Generate NS records for delegating domain to AWS $ hosted-zones bash-my-aws.org /hostedzone/ZJ6ZCG2UD6OKX 5 NotPrivateZone bash-my-aws.org. $ hosted-zones bash-my-aws.org | hosted-zone-ns-records bash-my-aws.org. 300 IN NS ns-786.awsdns-34.net. bash-my-aws.org. 300 IN NS ns-1549.awsdns-01.co.uk. bash-my-aws.org. 300 IN NS ns-362.awsdns-45.com. bash-my-aws.org. 300 IN NS ns-1464.awsdns-55.org.","title":"hosted-zone-ns-records"},{"location":"command-reference/#s3-commands","text":"","title":"s3-commands"},{"location":"command-reference/#buckets","text":"List S3 Buckets $ buckets web-assets 2019-12-20 08:24:38.182045 backups 2019-12-20 08:24:44.351215 archive 2019-12-20 08:24:57.567652","title":"buckets"},{"location":"command-reference/#bucket-acls","text":"List S3 Bucket Access Control Lists. $ bucket-acls another-example-bucket another-example-bucket Note The only recommended use case for the bucket ACL is to grant write permission to the Amazon S3 Log Delivery group to write access log objects to your bucket. AWS docs","title":"bucket-acls"},{"location":"command-reference/#bucket-remove","text":"Remove an empty S3 Bucket. In this example the bucket is not empty. $ bucket-remove another-example-bucket You are about to remove the following buckets: another-example-bucket 2019-12-07 06:51:12.022496 Are you sure you want to continue? y remove_bucket failed: s3://another-example-bucket An error occurred (BucketNotEmpty) when calling the DeleteBucket operation: The bucket you tried to delete is not empty","title":"bucket-remove"},{"location":"command-reference/#bucket-remove-force","text":"Remove an S3 Bucket, and delete all objects if it's not empty. $ bucket-remove-force another-example-bucket You are about to delete all objects from and remove the following buckets: another-example-bucket 2019-12-07 06:51:12.022496 Are you sure you want to continue? y delete: s3://another-example-bucket/aliases remove_bucket: another-example-bucket","title":"bucket-remove-force"},{"location":"command-reference/#sts-commands","text":"","title":"sts-commands"},{"location":"command-reference/#sts-assume-role","text":"Assume an IAM Role USAGE: sts-assume-role role_arn","title":"sts-assume-role"},{"location":"command-reference/#vpc-commands","text":"","title":"vpc-commands"},{"location":"command-reference/#pcxs","text":"List VPC Peering connections","title":"pcxs"},{"location":"command-reference/#subnets","text":"List subnets for all VPCs $ subnets subnet-34fd9cfa vpc-018d9739 ap-southeast-2c 172.31.32.0/20 NO_NAME subnet-8bb774fe vpc-018d9739 ap-southeast-2a 172.31.0.0/20 NO_NAME subnet-9eea2c07 vpc-018d9739 ap-southeast-2b 172.31.16.0/20 NO_NAME","title":"subnets"},{"location":"command-reference/#vpcs","text":"List VPCs $ vpcs vpc-018d9739 default-vpc NO_NAME 172.31.0.0/16 NO_STACK NO_VERSION","title":"vpcs"},{"location":"command-reference/#vpc-azs","text":"List availability zones of VPC(s) USAGE: vpc-azs vpc-id [vpc-id] $ vpcs | vpc-azs vpc-018d9739 ap-southeast-2a ap-southeast-2b ap-southeast-2c","title":"vpc-azs"},{"location":"command-reference/#vpc-az-count","text":"List number of Availability Zones of VPC(s) USAGE: vpc-az-count vpc-id [vpc-id] $ vpcs | vpc-az-count vpc-018d9739 3","title":"vpc-az-count"},{"location":"command-reference/#vpc-lambda-functions","text":"List lambda functions of VPC(s) USAGE: vpc-lambda-functions vpc-id [vpc-id]","title":"vpc-lambda-functions"},{"location":"command-reference/#vpc-dhcp-options-ntp","text":"List NTP servers of VPC(s) USAGE: vpc-dhcp-options-ntp vpc-id [vpc-id]","title":"vpc-dhcp-options-ntp"},{"location":"command-reference/#vpc-endpoints","text":"List VPC Endpoints USAGE: vpc-endpoints [filter]","title":"vpc-endpoints"},{"location":"command-reference/#vpc-endpoint-services","text":"List available VPC endpoint services USAGE: vpc-endpoint-services","title":"vpc-endpoint-services"},{"location":"command-reference/#vpc-igw","text":"List Internet Gateway of VPC(s) USAGE: vpc-igw vpc-id [vpc-id]","title":"vpc-igw"},{"location":"command-reference/#vpc-route-tables","text":"List Route Tables of VPC(s) USAGE: vpc-route-tables vpc-id [vpc-id] $ vpcs | vpc-route-tables rtb-8e841c39 vpc-018d9739 NO_NAME","title":"vpc-route-tables"},{"location":"command-reference/#vpc-nat-gateways","text":"List NAT Gateways of VPC(s) USAGE: vpc-nat-gateways vpc-id [vpc-id]","title":"vpc-nat-gateways"},{"location":"command-reference/#vpc-subnets","text":"List subnets of VPC(s) USAGE: vpc-subnets vpc-id [vpc-id] $ vpcs | vpc-subnets subnet-34fd9cfa vpc-018d9739 ap-southeast-2c 172.31.32.0/20 NO_NAME subnet-8bb774fe vpc-018d9739 ap-southeast-2a 172.31.0.0/20 NO_NAME subnet-9eea2c07 vpc-018d9739 ap-southeast-2b 172.31.16.0/20 NO_NAME","title":"vpc-subnets"},{"location":"command-reference/#vpc-network-acls","text":"List Network ACLs of VPC(s) USAGE: vpc-network-acls vpc-id [vpc-id] $ vpcs | vpc-network-acls acl-ff4914d1 vpc-018d9739","title":"vpc-network-acls"},{"location":"command-reference/#vpc-rds","text":"List RDS instances of VPC(s) USAGE: vpc-rds vpc-id [vpc-id]","title":"vpc-rds"},{"location":"command-reference/#vpc-default-delete","text":"Print commands you would need to run to delete that pesky default VPC Exclude default VPCs that contain: - instances - lambda functions $ vpc-default-delete # Deleting default VPC vpc-018d9739 in ap-southeast-2 aws --region ap-southeast-2 ec2 delete-subnet --subnet-id=subnet-8bb774fe aws --region ap-southeast-2 ec2 delete-subnet --subnet-id=subnet-9eea2c07 aws --region ap-southeast-2 ec2 delete-subnet --subnet-id=subnet-34fd9cfa aws --region ap-southeast-2 ec2 delete-vpc --vpc-id=vpc-018d9739","title":"vpc-default-delete"},{"location":"developer-guide/","text":"bash-my-aws development guide. \u00b6 There are three distinct classes of functions types within bash-my-aws ; query , detail , and action functions. Query functions are responsible for requesting AWS return a list of resources by their unique identifier. That would mean that when querying EC2 instances, it should return a list of instance-ids. If we were to query CloudFormation, then stacks are what would be returned. Detail functions should provide you an output of one or more attributes. eg. instance-asg(), instance-state() Action functions should perform an action against a resource. An action for an EC2 instance may be something like terminate or associate_eip . e.g. stack-create(), instance-terminate(), asg-suspend() There are some great things about bash-my-aws which I would hate to lose. It's easy to look at the code and learn how awscli works. Simple tasks have simple commands. It's really easy to extend. stdin should always be supported. You should be able to pipe one function into the next with ease. If an action function cannot be piped the output of a query function and have it work, without manipulation though other tools, then something is wrong. Namespacing \u00b6 We've decided to namespace functions by the resource they're concerned with. Yes, this may seem a bit like postgres naming their command createdb but that's OK. bash-my-aws reduces my keystrokes. We'll work something out if this becomes a problem. stack-asgs stack-elbs stack-outputs stack-tags stack-validate stack-create stack-events stack-parameters stack-tail stacks stack-delete stack-failure stack-resources stack-template stack-diff stack-instances stack-status stack-update instance-asg instance-ssh instance-stop instance-volumes instance-console instance-ssh-details instance-tags instances instance-dns instance-stack instance-terminate instance-iam-profile instance-start instance-type instance-ip instance-state instance-userdata asg-capacity asg-max-size-set asg-resume asgs asg-desired-size-set asg-min-size-set asg-suspend asg-instances asg-processes_suspended asgard Resources \u00b6 This is a partial list of resources, with possible alternative names in brackets. asg (autoscaling_group) bucket elb (load_balancer) instance instance_type rds (relational_database) dynamodb (relational_database) sg (security_group) stack (cloudformation_stack) Query Functions \u00b6 Query functions are always namespaced under the plural of the resource. Default Query \u00b6 TODO: lets talk about the details. Some example usage of this function would be: $ <resources> resource_id1 attribute attribute resource_id2 attribute attribute resource_id3 attribute attribute Detail Functions \u00b6 Detail functions are always namespaced under the singular of the resource. Some example usage of this function would be: $ <resource> <resource_id> attribute1: value1 attribute2: value2 Some example responses: $ instance_security_groups i-abcd1234 sg-00000001 i-abcd1234 sg-00000002 i-abcd1234 sg-00000003 i-abcd1234 sg-00000004 i-abcd1234 $ security_group_rules TODO: I'm not sure yet how to present a security group rule. $ instance_type i-abcd1234 c3.large i-abcd1234 $ instance_type_memory c3.large 3.75 c3.large Action Functions \u00b6 Action functions are always namespaced under the singular of the resource and are suffixed with the action they are responsible for undertaking. Some example usage of this function would be: $ <resource>_<action> <resource_id> Tests \u00b6 You can start the test suite by running the command make test . STDIN \u00b6 The first word of each line must be a resource. Additional information will be disregarded.","title":"bash-my-aws development guide."},{"location":"developer-guide/#bash-my-aws-development-guide","text":"There are three distinct classes of functions types within bash-my-aws ; query , detail , and action functions. Query functions are responsible for requesting AWS return a list of resources by their unique identifier. That would mean that when querying EC2 instances, it should return a list of instance-ids. If we were to query CloudFormation, then stacks are what would be returned. Detail functions should provide you an output of one or more attributes. eg. instance-asg(), instance-state() Action functions should perform an action against a resource. An action for an EC2 instance may be something like terminate or associate_eip . e.g. stack-create(), instance-terminate(), asg-suspend() There are some great things about bash-my-aws which I would hate to lose. It's easy to look at the code and learn how awscli works. Simple tasks have simple commands. It's really easy to extend. stdin should always be supported. You should be able to pipe one function into the next with ease. If an action function cannot be piped the output of a query function and have it work, without manipulation though other tools, then something is wrong.","title":"bash-my-aws development guide."},{"location":"developer-guide/#namespacing","text":"We've decided to namespace functions by the resource they're concerned with. Yes, this may seem a bit like postgres naming their command createdb but that's OK. bash-my-aws reduces my keystrokes. We'll work something out if this becomes a problem. stack-asgs stack-elbs stack-outputs stack-tags stack-validate stack-create stack-events stack-parameters stack-tail stacks stack-delete stack-failure stack-resources stack-template stack-diff stack-instances stack-status stack-update instance-asg instance-ssh instance-stop instance-volumes instance-console instance-ssh-details instance-tags instances instance-dns instance-stack instance-terminate instance-iam-profile instance-start instance-type instance-ip instance-state instance-userdata asg-capacity asg-max-size-set asg-resume asgs asg-desired-size-set asg-min-size-set asg-suspend asg-instances asg-processes_suspended asgard","title":"Namespacing"},{"location":"developer-guide/#resources","text":"This is a partial list of resources, with possible alternative names in brackets. asg (autoscaling_group) bucket elb (load_balancer) instance instance_type rds (relational_database) dynamodb (relational_database) sg (security_group) stack (cloudformation_stack)","title":"Resources"},{"location":"developer-guide/#query-functions","text":"Query functions are always namespaced under the plural of the resource.","title":"Query Functions"},{"location":"developer-guide/#default-query","text":"TODO: lets talk about the details. Some example usage of this function would be: $ <resources> resource_id1 attribute attribute resource_id2 attribute attribute resource_id3 attribute attribute","title":"Default Query"},{"location":"developer-guide/#detail-functions","text":"Detail functions are always namespaced under the singular of the resource. Some example usage of this function would be: $ <resource> <resource_id> attribute1: value1 attribute2: value2 Some example responses: $ instance_security_groups i-abcd1234 sg-00000001 i-abcd1234 sg-00000002 i-abcd1234 sg-00000003 i-abcd1234 sg-00000004 i-abcd1234 $ security_group_rules TODO: I'm not sure yet how to present a security group rule. $ instance_type i-abcd1234 c3.large i-abcd1234 $ instance_type_memory c3.large 3.75 c3.large","title":"Detail Functions"},{"location":"developer-guide/#action-functions","text":"Action functions are always namespaced under the singular of the resource and are suffixed with the action they are responsible for undertaking. Some example usage of this function would be: $ <resource>_<action> <resource_id>","title":"Action Functions"},{"location":"developer-guide/#tests","text":"You can start the test suite by running the command make test .","title":"Tests"},{"location":"developer-guide/#stdin","text":"The first word of each line must be a resource. Additional information will be disregarded.","title":"STDIN"},{"location":"linuxconf2020/","text":"Mike Bailey introduces Bash-my-AWS and gives live demo at LinuxConf2020 . Mon 13 Jan 2020. Gold Coast, Australia","title":"LinuxConf 2020"},{"location":"pipe-skimming/","text":"When text is piped to a command that implements pipe-skimming, it appends the first item from each line (STDIN) to its argument array (ARGV). This allows for expressive line oriented output to be piped to commands that will skim only the resource identifiers from each line. This makes exploring and traversing related resources from the command line a pleasure: $ stacks | grep nginx | stack-asgs | asg-instances | instance-state i-0e219fbee42347721 shutting-down Pipe-skimming is simple to implement within commands and doesn't require any changes to the command shell. How it Works \u00b6 The following examples show commands from Bash-my-AWS , the project from which this pattern was extracted. Usage Examples \u00b6 Here we list EC2 Instances running in an Amazon AWS Account: $ instances i-09d962a1d688bb3ec t3.nano running grafana-bma 2020-01-16T03:53:44.000Z i-083f73ad5a1895ba0 t3.small running huginn-bma 2020-01-16T03:54:24.000Z i-0e219fbee42347721 t3.nano running nginx-bma 2020-01-16T03:56:22.000Z Piping output from this command into instance-asg returns a list of AutoScaling Groups (ASGs) they belong to: $ instances | instance-asg huginn-bma-AutoScalingGroup-QS7EQOT1G7OX i-083f73ad5a1895ba0 nginx-bma-AutoScalingGroup-106KHAYHUSRHU i-0e219fbee42347721 grafana-bma-AutoScalingGroup-1NXJHMJVZQVMB i-09d962a1d688bb3ec While functionally identical, the example above is far easier to type than this example using command arguments: $ instance-asg i-09d962a1d688bb3ec i-083f73ad5a1895ba0 i-0e219fbee42347721 huginn-bma-AutoScalingGroup-QS7EQOT1G7OX i-083f73ad5a1895ba0 nginx-bma-AutoScalingGroup-106KHAYHUSRHU i-0e219fbee42347721 grafana-bma-AutoScalingGroup-1NXJHMJVZQVMB i-09d962a1d688bb3ec We can continue adding commands to our pipeline: $ instances | instance-asg | asg-capacity grafana-bma-AutoScalingGroup-1NXJHMJVZQVMB 1 1 2 huginn-bma-AutoScalingGroup-QS7EQOT1G7OX 1 1 2 nginx-bma-AutoScalingGroup-106KHAYHUSRHU 1 1 2 Implementation in Bash-my-AWS \u00b6 The command instance-asg (a Bash function) appends the first item from each line of piped input on STDIN to its argument list: instance-asg() { # List autoscaling group membership of EC2 Instance(s) # # USAGE: instance-asg instance-id [instance-id] local instance_ids=$(skim-stdin \"$@\") [[ -z $instance_ids ]] && __bma_usage \"instance-id [instance-id]\" && return 1 aws ec2 describe-instances \\ --instance-ids $instance_ids \\ --output text \\ --query \" Reservations[].Instances[][ { \"AutoscalingGroupName\": [Tags[?Key=='aws:autoscaling:groupName'].Value][0][0], \"InstanceId\": InstanceId } ][]\" | column -s$'\\t' -t } This implementation uses a simple Bash function called skim-stdin : skim-stdin() { # Append first token from each line of STDIN to argument list # # Implementation of `pipe-skimming` pattern. # # Typical usage within Bash-my-AWS: # # - local asg_names=$(skim-stdin \"$@\") # Append to arg list # - local asg_names=$(skim-stdin) # Only draw from STDIN # # $ stacks | skim-stdin foo bar # foo bar huginn mastodon grafana # # $ stacks # huginn CREATE_COMPLETE 2020-01-11T06:18:46.905Z NEVER_UPDATED NOT_NESTED # mastodon CREATE_COMPLETE 2020-01-11T06:19:31.958Z NEVER_UPDATED NOT_NESTED # grafana CREATE_COMPLETE 2020-01-11T06:19:47.001Z NEVER_UPDATED NOT_NESTED ( printf -- \"$*\" # Print all args printf \" \" # Print a space [[ -t 0 ]] || awk 'ORS=\" \" { print $1 }' # Print first token of each line of STDIN ) | awk '{$1=$1;print}' # Trim leading/trailing spaces } Almost every command in Bash-my-AWS makes use of skim-stdin to accept resource identifiers via arguments and/or piped input on STDIN. AFAIK, this pattern has not previously been described.","title":"Pipe-Skimming"},{"location":"pipe-skimming/#how-it-works","text":"The following examples show commands from Bash-my-AWS , the project from which this pattern was extracted.","title":"How it Works"},{"location":"pipe-skimming/#usage-examples","text":"Here we list EC2 Instances running in an Amazon AWS Account: $ instances i-09d962a1d688bb3ec t3.nano running grafana-bma 2020-01-16T03:53:44.000Z i-083f73ad5a1895ba0 t3.small running huginn-bma 2020-01-16T03:54:24.000Z i-0e219fbee42347721 t3.nano running nginx-bma 2020-01-16T03:56:22.000Z Piping output from this command into instance-asg returns a list of AutoScaling Groups (ASGs) they belong to: $ instances | instance-asg huginn-bma-AutoScalingGroup-QS7EQOT1G7OX i-083f73ad5a1895ba0 nginx-bma-AutoScalingGroup-106KHAYHUSRHU i-0e219fbee42347721 grafana-bma-AutoScalingGroup-1NXJHMJVZQVMB i-09d962a1d688bb3ec While functionally identical, the example above is far easier to type than this example using command arguments: $ instance-asg i-09d962a1d688bb3ec i-083f73ad5a1895ba0 i-0e219fbee42347721 huginn-bma-AutoScalingGroup-QS7EQOT1G7OX i-083f73ad5a1895ba0 nginx-bma-AutoScalingGroup-106KHAYHUSRHU i-0e219fbee42347721 grafana-bma-AutoScalingGroup-1NXJHMJVZQVMB i-09d962a1d688bb3ec We can continue adding commands to our pipeline: $ instances | instance-asg | asg-capacity grafana-bma-AutoScalingGroup-1NXJHMJVZQVMB 1 1 2 huginn-bma-AutoScalingGroup-QS7EQOT1G7OX 1 1 2 nginx-bma-AutoScalingGroup-106KHAYHUSRHU 1 1 2","title":"Usage Examples"},{"location":"pipe-skimming/#implementation-in-bash-my-aws","text":"The command instance-asg (a Bash function) appends the first item from each line of piped input on STDIN to its argument list: instance-asg() { # List autoscaling group membership of EC2 Instance(s) # # USAGE: instance-asg instance-id [instance-id] local instance_ids=$(skim-stdin \"$@\") [[ -z $instance_ids ]] && __bma_usage \"instance-id [instance-id]\" && return 1 aws ec2 describe-instances \\ --instance-ids $instance_ids \\ --output text \\ --query \" Reservations[].Instances[][ { \"AutoscalingGroupName\": [Tags[?Key=='aws:autoscaling:groupName'].Value][0][0], \"InstanceId\": InstanceId } ][]\" | column -s$'\\t' -t } This implementation uses a simple Bash function called skim-stdin : skim-stdin() { # Append first token from each line of STDIN to argument list # # Implementation of `pipe-skimming` pattern. # # Typical usage within Bash-my-AWS: # # - local asg_names=$(skim-stdin \"$@\") # Append to arg list # - local asg_names=$(skim-stdin) # Only draw from STDIN # # $ stacks | skim-stdin foo bar # foo bar huginn mastodon grafana # # $ stacks # huginn CREATE_COMPLETE 2020-01-11T06:18:46.905Z NEVER_UPDATED NOT_NESTED # mastodon CREATE_COMPLETE 2020-01-11T06:19:31.958Z NEVER_UPDATED NOT_NESTED # grafana CREATE_COMPLETE 2020-01-11T06:19:47.001Z NEVER_UPDATED NOT_NESTED ( printf -- \"$*\" # Print all args printf \" \" # Print a space [[ -t 0 ]] || awk 'ORS=\" \" { print $1 }' # Print first token of each line of STDIN ) | awk '{$1=$1;print}' # Trim leading/trailing spaces } Almost every command in Bash-my-AWS makes use of skim-stdin to accept resource identifiers via arguments and/or piped input on STDIN. AFAIK, this pattern has not previously been described.","title":"Implementation in Bash-my-AWS"},{"location":"style-WIP/","text":"bash-my-aws style guide \u00b6 Each function preceeded by two blank lines Resource list functions sort output by date created Format for functions to support doc generation (https://bash-my-aws.org) elbv2s() { # List EC2 ELBv2 load balancers (both Network and Application types) # Accepts Load Balancer names or ARNS on STDIN and converts to Network Load Balancer names # # $ elbv2s # bash-my-aws network internet-facing active 2020-01-04T11:18:49.733Z # bash-my-aws-alb application internet-facing provisioning 2020-01-04T11:29:45.030Z local elbv2_names=$(__bma_read_inputs | sed 's/arn[a-zA-Z0-9:\\-]*loadbalancer\\/net\\///g' | sed 's/\\/.*//g') local filters=$(__bma_read_filters $@) aws elbv2 describe-load-balancers \\ $([[ -n ${elbv2_names} ]] && echo --names $elbv2_names) \\ --output text \\ --query \" LoadBalancers[][ LoadBalancerName, Type, Scheme, State.Code, CreatedTime ]\" | grep -E -- \"$filters\" | LC_ALL=C sort -k 5 | column -s$'\\t' -t } Try to keep output from being too long (it can be >80 char but aim for shorter) resource-detail commands can provide info not provided in the line Always quote \"$variables\" Only use parentheses around variables when not surrounded with whitespace (better way to phrase this?) use $(date) rather than \" date \" use [[ and ]] rather than [ , ] , or test show errors with __bma_error() show usage options with __bma_usage() parse inputs with __bma_read_inputs() regenerate and test the bash_completion script after adding new functions","title":"style WIP"},{"location":"style-WIP/#bash-my-aws-style-guide","text":"Each function preceeded by two blank lines Resource list functions sort output by date created Format for functions to support doc generation (https://bash-my-aws.org) elbv2s() { # List EC2 ELBv2 load balancers (both Network and Application types) # Accepts Load Balancer names or ARNS on STDIN and converts to Network Load Balancer names # # $ elbv2s # bash-my-aws network internet-facing active 2020-01-04T11:18:49.733Z # bash-my-aws-alb application internet-facing provisioning 2020-01-04T11:29:45.030Z local elbv2_names=$(__bma_read_inputs | sed 's/arn[a-zA-Z0-9:\\-]*loadbalancer\\/net\\///g' | sed 's/\\/.*//g') local filters=$(__bma_read_filters $@) aws elbv2 describe-load-balancers \\ $([[ -n ${elbv2_names} ]] && echo --names $elbv2_names) \\ --output text \\ --query \" LoadBalancers[][ LoadBalancerName, Type, Scheme, State.Code, CreatedTime ]\" | grep -E -- \"$filters\" | LC_ALL=C sort -k 5 | column -s$'\\t' -t } Try to keep output from being too long (it can be >80 char but aim for shorter) resource-detail commands can provide info not provided in the line Always quote \"$variables\" Only use parentheses around variables when not surrounded with whitespace (better way to phrase this?) use $(date) rather than \" date \" use [[ and ]] rather than [ , ] , or test show errors with __bma_error() show usage options with __bma_usage() parse inputs with __bma_read_inputs() regenerate and test the bash_completion script after adding new functions","title":"bash-my-aws style guide"},{"location":"style/","text":"bash-my-aws style guide \u00b6 Always quote \"$variables\" Only use parentheses around variables when not surrounded with whitespace (better way to phrase this?) use $(date) rather than \" date \" use [[ and ]] rather than [ , ] , or test show errors with __bma_error() show usage options with __bma_usage() parse inputs with __bma_read_inputs() regenerate and test the bash_completion script after adding new functions","title":"Style"},{"location":"style/#bash-my-aws-style-guide","text":"Always quote \"$variables\" Only use parentheses around variables when not surrounded with whitespace (better way to phrase this?) use $(date) rather than \" date \" use [[ and ]] rather than [ , ] , or test show errors with __bma_error() show usage options with __bma_usage() parse inputs with __bma_read_inputs() regenerate and test the bash_completion script after adding new functions","title":"bash-my-aws style guide"},{"location":"tour/","text":"Tour \u00b6 Check this out!","title":"Tour"},{"location":"tour/#tour","text":"Check this out!","title":"Tour"}]}