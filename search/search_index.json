{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started \u00b6 bash-my-aws is a set of powerful yet simple command line tools for managing Amazon Web Services. Most wrap AWSCLI commands and provide a number of advantages: short, memorable commands bash completion (including AWS resources) text output (instead of JSON) the ability to pipe output between commands Prerequisites \u00b6 awscli bash jq-1.4 or later (for stack-diff) Installation \u00b6 As shown below, you may simply clone the GitHub repo and source the files required. (You should probably fork it instead to keep your customisations) $ git clone https://github.com/bash-my-universe/bash-my-aws.git ~/.bash-my-aws Put the following in your shell's startup file: export PATH = \" $PATH : $HOME /.bash-my-aws/bin\" source ~/.bash-my-aws/aliases # For ZSH users, uncomment the following two lines: # autoload -U +X compinit && compinit # autoload -U +X bashcompinit && bashcompinit source ~/.bash-my-aws/bash_completion.sh Why use shell aliases? bash-my-aws began as a collection of bash functions, sourced into your shell. More recently, the default suggestion has been to load aliases that execute a small wrapper script that loads the functions and executes the desired function. After years of zsh users asking for support, one stepped up and identified a changes that would eliminate any shell compatibility problems without compromising the functionaility, simplicity and discoverability of the project. Massive thanks to @ninth-dev for this. Bash users can still source the functions instead of loading the aliases: # bash users may source the functions instead of loading the aliases if [ -d ${HOME}/.bash-my-aws ]; then for f in ~/.bash-my-aws/lib/*-functions; do source $f; done fi Quickstart \u00b6 Authenticate the same way you would to use AWSCLI commands. $ stacks blah blah blah $ instances Usage \u00b6 Running Commands \u00b6 The default way to run the commands is using the aliases: $ instances It's also possible to run them using the bma wrapper. (This is sometimes required when using a restrictive auth tool.) $ bma instances Discovering Commands \u00b6 For each resource type, there is a command to list them: $ instances foo DDDDDDDDDDDDDDDD bar EEEEEEEEEEEEEEEE and a number of command to act on these resources: $ instance-[TAB][TAB] instance-asg instance-ssh-details instance-termination-protection instance-az instance-stack instance-termination-protection-disable instance-console instance-start instance-termination-protection-enable instance-dns instance-state instance-type instance-iam-profile instance-stop instance-userdata instance-ip instance-tags instance-volumes instance-ssh instance-terminate instance-vpc Whether you're new to the tools or just have a bad memory, bash completion makes discovering these commands simple. See the Functions page for a full list with usage examples Piping Between Commands \u00b6 This is where the magic happens! The first token on each line is almost always a resource identifier. When you pipe output between the commands they just take the first token from each line. $ instances | grep splunk | instance-stack | stack-status splunk-forwarder UPDATE_COMPLETE splunk-forwarder-role CREATE_COMPLETE Inspecting Commands \u00b6 For those interested in how it works: Each command is a bash function. Most are very simple and wrap an AWSCLI command. For a quick look at how a command works, you can use bma type : $ bma type instances instances is a function instances () { local instance_ids = $( __bma_read_inputs ) ; local filters = $( __bma_read_filters $@ ) ; aws ec2 describe-instances $( [[ -n ${ instance_ids } ]] && echo --instance-ids ${ instance_ids } ) --query \" Reservations[].Instances[][ InstanceId, ImageId, InstanceType, State.Name, [Tags[?Key=='Name'].Value][0][0], LaunchTime, Placement.AvailabilityZone, VpcId ]\" --output text | grep -E -- \" $filters \" | LC_ALL = C sort -b -k 6 | column -s ' ' -t } A prettier version can be found in the source code: # ~/.bash-my-aws/lib/instance-functions instances () { local instance_ids = $( __bma_read_inputs ) local filters = $( __bma_read_filters $@ ) aws ec2 describe-instances \\ $( [[ -n ${ instance_ids } ]] && echo --instance-ids ${ instance_ids } ) \\ --query \" Reservations[].Instances[][ InstanceId, ImageId, InstanceType, State.Name, [Tags[?Key=='Name'].Value][0][0], LaunchTime, Placement.AvailabilityZone, VpcId ]\" \\ --output text | grep -E -- \" $filters \" | LC_ALL = C sort -b -k 6 | column -s $'\\t' -t } For more info on AWSCLI query syntax, check out http://jmespath.org/tutorial.html","title":"Home"},{"location":"#getting-started","text":"bash-my-aws is a set of powerful yet simple command line tools for managing Amazon Web Services. Most wrap AWSCLI commands and provide a number of advantages: short, memorable commands bash completion (including AWS resources) text output (instead of JSON) the ability to pipe output between commands","title":"Getting Started"},{"location":"#prerequisites","text":"awscli bash jq-1.4 or later (for stack-diff)","title":"Prerequisites"},{"location":"#installation","text":"As shown below, you may simply clone the GitHub repo and source the files required. (You should probably fork it instead to keep your customisations) $ git clone https://github.com/bash-my-universe/bash-my-aws.git ~/.bash-my-aws Put the following in your shell's startup file: export PATH = \" $PATH : $HOME /.bash-my-aws/bin\" source ~/.bash-my-aws/aliases # For ZSH users, uncomment the following two lines: # autoload -U +X compinit && compinit # autoload -U +X bashcompinit && bashcompinit source ~/.bash-my-aws/bash_completion.sh Why use shell aliases? bash-my-aws began as a collection of bash functions, sourced into your shell. More recently, the default suggestion has been to load aliases that execute a small wrapper script that loads the functions and executes the desired function. After years of zsh users asking for support, one stepped up and identified a changes that would eliminate any shell compatibility problems without compromising the functionaility, simplicity and discoverability of the project. Massive thanks to @ninth-dev for this. Bash users can still source the functions instead of loading the aliases: # bash users may source the functions instead of loading the aliases if [ -d ${HOME}/.bash-my-aws ]; then for f in ~/.bash-my-aws/lib/*-functions; do source $f; done fi","title":"Installation"},{"location":"#quickstart","text":"Authenticate the same way you would to use AWSCLI commands. $ stacks blah blah blah $ instances","title":"Quickstart"},{"location":"#usage","text":"","title":"Usage"},{"location":"#running-commands","text":"The default way to run the commands is using the aliases: $ instances It's also possible to run them using the bma wrapper. (This is sometimes required when using a restrictive auth tool.) $ bma instances","title":"Running Commands"},{"location":"#discovering-commands","text":"For each resource type, there is a command to list them: $ instances foo DDDDDDDDDDDDDDDD bar EEEEEEEEEEEEEEEE and a number of command to act on these resources: $ instance-[TAB][TAB] instance-asg instance-ssh-details instance-termination-protection instance-az instance-stack instance-termination-protection-disable instance-console instance-start instance-termination-protection-enable instance-dns instance-state instance-type instance-iam-profile instance-stop instance-userdata instance-ip instance-tags instance-volumes instance-ssh instance-terminate instance-vpc Whether you're new to the tools or just have a bad memory, bash completion makes discovering these commands simple. See the Functions page for a full list with usage examples","title":"Discovering Commands"},{"location":"#piping-between-commands","text":"This is where the magic happens! The first token on each line is almost always a resource identifier. When you pipe output between the commands they just take the first token from each line. $ instances | grep splunk | instance-stack | stack-status splunk-forwarder UPDATE_COMPLETE splunk-forwarder-role CREATE_COMPLETE","title":"Piping Between Commands"},{"location":"#inspecting-commands","text":"For those interested in how it works: Each command is a bash function. Most are very simple and wrap an AWSCLI command. For a quick look at how a command works, you can use bma type : $ bma type instances instances is a function instances () { local instance_ids = $( __bma_read_inputs ) ; local filters = $( __bma_read_filters $@ ) ; aws ec2 describe-instances $( [[ -n ${ instance_ids } ]] && echo --instance-ids ${ instance_ids } ) --query \" Reservations[].Instances[][ InstanceId, ImageId, InstanceType, State.Name, [Tags[?Key=='Name'].Value][0][0], LaunchTime, Placement.AvailabilityZone, VpcId ]\" --output text | grep -E -- \" $filters \" | LC_ALL = C sort -b -k 6 | column -s ' ' -t } A prettier version can be found in the source code: # ~/.bash-my-aws/lib/instance-functions instances () { local instance_ids = $( __bma_read_inputs ) local filters = $( __bma_read_filters $@ ) aws ec2 describe-instances \\ $( [[ -n ${ instance_ids } ]] && echo --instance-ids ${ instance_ids } ) \\ --query \" Reservations[].Instances[][ InstanceId, ImageId, InstanceType, State.Name, [Tags[?Key=='Name'].Value][0][0], LaunchTime, Placement.AvailabilityZone, VpcId ]\" \\ --output text | grep -E -- \" $filters \" | LC_ALL = C sort -b -k 6 | column -s $'\\t' -t } For more info on AWSCLI query syntax, check out http://jmespath.org/tutorial.html","title":"Inspecting Commands"},{"location":"command-reference/","text":"commands expect that AWS_DEFAULT_REGION is set check/set with region list all with regions run and command across all regions with region-each all resource list commands (stacks, instances, etc) filter on first arg stacks blah is equivalent to stacks | grep blah commands assume first token of each line of STDIN to be resource identifiers resources are generally listed in order of creation date most recently created resources will be closest to your flashing cursor stack-commands \u00b6 Act on CloudFormation stacks. This was where bash-my-aws started back in 2014. A few of these functions do not yet accept multiple stacks as piped input. stacks \u00b6 stack-arn \u00b6 stack-asg-instances \u00b6 stack-asgs \u00b6 stack-cancel-update \u00b6 stack-create \u00b6 stack-delete \u00b6 stack-diff \u00b6 stack-elbs \u00b6 stack-events \u00b6 stack-exports \u00b6 stack-failure \u00b6 stack-instances \u00b6 stack-outputs \u00b6 stack-parameters \u00b6 stack-recreate \u00b6 stack-resources \u00b6 stack-status \u00b6 stack-tag \u00b6 stack-tag-apply \u00b6 stack-tag-delete \u00b6 stack-tags \u00b6 stack-tags-text \u00b6 stack-tail \u00b6 stack-template \u00b6 stack-update \u00b6 stack-validate \u00b6 asg-functions \u00b6 asg-capacity \u00b6 asg-desired-size-set \u00b6 asg-instances \u00b6 asg-launch-configuration \u00b6 asg-max-size-set \u00b6 asg-min-size-set \u00b6 asg-processes_suspended \u00b6 asg-resume \u00b6 asg-scaling-activities \u00b6 asg-stack \u00b6 asg-suspend \u00b6 asgs \u00b6 aws-account-functions \u00b6 These functions target AWS Accounts and act on either the account you're authenticated to or the Account IDs provided to them. aws-account-alias \u00b6 Retrieve AWS Account Alias for current account $ aws-account-alias example-account-prod aws-account-cost-explorer \u00b6 aws-account-cost-recommendations \u00b6 aws-account-each \u00b6 Run a script/command across a number of AWS Accounts $ grep non_prod AWS_ACCOUNTS | aws-account-each stacks FAILED # account=012345678901 alias=example-account-prod example-stack1-prod CREATED_FAILED example-stack2-prod UPDATE_ROLLBACK_FAILED # account=123456789012 alias=example-account-staging example-stack1-staging CREATED_FAILED example-stack2-staging UPDATE_ROLLBACK_FAILED aws-account-id \u00b6 Retrieve AWS Account ID for current account $ aws-account-id 012345678901 bucket-functions \u00b6 buckets \u00b6 List S3 Buckets $ buckets example-bucket 2019 -12-07 06 :51:05.064372 another-example-bucket 2019 -12-07 06 :51:12.022496 bucket-acls \u00b6 List S3 Bucket Access Control Lists. $ bucket-acls another-example-bucket another-example-bucket Note The only recommended use case for the bucket ACL is to grant write permission to the Amazon S3 Log Delivery group to write access log objects to your bucket. AWS docs bucket-remove \u00b6 Remove an empty S3 Bucket. In this example the bucket is not empty. $ bucket-remove another-example-bucket You are about to remove the following buckets: another-example-bucket 2019 -12-07 06 :51:12.022496 Are you sure you want to continue ? y remove_bucket failed: s3://another-example-bucket An error occurred ( BucketNotEmpty ) when calling the DeleteBucket operation: The bucket you tried to delete is not empty bucket-remove-force \u00b6 Remove an S3 Bucket, and delete all objects if it's not empty. $ bucket-remove-force another-example-bucket You are about to delete all objects from and remove the following buckets: another-example-bucket 2019 -12-07 06 :51:12.022496 Are you sure you want to continue ? y delete: s3://another-example-bucket/aliases remove_bucket: another-example-bucket cert-functions \u00b6 ACM Certificates certs \u00b6 cert-delete \u00b6 cert-users \u00b6 certs-arn \u00b6 cloudtrail-status \u00b6 cloudtrails \u00b6 columnise \u00b6 ecr-functions \u00b6 ecr-repositories \u00b6 ecr-repository-images \u00b6 elb-functions \u00b6 elb-dnsname \u00b6 elb-instances \u00b6 elb-stack \u00b6 elbs \u00b6 iam-functions \u00b6 iam-role-principal \u00b6 iam-roles \u00b6 image-deregister \u00b6 images \u00b6 instance-functions \u00b6 instance-asg \u00b6 instance-az \u00b6 instance-console \u00b6 instance-dns \u00b6 instance-iam-profile \u00b6 instance-ip \u00b6 instance-ssh \u00b6 instance-ssh-details \u00b6 instance-stack \u00b6 instance-start \u00b6 instance-state \u00b6 instance-stop \u00b6 instance-tags \u00b6 instance-terminate \u00b6 instance-termination-protection \u00b6 instance-termination-protection-disable \u00b6 instance-termination-protection-enable \u00b6 instance-type \u00b6 instance-userdata \u00b6 instance-volumes \u00b6 instance-vpc \u00b6 instances \u00b6 keypair-functions \u00b6 List, create and delete EC2 SSH Keypairs keypairs \u00b6 List EC2 SSH Keypairs in current Region $ keypairs alice 8f:85:9a:1e:6c:76:29:34:37:45:de:7f:8d:f9:70:eb bob 56 :73:29:c2:ad:7b:6f:b6:f2:f3:b4:de:e4:2b:12:d4 keypair-create \u00b6 Create SSH Keypair on local machine and import public key into new EC2 Keypair. Provides benefits over AWS creating the keypair: Amazon never has access to private key Private key is protected with passphrase before being written to disk Keys is written to ~/.ssh with correct file permissions You control the SSH Key type (algorithm, length, etc) $ keypair-create yet-another-keypair Creating /home/m/.ssh/yet-another-keypair Generating public/private rsa key pair. Enter passphrase ( empty for no passphrase ) : Enter same passphrase again: Your identification has been saved in /home/m/.ssh/yet-another-keypair. Your public key has been saved in /home/m/.ssh/yet-another-keypair.pub. The key fingerprint is: SHA256:zIpbxLo7rpQvKyezOLATk96B1kSL0QP41q6x8tUrySk m@localhost.localdomain The key ' s randomart image is: +--- [ RSA 4096 ] ----+ | ..o | | .. + | | .+.o | | .oo.. o | | o+. o S | | = o.+. = . | | +++ == o+ | | XoE+*+ . | | o@+**+. | +---- [ SHA256 ] -----+ { \"KeyFingerprint\" : \"21:82:f9:5b:79:d6:dc:0f:7b:79:43:7c:c5:34:6c:2d\" , \"KeyName\" : \"yet-another-keypair\" } Note KeyPair Name defaults to \"$(aws-account-alias)-$(region)\" if none provided keypair-delete \u00b6 Delete EC2 SSH Keypairs by providing their names as arguments or via STDIN $ keypair-delete alice bob You are about to delete the following EC2 SSH KeyPairs: alice bob Are you sure you want to continue ? y $ keypairs | keypair-delete You are about to delete the following EC2 SSH KeyPairs: yet-another-keypair Are you sure you want to continue ? y lambda-functions \u00b6 lambda-functions \u00b6 lambda-function-memory \u00b6 lambda-function-memory-set \u00b6 lambda-function-memory-step \u00b6 launch-configuration-asgs \u00b6 launch-configurations \u00b6 log-groups \u00b6 pcxs \u00b6 rds-db-instances \u00b6 region-functions \u00b6 regions \u00b6 List regions region \u00b6 Set $AWS_DEFAULT_REGION shell environment variable region-each \u00b6 Run a command in every region. Any output lines will be appended with \"#${REGION}\". sts-assume-role \u00b6 subnets \u00b6 vpc-functions \u00b6 vpc-az-count \u00b6 vpc-azs \u00b6 vpc-default-delete \u00b6 vpc-dhcp-options-ntp \u00b6 vpc-endpoints \u00b6 vpc-igw \u00b6 vpc-lambda-functions \u00b6 vpc-nat-gateways \u00b6 vpc-network-acls \u00b6 vpc-rds \u00b6 vpc-route-tables \u00b6 vpc-subnets \u00b6 vpcs \u00b6 Internal functions \u00b6 __bma_error __bma_read_filters __bma_read_inputs __bma_read_stdin __bma_usage _bma_derive_params_from_stack_and_template _bma_derive_params_from_template _bma_derive_stack_from_params _bma_derive_stack_from_template _bma_derive_template_from_params _bma_derive_template_from_stack _bma_stack_args _bma_stack_capabilities _bma_stack_diff_params _bma_stack_diff_template _bma_stack_name_arg _bma_stack_params_arg _bma_stack_template_arg","title":"Command Reference"},{"location":"command-reference/#stack-commands","text":"Act on CloudFormation stacks. This was where bash-my-aws started back in 2014. A few of these functions do not yet accept multiple stacks as piped input.","title":"stack-commands"},{"location":"command-reference/#stacks","text":"","title":"stacks"},{"location":"command-reference/#stack-arn","text":"","title":"stack-arn"},{"location":"command-reference/#stack-asg-instances","text":"","title":"stack-asg-instances"},{"location":"command-reference/#stack-asgs","text":"","title":"stack-asgs"},{"location":"command-reference/#stack-cancel-update","text":"","title":"stack-cancel-update"},{"location":"command-reference/#stack-create","text":"","title":"stack-create"},{"location":"command-reference/#stack-delete","text":"","title":"stack-delete"},{"location":"command-reference/#stack-diff","text":"","title":"stack-diff"},{"location":"command-reference/#stack-elbs","text":"","title":"stack-elbs"},{"location":"command-reference/#stack-events","text":"","title":"stack-events"},{"location":"command-reference/#stack-exports","text":"","title":"stack-exports"},{"location":"command-reference/#stack-failure","text":"","title":"stack-failure"},{"location":"command-reference/#stack-instances","text":"","title":"stack-instances"},{"location":"command-reference/#stack-outputs","text":"","title":"stack-outputs"},{"location":"command-reference/#stack-parameters","text":"","title":"stack-parameters"},{"location":"command-reference/#stack-recreate","text":"","title":"stack-recreate"},{"location":"command-reference/#stack-resources","text":"","title":"stack-resources"},{"location":"command-reference/#stack-status","text":"","title":"stack-status"},{"location":"command-reference/#stack-tag","text":"","title":"stack-tag"},{"location":"command-reference/#stack-tag-apply","text":"","title":"stack-tag-apply"},{"location":"command-reference/#stack-tag-delete","text":"","title":"stack-tag-delete"},{"location":"command-reference/#stack-tags","text":"","title":"stack-tags"},{"location":"command-reference/#stack-tags-text","text":"","title":"stack-tags-text"},{"location":"command-reference/#stack-tail","text":"","title":"stack-tail"},{"location":"command-reference/#stack-template","text":"","title":"stack-template"},{"location":"command-reference/#stack-update","text":"","title":"stack-update"},{"location":"command-reference/#stack-validate","text":"","title":"stack-validate"},{"location":"command-reference/#asg-functions","text":"","title":"asg-functions"},{"location":"command-reference/#asg-capacity","text":"","title":"asg-capacity"},{"location":"command-reference/#asg-desired-size-set","text":"","title":"asg-desired-size-set"},{"location":"command-reference/#asg-instances","text":"","title":"asg-instances"},{"location":"command-reference/#asg-launch-configuration","text":"","title":"asg-launch-configuration"},{"location":"command-reference/#asg-max-size-set","text":"","title":"asg-max-size-set"},{"location":"command-reference/#asg-min-size-set","text":"","title":"asg-min-size-set"},{"location":"command-reference/#asg-processes_suspended","text":"","title":"asg-processes_suspended"},{"location":"command-reference/#asg-resume","text":"","title":"asg-resume"},{"location":"command-reference/#asg-scaling-activities","text":"","title":"asg-scaling-activities"},{"location":"command-reference/#asg-stack","text":"","title":"asg-stack"},{"location":"command-reference/#asg-suspend","text":"","title":"asg-suspend"},{"location":"command-reference/#asgs","text":"","title":"asgs"},{"location":"command-reference/#aws-account-functions","text":"These functions target AWS Accounts and act on either the account you're authenticated to or the Account IDs provided to them.","title":"aws-account-functions"},{"location":"command-reference/#aws-account-alias","text":"Retrieve AWS Account Alias for current account $ aws-account-alias example-account-prod","title":"aws-account-alias"},{"location":"command-reference/#aws-account-cost-explorer","text":"","title":"aws-account-cost-explorer"},{"location":"command-reference/#aws-account-cost-recommendations","text":"","title":"aws-account-cost-recommendations"},{"location":"command-reference/#aws-account-each","text":"Run a script/command across a number of AWS Accounts $ grep non_prod AWS_ACCOUNTS | aws-account-each stacks FAILED # account=012345678901 alias=example-account-prod example-stack1-prod CREATED_FAILED example-stack2-prod UPDATE_ROLLBACK_FAILED # account=123456789012 alias=example-account-staging example-stack1-staging CREATED_FAILED example-stack2-staging UPDATE_ROLLBACK_FAILED","title":"aws-account-each"},{"location":"command-reference/#aws-account-id","text":"Retrieve AWS Account ID for current account $ aws-account-id 012345678901","title":"aws-account-id"},{"location":"command-reference/#bucket-functions","text":"","title":"bucket-functions"},{"location":"command-reference/#buckets","text":"List S3 Buckets $ buckets example-bucket 2019 -12-07 06 :51:05.064372 another-example-bucket 2019 -12-07 06 :51:12.022496","title":"buckets"},{"location":"command-reference/#bucket-acls","text":"List S3 Bucket Access Control Lists. $ bucket-acls another-example-bucket another-example-bucket Note The only recommended use case for the bucket ACL is to grant write permission to the Amazon S3 Log Delivery group to write access log objects to your bucket. AWS docs","title":"bucket-acls"},{"location":"command-reference/#bucket-remove","text":"Remove an empty S3 Bucket. In this example the bucket is not empty. $ bucket-remove another-example-bucket You are about to remove the following buckets: another-example-bucket 2019 -12-07 06 :51:12.022496 Are you sure you want to continue ? y remove_bucket failed: s3://another-example-bucket An error occurred ( BucketNotEmpty ) when calling the DeleteBucket operation: The bucket you tried to delete is not empty","title":"bucket-remove"},{"location":"command-reference/#bucket-remove-force","text":"Remove an S3 Bucket, and delete all objects if it's not empty. $ bucket-remove-force another-example-bucket You are about to delete all objects from and remove the following buckets: another-example-bucket 2019 -12-07 06 :51:12.022496 Are you sure you want to continue ? y delete: s3://another-example-bucket/aliases remove_bucket: another-example-bucket","title":"bucket-remove-force"},{"location":"command-reference/#cert-functions","text":"ACM Certificates","title":"cert-functions"},{"location":"command-reference/#certs","text":"","title":"certs"},{"location":"command-reference/#cert-delete","text":"","title":"cert-delete"},{"location":"command-reference/#cert-users","text":"","title":"cert-users"},{"location":"command-reference/#certs-arn","text":"","title":"certs-arn"},{"location":"command-reference/#cloudtrail-status","text":"","title":"cloudtrail-status"},{"location":"command-reference/#cloudtrails","text":"","title":"cloudtrails"},{"location":"command-reference/#columnise","text":"","title":"columnise"},{"location":"command-reference/#ecr-functions","text":"","title":"ecr-functions"},{"location":"command-reference/#ecr-repositories","text":"","title":"ecr-repositories"},{"location":"command-reference/#ecr-repository-images","text":"","title":"ecr-repository-images"},{"location":"command-reference/#elb-functions","text":"","title":"elb-functions"},{"location":"command-reference/#elb-dnsname","text":"","title":"elb-dnsname"},{"location":"command-reference/#elb-instances","text":"","title":"elb-instances"},{"location":"command-reference/#elb-stack","text":"","title":"elb-stack"},{"location":"command-reference/#elbs","text":"","title":"elbs"},{"location":"command-reference/#iam-functions","text":"","title":"iam-functions"},{"location":"command-reference/#iam-role-principal","text":"","title":"iam-role-principal"},{"location":"command-reference/#iam-roles","text":"","title":"iam-roles"},{"location":"command-reference/#image-deregister","text":"","title":"image-deregister"},{"location":"command-reference/#images","text":"","title":"images"},{"location":"command-reference/#instance-functions","text":"","title":"instance-functions"},{"location":"command-reference/#instance-asg","text":"","title":"instance-asg"},{"location":"command-reference/#instance-az","text":"","title":"instance-az"},{"location":"command-reference/#instance-console","text":"","title":"instance-console"},{"location":"command-reference/#instance-dns","text":"","title":"instance-dns"},{"location":"command-reference/#instance-iam-profile","text":"","title":"instance-iam-profile"},{"location":"command-reference/#instance-ip","text":"","title":"instance-ip"},{"location":"command-reference/#instance-ssh","text":"","title":"instance-ssh"},{"location":"command-reference/#instance-ssh-details","text":"","title":"instance-ssh-details"},{"location":"command-reference/#instance-stack","text":"","title":"instance-stack"},{"location":"command-reference/#instance-start","text":"","title":"instance-start"},{"location":"command-reference/#instance-state","text":"","title":"instance-state"},{"location":"command-reference/#instance-stop","text":"","title":"instance-stop"},{"location":"command-reference/#instance-tags","text":"","title":"instance-tags"},{"location":"command-reference/#instance-terminate","text":"","title":"instance-terminate"},{"location":"command-reference/#instance-termination-protection","text":"","title":"instance-termination-protection"},{"location":"command-reference/#instance-termination-protection-disable","text":"","title":"instance-termination-protection-disable"},{"location":"command-reference/#instance-termination-protection-enable","text":"","title":"instance-termination-protection-enable"},{"location":"command-reference/#instance-type","text":"","title":"instance-type"},{"location":"command-reference/#instance-userdata","text":"","title":"instance-userdata"},{"location":"command-reference/#instance-volumes","text":"","title":"instance-volumes"},{"location":"command-reference/#instance-vpc","text":"","title":"instance-vpc"},{"location":"command-reference/#instances","text":"","title":"instances"},{"location":"command-reference/#keypair-functions","text":"List, create and delete EC2 SSH Keypairs","title":"keypair-functions"},{"location":"command-reference/#keypairs","text":"List EC2 SSH Keypairs in current Region $ keypairs alice 8f:85:9a:1e:6c:76:29:34:37:45:de:7f:8d:f9:70:eb bob 56 :73:29:c2:ad:7b:6f:b6:f2:f3:b4:de:e4:2b:12:d4","title":"keypairs"},{"location":"command-reference/#keypair-create","text":"Create SSH Keypair on local machine and import public key into new EC2 Keypair. Provides benefits over AWS creating the keypair: Amazon never has access to private key Private key is protected with passphrase before being written to disk Keys is written to ~/.ssh with correct file permissions You control the SSH Key type (algorithm, length, etc) $ keypair-create yet-another-keypair Creating /home/m/.ssh/yet-another-keypair Generating public/private rsa key pair. Enter passphrase ( empty for no passphrase ) : Enter same passphrase again: Your identification has been saved in /home/m/.ssh/yet-another-keypair. Your public key has been saved in /home/m/.ssh/yet-another-keypair.pub. The key fingerprint is: SHA256:zIpbxLo7rpQvKyezOLATk96B1kSL0QP41q6x8tUrySk m@localhost.localdomain The key ' s randomart image is: +--- [ RSA 4096 ] ----+ | ..o | | .. + | | .+.o | | .oo.. o | | o+. o S | | = o.+. = . | | +++ == o+ | | XoE+*+ . | | o@+**+. | +---- [ SHA256 ] -----+ { \"KeyFingerprint\" : \"21:82:f9:5b:79:d6:dc:0f:7b:79:43:7c:c5:34:6c:2d\" , \"KeyName\" : \"yet-another-keypair\" } Note KeyPair Name defaults to \"$(aws-account-alias)-$(region)\" if none provided","title":"keypair-create"},{"location":"command-reference/#keypair-delete","text":"Delete EC2 SSH Keypairs by providing their names as arguments or via STDIN $ keypair-delete alice bob You are about to delete the following EC2 SSH KeyPairs: alice bob Are you sure you want to continue ? y $ keypairs | keypair-delete You are about to delete the following EC2 SSH KeyPairs: yet-another-keypair Are you sure you want to continue ? y","title":"keypair-delete"},{"location":"command-reference/#lambda-functions","text":"","title":"lambda-functions"},{"location":"command-reference/#lambda-functions_1","text":"","title":"lambda-functions"},{"location":"command-reference/#lambda-function-memory","text":"","title":"lambda-function-memory"},{"location":"command-reference/#lambda-function-memory-set","text":"","title":"lambda-function-memory-set"},{"location":"command-reference/#lambda-function-memory-step","text":"","title":"lambda-function-memory-step"},{"location":"command-reference/#launch-configuration-asgs","text":"","title":"launch-configuration-asgs"},{"location":"command-reference/#launch-configurations","text":"","title":"launch-configurations"},{"location":"command-reference/#log-groups","text":"","title":"log-groups"},{"location":"command-reference/#pcxs","text":"","title":"pcxs"},{"location":"command-reference/#rds-db-instances","text":"","title":"rds-db-instances"},{"location":"command-reference/#region-functions","text":"","title":"region-functions"},{"location":"command-reference/#regions","text":"List regions","title":"regions"},{"location":"command-reference/#region","text":"Set $AWS_DEFAULT_REGION shell environment variable","title":"region"},{"location":"command-reference/#region-each","text":"Run a command in every region. Any output lines will be appended with \"#${REGION}\".","title":"region-each"},{"location":"command-reference/#sts-assume-role","text":"","title":"sts-assume-role"},{"location":"command-reference/#subnets","text":"","title":"subnets"},{"location":"command-reference/#vpc-functions","text":"","title":"vpc-functions"},{"location":"command-reference/#vpc-az-count","text":"","title":"vpc-az-count"},{"location":"command-reference/#vpc-azs","text":"","title":"vpc-azs"},{"location":"command-reference/#vpc-default-delete","text":"","title":"vpc-default-delete"},{"location":"command-reference/#vpc-dhcp-options-ntp","text":"","title":"vpc-dhcp-options-ntp"},{"location":"command-reference/#vpc-endpoints","text":"","title":"vpc-endpoints"},{"location":"command-reference/#vpc-igw","text":"","title":"vpc-igw"},{"location":"command-reference/#vpc-lambda-functions","text":"","title":"vpc-lambda-functions"},{"location":"command-reference/#vpc-nat-gateways","text":"","title":"vpc-nat-gateways"},{"location":"command-reference/#vpc-network-acls","text":"","title":"vpc-network-acls"},{"location":"command-reference/#vpc-rds","text":"","title":"vpc-rds"},{"location":"command-reference/#vpc-route-tables","text":"","title":"vpc-route-tables"},{"location":"command-reference/#vpc-subnets","text":"","title":"vpc-subnets"},{"location":"command-reference/#vpcs","text":"","title":"vpcs"},{"location":"command-reference/#internal-functions","text":"__bma_error __bma_read_filters __bma_read_inputs __bma_read_stdin __bma_usage _bma_derive_params_from_stack_and_template _bma_derive_params_from_template _bma_derive_stack_from_params _bma_derive_stack_from_template _bma_derive_template_from_params _bma_derive_template_from_stack _bma_stack_args _bma_stack_capabilities _bma_stack_diff_params _bma_stack_diff_template _bma_stack_name_arg _bma_stack_params_arg _bma_stack_template_arg","title":"Internal functions"},{"location":"developer-guide/","text":"bash-my-aws development guide. \u00b6 There are three distinct classes of functions types within bash-my-aws ; query , detail , and action functions. Query functions are responsible for requesting AWS return a list of resources by their unique identifier. That would mean that when querying EC2 instances, it should return a list of instance-ids. If we were to query CloudFormation, then stacks are what would be returned. Detail functions should provide you an output of one or more attributes. eg. instance-asg(), instance-state() Action functions should perform an action against a resource. An action for an EC2 instance may be something like terminate or associate_eip . e.g. stack-create(), instance-terminate(), asg-suspend() There are some great things about bash-my-aws which I would hate to lose. It's easy to look at the code and learn how awscli works. Simple tasks have simple commands. It's really easy to extend. stdin should always be supported. You should be able to pipe one function into the next with ease. If an action function cannot be piped the output of a query function and have it work, without manipulation though other tools, then something is wrong. Namespacing \u00b6 We've decided to namespace functions by the resource they're concerned with. Yes, this may seem a bit like postgres naming their command createdb but that's OK. bash-my-aws reduces my keystrokes. We'll work something out if this becomes a problem. stack-asgs stack-elbs stack-outputs stack-tags stack-validate stack-create stack-events stack-parameters stack-tail stacks stack-delete stack-failure stack-resources stack-template stack-diff stack-instances stack-status stack-update instance-asg instance-ssh instance-stop instance-volumes instance-console instance-ssh-details instance-tags instances instance-dns instance-stack instance-terminate instance-iam-profile instance-start instance-type instance-ip instance-state instance-userdata asg-capacity asg-max-size-set asg-resume asgs asg-desired-size-set asg-min-size-set asg-suspend asg-instances asg-processes_suspended asgard Resources \u00b6 This is a partial list of resources, with possible alternative names in brackets. asg (autoscaling_group) bucket elb (load_balancer) instance instance_type rds (relational_database) dynamodb (relational_database) sg (security_group) stack (cloudformation_stack) Query Functions \u00b6 Query functions are always namespaced under the plural of the resource. Default Query \u00b6 TODO: lets talk about the details. Some example usage of this function would be: $ <resources> resource_id1 attribute attribute resource_id2 attribute attribute resource_id3 attribute attribute Detail Functions \u00b6 Detail functions are always namespaced under the singular of the resource. Some example usage of this function would be: $ <resource> <resource_id> attribute1: value1 attribute2: value2 Some example responses: $ instance_security_groups i-abcd1234 sg-00000001 i-abcd1234 sg-00000002 i-abcd1234 sg-00000003 i-abcd1234 sg-00000004 i-abcd1234 $ security_group_rules TODO: I'm not sure yet how to present a security group rule. $ instance_type i-abcd1234 c3.large i-abcd1234 $ instance_type_memory c3.large 3.75 c3.large Action Functions \u00b6 Action functions are always namespaced under the singular of the resource and are suffixed with the action they are responsible for undertaking. Some example usage of this function would be: $ <resource>_<action> <resource_id> Tests \u00b6 You can start the test suite by running the command make test . STDIN \u00b6 The first word of each line must be a resource. Additional information will be disregarded.","title":"bash-my-aws development guide."},{"location":"developer-guide/#bash-my-aws-development-guide","text":"There are three distinct classes of functions types within bash-my-aws ; query , detail , and action functions. Query functions are responsible for requesting AWS return a list of resources by their unique identifier. That would mean that when querying EC2 instances, it should return a list of instance-ids. If we were to query CloudFormation, then stacks are what would be returned. Detail functions should provide you an output of one or more attributes. eg. instance-asg(), instance-state() Action functions should perform an action against a resource. An action for an EC2 instance may be something like terminate or associate_eip . e.g. stack-create(), instance-terminate(), asg-suspend() There are some great things about bash-my-aws which I would hate to lose. It's easy to look at the code and learn how awscli works. Simple tasks have simple commands. It's really easy to extend. stdin should always be supported. You should be able to pipe one function into the next with ease. If an action function cannot be piped the output of a query function and have it work, without manipulation though other tools, then something is wrong.","title":"bash-my-aws development guide."},{"location":"developer-guide/#namespacing","text":"We've decided to namespace functions by the resource they're concerned with. Yes, this may seem a bit like postgres naming their command createdb but that's OK. bash-my-aws reduces my keystrokes. We'll work something out if this becomes a problem. stack-asgs stack-elbs stack-outputs stack-tags stack-validate stack-create stack-events stack-parameters stack-tail stacks stack-delete stack-failure stack-resources stack-template stack-diff stack-instances stack-status stack-update instance-asg instance-ssh instance-stop instance-volumes instance-console instance-ssh-details instance-tags instances instance-dns instance-stack instance-terminate instance-iam-profile instance-start instance-type instance-ip instance-state instance-userdata asg-capacity asg-max-size-set asg-resume asgs asg-desired-size-set asg-min-size-set asg-suspend asg-instances asg-processes_suspended asgard","title":"Namespacing"},{"location":"developer-guide/#resources","text":"This is a partial list of resources, with possible alternative names in brackets. asg (autoscaling_group) bucket elb (load_balancer) instance instance_type rds (relational_database) dynamodb (relational_database) sg (security_group) stack (cloudformation_stack)","title":"Resources"},{"location":"developer-guide/#query-functions","text":"Query functions are always namespaced under the plural of the resource.","title":"Query Functions"},{"location":"developer-guide/#default-query","text":"TODO: lets talk about the details. Some example usage of this function would be: $ <resources> resource_id1 attribute attribute resource_id2 attribute attribute resource_id3 attribute attribute","title":"Default Query"},{"location":"developer-guide/#detail-functions","text":"Detail functions are always namespaced under the singular of the resource. Some example usage of this function would be: $ <resource> <resource_id> attribute1: value1 attribute2: value2 Some example responses: $ instance_security_groups i-abcd1234 sg-00000001 i-abcd1234 sg-00000002 i-abcd1234 sg-00000003 i-abcd1234 sg-00000004 i-abcd1234 $ security_group_rules TODO: I'm not sure yet how to present a security group rule. $ instance_type i-abcd1234 c3.large i-abcd1234 $ instance_type_memory c3.large 3.75 c3.large","title":"Detail Functions"},{"location":"developer-guide/#action-functions","text":"Action functions are always namespaced under the singular of the resource and are suffixed with the action they are responsible for undertaking. Some example usage of this function would be: $ <resource>_<action> <resource_id>","title":"Action Functions"},{"location":"developer-guide/#tests","text":"You can start the test suite by running the command make test .","title":"Tests"},{"location":"developer-guide/#stdin","text":"The first word of each line must be a resource. Additional information will be disregarded.","title":"STDIN"},{"location":"style/","text":"bash-my-aws style guide \u00b6 Always quote \"$variables\" Only use parentheses around variables when not surrounded with whitespace (better way to phrase this?) use $(date) rather than \" date \" use [[ and ]] rather than [ , ] , or test show errors with __bma_error() show usage options with __bma_usage() parse inputs with __bma_read_inputs() regenerate and test the bash_completion script after adding new functions","title":"Style"},{"location":"style/#bash-my-aws-style-guide","text":"Always quote \"$variables\" Only use parentheses around variables when not surrounded with whitespace (better way to phrase this?) use $(date) rather than \" date \" use [[ and ]] rather than [ , ] , or test show errors with __bma_error() show usage options with __bma_usage() parse inputs with __bma_read_inputs() regenerate and test the bash_completion script after adding new functions","title":"bash-my-aws style guide"},{"location":"tour/","text":"Tour \u00b6 Check this out!","title":"Tour"},{"location":"tour/#tour","text":"Check this out!","title":"Tour"}]}