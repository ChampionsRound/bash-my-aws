{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"bash-my-aws is a simple but extremely powerful set of CLI commands for managing resources on Amazon Web Services. They harness the power of Amazon's AWSCLI, while abstracting away verbosity. The project implements some innovative patterns but (arguably) remains simple, beautiful and readable. Introduction \u00b6 Short, Memorable Commands Shell Command Completion (including AWS resources) Unix Pipeline Friendly (instead of JSON) Convenient Shortcuts Short, Memorable Commands \u00b6 There are two main types of commands. 1. Resource Listing Commands These generally consist of the pluralised form of the resource name. $ buckets example-assets 2019 -12-08 02 :35:44.758551 example-logs 2019 -12-08 02 :35:52.669771 example-backups 2019 -12-08 02 :35:56.579434 $ stacks nagios CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres01 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED prometheus CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED $ keypairs alice 8f:85:9a:1e:6c:76:29:34:37:45:de:7f:8d:f9:70:eb bob 56 :73:29:c2:ad:7b:6f:b6:f2:f3:b4:de:e4:2b:12:d4 carol 29 :4e:1c:cb:ba:d4:85:0e:4f:b6:34:4c:d4:79:32:00 2. Resource detail/action commands These generally consist of a resource name and action separated by a hyphen. This makes discovering them via shell completion simple. Some retrieve information about resources while others make changes to them. $ keypair-delete alice bob You are about to delete the following EC2 SSH KeyPairs: alice bob Are you sure you want to continue ? y See the Command Reference for a full list of commands. Shell Command Completion \u00b6 In the example above, shell autocompletion retrieved the existing EC2 Keypair names ( alice , bob ) from AWS. This helps avoid the need to rely on human memory or terminal copypasta. Unix Pipeline Friendly \u00b6 The commands themselves are line oriented and work nicely in unix pipelines with other unix commands (e.g. grep , awk , etc). $ stacks | grep postgres postgres01 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED They also work incredibly well with each other due to the way they treat input from STDIN. The first token from each line of STDIN is taken to be a resource identifiers (and the rest is discarded). $ stacks | grep postgres | stack-delete You are about to delete the following stacks: postgres01 postgres02 Are you sure you want to continue ? y Some users have compared this User Experience to functionality in Windows Powershell. Convenient Shortcuts \u00b6 bash-my-aws is insanely simple to pick up and start using but contains a lot of convenient shortcuts you can make use of. Example: resource listing commands accept a filter argument, removing the need for | grep . In the following example someone has given a CloudFormation stack a really long name: $ stacks nagios CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres01 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED prometheus CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED stack-with-a-annoyingly-long-name CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED This affects the output when we look at our postgress stacks: $ stacks | grep postgres postgres01 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED The resource listing command can filter output before applying column . $ stacks postgres postgres01 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED Quickstart \u00b6 Prerequisites \u00b6 awscli bash jq-1.4 or later (for stack-diff) Installation \u00b6 As shown below, you may simply clone the GitHub repo and source the files required. (You should probably fork it instead to keep your customisations) $ git clone https://github.com/bash-my-universe/bash-my-aws.git ~/.bash-my-aws Put the following in your shell's startup file: export PATH = \" $PATH : $HOME /.bash-my-aws/bin\" source ~/.bash-my-aws/aliases # For ZSH users, uncomment the following two lines: # autoload -U +X compinit && compinit # autoload -U +X bashcompinit && bashcompinit source ~/.bash-my-aws/bash_completion.sh Why use shell aliases? bash-my-aws began as a collection of bash functions, sourced into your shell. More recently, the default suggestion has been to load aliases that execute a small wrapper script that loads the functions and executes the desired function. After years of zsh users asking for support, one stepped up and identified a changes that would eliminate any shell compatibility problems without compromising the functionaility, simplicity and discoverability of the project. Massive thanks to @ninth-dev for this. # bash users may source the functions instead of loading the aliases if [ -d ${HOME}/.bash-my-aws ]; then for f in ~/.bash-my-aws/lib/*-functions; do source $f; done fi Usage \u00b6 Running Commands \u00b6 The default way to run the commands is using the aliases: $ instances i-e6f097f6ea4457757 ami-123456789012 t3.nano running example-ec2-ap-southeast-2 2019-12-07T08:12:00.000Z ap-southeast-2a None i-b983805b4b254f749 ami-123456789012 t3.nano running postfix-prod 2019-12-07T08:26:30.000Z ap-southeast-2a None i-fed39ebe7204dfd37 ami-123456789012 t3.nano running postfix-prod 2019-12-07T08:26:34.000Z ap-southeast-2a None i-47955eb46d98b4dd8 ami-123456789012 t3.nano running prometheus 2019-12-07T08:27:02.000Z ap-southeast-2a None i-8d25b78d40d17f38a ami-123456789012 t3.nano running plex-server 2019-12-07T08:27:38.000Z ap-southeast-2a None It's also possible to run them using the bma wrapper. (This is sometimes required when using a restrictive auth tool.) $ bma instances i-e6f097f6ea4457757 ami-123456789012 t3.nano running example-ec2-ap-southeast-2 2019-12-07T08:12:00.000Z ap-southeast-2a None i-b983805b4b254f749 ami-123456789012 t3.nano running postfix-prod 2019-12-07T08:26:30.000Z ap-southeast-2a None i-fed39ebe7204dfd37 ami-123456789012 t3.nano running postfix-prod 2019-12-07T08:26:34.000Z ap-southeast-2a None i-47955eb46d98b4dd8 ami-123456789012 t3.nano running prometheus 2019-12-07T08:27:02.000Z ap-southeast-2a None i-8d25b78d40d17f38a ami-123456789012 t3.nano running plex-server 2019-12-07T08:27:38.000Z ap-southeast-2a None Discovering Commands \u00b6 For each resource type, there is a command to list them: $ instances i-e6f097f6ea4457757 ami-123456789012 t3.nano running example-ec2-ap-southeast-2 2019 -12-07T08:12:00.000Z ap-southeast-2a None i-b983805b4b254f749 ami-123456789012 t3.nano running postfix-prod 2019 -12-07T08:26:30.000Z ap-southeast-2a None i-fed39ebe7204dfd37 ami-123456789012 t3.nano running postfix-prod 2019 -12-07T08:26:34.000Z ap-southeast-2a None i-47955eb46d98b4dd8 ami-123456789012 t3.nano running prometheus 2019 -12-07T08:27:02.000Z ap-southeast-2a None i-8d25b78d40d17f38a ami-123456789012 t3.nano running plex-server 2019 -12-07T08:27:38.000Z ap-southeast-2a None and a number of command to act on these resources: $ instance-[TAB][TAB] instance-asg instance-ssh-details instance-termination-protection instance-az instance-stack instance-termination-protection-disable instance-console instance-start instance-termination-protection-enable instance-dns instance-state instance-type instance-iam-profile instance-stop instance-userdata instance-ip instance-tags instance-volumes instance-ssh instance-terminate instance-vpc Whether you're new to the tools or just have a bad memory, bash completion makes discovering these commands simple. See the Command Reference for a full list with usage examples Piping Between Commands \u00b6 This is where the magic happens! The first token on each line is almost always a resource identifier. When you pipe output between the commands they just take the first token from each line. $ instances | grep postfix | instance-ip i-b983805b4b254f749 10.190.1.70 54.214.71.51 i-fed39ebe7204dfd37 10.135.204.82 54.214.26.190 Note Most commands that list resources ( stacks , instances , etc) accept filter term as first arg. As well as reducing keystrokes, it can also improve output as columnisation is done after filtering. $ instances postfix | instance-ip i-b983805b4b254f749 10.190.1.70 54.214.71.51 i-fed39ebe7204dfd37 10.135.204.82 54.214.26.190 Inspecting Commands \u00b6 For those interested in how it works: Each command is a bash function. Most are very simple and wrap an AWSCLI command. For a quick look at how a command works, you can use bma type : $ bma type instances instances is a function instances () { local instance_ids = $( __bma_read_inputs ) ; local filters = $( __bma_read_filters $@ ) ; aws ec2 describe-instances $( [[ -n ${ instance_ids } ]] && echo --instance-ids ${ instance_ids } ) --query \" Reservations[].Instances[][ InstanceId, ImageId, InstanceType, State.Name, [Tags[?Key=='Name'].Value][0][0], LaunchTime, Placement.AvailabilityZone, VpcId ]\" --output text | grep -E -- \" $filters \" | LC_ALL = C sort -b -k 6 | column -s ' ' -t } A prettier version can be found in the source code: # ~/.bash-my-aws/lib/instance-functions instances () { local instance_ids = $( __bma_read_inputs ) local filters = $( __bma_read_filters $@ ) aws ec2 describe-instances \\ $( [[ -n ${ instance_ids } ]] && echo --instance-ids ${ instance_ids } ) \\ --query \" Reservations[].Instances[][ InstanceId, ImageId, InstanceType, State.Name, [Tags[?Key=='Name'].Value][0][0], LaunchTime, Placement.AvailabilityZone, VpcId ]\" \\ --output text | grep -E -- \" $filters \" | LC_ALL = C sort -b -k 6 | column -s $'\\t' -t } For more info on AWSCLI query syntax, check out http://jmespath.org/tutorial.html","title":"Home"},{"location":"#introduction","text":"Short, Memorable Commands Shell Command Completion (including AWS resources) Unix Pipeline Friendly (instead of JSON) Convenient Shortcuts","title":"Introduction"},{"location":"#short-memorable-commands","text":"There are two main types of commands. 1. Resource Listing Commands These generally consist of the pluralised form of the resource name. $ buckets example-assets 2019 -12-08 02 :35:44.758551 example-logs 2019 -12-08 02 :35:52.669771 example-backups 2019 -12-08 02 :35:56.579434 $ stacks nagios CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres01 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED prometheus CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED $ keypairs alice 8f:85:9a:1e:6c:76:29:34:37:45:de:7f:8d:f9:70:eb bob 56 :73:29:c2:ad:7b:6f:b6:f2:f3:b4:de:e4:2b:12:d4 carol 29 :4e:1c:cb:ba:d4:85:0e:4f:b6:34:4c:d4:79:32:00 2. Resource detail/action commands These generally consist of a resource name and action separated by a hyphen. This makes discovering them via shell completion simple. Some retrieve information about resources while others make changes to them. $ keypair-delete alice bob You are about to delete the following EC2 SSH KeyPairs: alice bob Are you sure you want to continue ? y See the Command Reference for a full list of commands.","title":"Short, Memorable Commands"},{"location":"#shell-command-completion","text":"In the example above, shell autocompletion retrieved the existing EC2 Keypair names ( alice , bob ) from AWS. This helps avoid the need to rely on human memory or terminal copypasta.","title":"Shell Command Completion"},{"location":"#unix-pipeline-friendly","text":"The commands themselves are line oriented and work nicely in unix pipelines with other unix commands (e.g. grep , awk , etc). $ stacks | grep postgres postgres01 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED They also work incredibly well with each other due to the way they treat input from STDIN. The first token from each line of STDIN is taken to be a resource identifiers (and the rest is discarded). $ stacks | grep postgres | stack-delete You are about to delete the following stacks: postgres01 postgres02 Are you sure you want to continue ? y Some users have compared this User Experience to functionality in Windows Powershell.","title":"Unix Pipeline Friendly"},{"location":"#convenient-shortcuts","text":"bash-my-aws is insanely simple to pick up and start using but contains a lot of convenient shortcuts you can make use of. Example: resource listing commands accept a filter argument, removing the need for | grep . In the following example someone has given a CloudFormation stack a really long name: $ stacks nagios CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres01 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED prometheus CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED stack-with-a-annoyingly-long-name CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED This affects the output when we look at our postgress stacks: $ stacks | grep postgres postgres01 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED The resource listing command can filter output before applying column . $ stacks postgres postgres01 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED postgres02 DELETE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED","title":"Convenient Shortcuts"},{"location":"#quickstart","text":"","title":"Quickstart"},{"location":"#prerequisites","text":"awscli bash jq-1.4 or later (for stack-diff)","title":"Prerequisites"},{"location":"#installation","text":"As shown below, you may simply clone the GitHub repo and source the files required. (You should probably fork it instead to keep your customisations) $ git clone https://github.com/bash-my-universe/bash-my-aws.git ~/.bash-my-aws Put the following in your shell's startup file: export PATH = \" $PATH : $HOME /.bash-my-aws/bin\" source ~/.bash-my-aws/aliases # For ZSH users, uncomment the following two lines: # autoload -U +X compinit && compinit # autoload -U +X bashcompinit && bashcompinit source ~/.bash-my-aws/bash_completion.sh Why use shell aliases? bash-my-aws began as a collection of bash functions, sourced into your shell. More recently, the default suggestion has been to load aliases that execute a small wrapper script that loads the functions and executes the desired function. After years of zsh users asking for support, one stepped up and identified a changes that would eliminate any shell compatibility problems without compromising the functionaility, simplicity and discoverability of the project. Massive thanks to @ninth-dev for this. # bash users may source the functions instead of loading the aliases if [ -d ${HOME}/.bash-my-aws ]; then for f in ~/.bash-my-aws/lib/*-functions; do source $f; done fi","title":"Installation"},{"location":"#usage","text":"","title":"Usage"},{"location":"#running-commands","text":"The default way to run the commands is using the aliases: $ instances i-e6f097f6ea4457757 ami-123456789012 t3.nano running example-ec2-ap-southeast-2 2019-12-07T08:12:00.000Z ap-southeast-2a None i-b983805b4b254f749 ami-123456789012 t3.nano running postfix-prod 2019-12-07T08:26:30.000Z ap-southeast-2a None i-fed39ebe7204dfd37 ami-123456789012 t3.nano running postfix-prod 2019-12-07T08:26:34.000Z ap-southeast-2a None i-47955eb46d98b4dd8 ami-123456789012 t3.nano running prometheus 2019-12-07T08:27:02.000Z ap-southeast-2a None i-8d25b78d40d17f38a ami-123456789012 t3.nano running plex-server 2019-12-07T08:27:38.000Z ap-southeast-2a None It's also possible to run them using the bma wrapper. (This is sometimes required when using a restrictive auth tool.) $ bma instances i-e6f097f6ea4457757 ami-123456789012 t3.nano running example-ec2-ap-southeast-2 2019-12-07T08:12:00.000Z ap-southeast-2a None i-b983805b4b254f749 ami-123456789012 t3.nano running postfix-prod 2019-12-07T08:26:30.000Z ap-southeast-2a None i-fed39ebe7204dfd37 ami-123456789012 t3.nano running postfix-prod 2019-12-07T08:26:34.000Z ap-southeast-2a None i-47955eb46d98b4dd8 ami-123456789012 t3.nano running prometheus 2019-12-07T08:27:02.000Z ap-southeast-2a None i-8d25b78d40d17f38a ami-123456789012 t3.nano running plex-server 2019-12-07T08:27:38.000Z ap-southeast-2a None","title":"Running Commands"},{"location":"#discovering-commands","text":"For each resource type, there is a command to list them: $ instances i-e6f097f6ea4457757 ami-123456789012 t3.nano running example-ec2-ap-southeast-2 2019 -12-07T08:12:00.000Z ap-southeast-2a None i-b983805b4b254f749 ami-123456789012 t3.nano running postfix-prod 2019 -12-07T08:26:30.000Z ap-southeast-2a None i-fed39ebe7204dfd37 ami-123456789012 t3.nano running postfix-prod 2019 -12-07T08:26:34.000Z ap-southeast-2a None i-47955eb46d98b4dd8 ami-123456789012 t3.nano running prometheus 2019 -12-07T08:27:02.000Z ap-southeast-2a None i-8d25b78d40d17f38a ami-123456789012 t3.nano running plex-server 2019 -12-07T08:27:38.000Z ap-southeast-2a None and a number of command to act on these resources: $ instance-[TAB][TAB] instance-asg instance-ssh-details instance-termination-protection instance-az instance-stack instance-termination-protection-disable instance-console instance-start instance-termination-protection-enable instance-dns instance-state instance-type instance-iam-profile instance-stop instance-userdata instance-ip instance-tags instance-volumes instance-ssh instance-terminate instance-vpc Whether you're new to the tools or just have a bad memory, bash completion makes discovering these commands simple. See the Command Reference for a full list with usage examples","title":"Discovering Commands"},{"location":"#piping-between-commands","text":"This is where the magic happens! The first token on each line is almost always a resource identifier. When you pipe output between the commands they just take the first token from each line. $ instances | grep postfix | instance-ip i-b983805b4b254f749 10.190.1.70 54.214.71.51 i-fed39ebe7204dfd37 10.135.204.82 54.214.26.190 Note Most commands that list resources ( stacks , instances , etc) accept filter term as first arg. As well as reducing keystrokes, it can also improve output as columnisation is done after filtering. $ instances postfix | instance-ip i-b983805b4b254f749 10.190.1.70 54.214.71.51 i-fed39ebe7204dfd37 10.135.204.82 54.214.26.190","title":"Piping Between Commands"},{"location":"#inspecting-commands","text":"For those interested in how it works: Each command is a bash function. Most are very simple and wrap an AWSCLI command. For a quick look at how a command works, you can use bma type : $ bma type instances instances is a function instances () { local instance_ids = $( __bma_read_inputs ) ; local filters = $( __bma_read_filters $@ ) ; aws ec2 describe-instances $( [[ -n ${ instance_ids } ]] && echo --instance-ids ${ instance_ids } ) --query \" Reservations[].Instances[][ InstanceId, ImageId, InstanceType, State.Name, [Tags[?Key=='Name'].Value][0][0], LaunchTime, Placement.AvailabilityZone, VpcId ]\" --output text | grep -E -- \" $filters \" | LC_ALL = C sort -b -k 6 | column -s ' ' -t } A prettier version can be found in the source code: # ~/.bash-my-aws/lib/instance-functions instances () { local instance_ids = $( __bma_read_inputs ) local filters = $( __bma_read_filters $@ ) aws ec2 describe-instances \\ $( [[ -n ${ instance_ids } ]] && echo --instance-ids ${ instance_ids } ) \\ --query \" Reservations[].Instances[][ InstanceId, ImageId, InstanceType, State.Name, [Tags[?Key=='Name'].Value][0][0], LaunchTime, Placement.AvailabilityZone, VpcId ]\" \\ --output text | grep -E -- \" $filters \" | LC_ALL = C sort -b -k 6 | column -s $'\\t' -t } For more info on AWSCLI query syntax, check out http://jmespath.org/tutorial.html","title":"Inspecting Commands"},{"location":"command-reference/","text":"General Rules Commands expect that $AWS_DEFAULT_REGION is set (check/set with region command) Most commands that list resources ( stacks , `instances , etc) accept filter term as first arg. e.g. stacks blah is equivalent to stacks | grep blah Most commands accept resource identifiers via STDIN (first token of each line) Resources are generally listed in chronological order of creation. aws-account-commands \u00b6 These functions target AWS Accounts and act on either the account you're authenticated to or the Account IDs provided to them. aws-account-alias \u00b6 Retrieve AWS Account Alias for current account $ aws-account-alias example-account-prod aws-account-id \u00b6 Retrieve AWS Account ID for current account $ aws-account-id 012345678901 aws-account-cost-explorer \u00b6 Use with an AWS Organisations Master Account to open multiple accounts in Cost Explorer $ grep demo AWS_ACCOUNTS | aws-account-cost-explorer #=> Opens web browser to AWS Cost Explorer with accounts selected aws-account-cost-recommendations \u00b6 Use with an AWS Organisations Master Account to open multiple accounts in Cost Recommendations $ grep non_prod AWS_ACCOUNTS | aws-account-each stacks FAILED #=> Opens web browser to AWS Cost Recommendations with accounts selected aws-account-each \u00b6 Run a script/command across a number of AWS Accounts $ grep non_prod AWS_ACCOUNTS | aws-account-each stacks FAILED # account=012345678901 alias=example-account-prod example-stack1-prod CREATED_FAILED example-stack2-prod UPDATE_ROLLBACK_FAILED # account=123456789012 alias=example-account-staging example-stack1-staging CREATED_FAILED example-stack2-staging UPDATE_ROLLBACK_FAILED Note In order to use aws-account-each , you need to be authenticated with an IAM Role that can assume a Role in each of the specified accounts. Check the source for more info. region-commands \u00b6 regions \u00b6 List regions $ regions ap-northeast-1 ap-northeast-2 ap-south-1 ap-southeast-1 ap-southeast-2 ca-central-1 cn-north-1 eu-central-1 eu-west-1 eu-west-2 sa-east-1 us-east-1 us-east-2 us-gov-west-1 us-west-1 us-west-2 region \u00b6 Get/Set $AWS_DEFAULT_REGION shell environment variable $ region us-east-1 $ region ap-southeast-2 $ region ap-southeast-2 region-each \u00b6 Run a command in every region. Any output lines will be appended with \"#${REGION}\". $ region-each stacks | column -t example-ec2-ap-northeast-1 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #ap-northeast-1 example-ec2-ap-northeast-2 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #ap-northeast-2 example-ec2-ap-south-1 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #ap-south-1 example-ec2-ap-southeast-1 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #ap-southeast-1 example-ec2-ap-southeast-2 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #ap-southeast-2 example-ec2-ca-central-1 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #ca-central-1 example-ec2-eu-central-1 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #eu-central-1 example-ec2-eu-west-1 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #eu-west-1 example-ec2-eu-west-2 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #eu-west-2 example-ec2-sa-east-1 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #sa-east-1 example-ec2-us-east-1 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #us-east-1 example-ec2-us-east-2 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #us-east-2 example-ec2-us-west-1 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #us-west-1 example-ec2-us-west-2 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #us-west-2 stack-commands \u00b6 Act on CloudFormation stacks. This was where bash-my-aws started back in 2014. A few of these functions do not yet accept multiple stacks as piped input. stacks \u00b6 List CloudFormation stacks. $ stacks nagios CREATE_COMPLETE 2018 -03-12T11:41:31Z NEVER_UPDATED NOT_NESTED postgres01 CREATE_COMPLETE 2019 -04-14T15:22:44Z NEVER_UPDATED NOT_NESTED postgres02 CREATE_COMPLETE 2019 -05-18T05:45:50Z NEVER_UPDATED NOT_NESTED prometheus-web CREATE_COMPLETE 2019 -11-23T15:57:04Z NEVER_UPDATED NOT_NESTED Optionally provide a filter string for a | grep effect with tighter columisation: $ stacks postgres postgres01 CREATE_COMPLETE 2019 -04-14T15:22:44Z NEVER_UPDATED NOT_NESTED postgres02 CREATE_COMPLETE 2019 -05-18T05:45:50Z NEVER_UPDATED NOT_NESTED stack-arn \u00b6 USAGE: stack-arn stack [stack] Returns ARN(s) for stacks. $ stack-arn nagios prometheus-web arn:aws:cloudformation:us-east-1:000000000000:stack/prometheus-web/805e081c-b8eb-4f6c-9872-2b5cddc77fba Supports multiple stack names from STDIN : $ stacks | stack-arn arn:aws:cloudformation:us-east-1:000000000000:stack/nagios/c0f0ef04-b505-4c0c-87cd-ca924153ad1c arn:aws:cloudformation:us-east-1:000000000000:stack/postgres01/758b0ba2-60f2-4432-8935-f79f47708f23 arn:aws:cloudformation:us-east-1:000000000000:stack/postgres02/7420bbd4-3026-444f-b55b-fa0a9d564730 arn:aws:cloudformation:us-east-1:000000000000:stack/prometheus-web/805e081c-b8eb-4f6c-9872-2b5cddc77fba stack-asg-instances \u00b6 USAGE: stack-asg-instances stack [stack] $ stacks | stack-asg-instances i-06ee900565652ecc5 ami-0119aa4d67e59007c t3.nano running asg-bash-my-aws 2019 -12-13T03:15:22.000Z ap-southeast-2c vpc-deb8edb9 i-01c7edb986c18c16a ami-0119aa4d67e59007c t3.nano running asg2 2019 -12-13T03:37:51.000Z ap-southeast-2c vpc-deb8edb9 stack-asgs \u00b6 USAGE: stack-asgs stack [stack] $ stacks | stack-asgs asg-bash-my-aws-AutoScalingGroup-MSBCWRTI3PVM AWS::AutoScaling::AutoScalingGroup asg-bash-my-aws asg2-AutoScalingGroup-1FHUVUJ7SLPU7 AWS::AutoScaling::AutoScalingGroup asg2 stack-cancel-update \u00b6 stack-create \u00b6 stack-delete \u00b6 stack-diff \u00b6 stack-elbs \u00b6 USAGE: stack-elbs stack [stack] $ stacks | stack-elbs elb-MyLoadBalancer-NA5S72MLA5KI AWS::ElasticLoadBalancing::LoadBalancer elb-stack-1 load-bala-MyLoadBa-11HZ0DHUHJZZI AWS::ElasticLoadBalancing::LoadBalancer elb-stack-2 stack-events \u00b6 stack-exports \u00b6 stack-failure \u00b6 stack-instances \u00b6 USAGE: stack-instances stack [stack] $ stacks | stack-instances i-7d54924538baa7a1f ami-123456789012 t3.nano stopped ec2 2019 -12-11T09:31:03.000Z ap-southeast-2a None i-c54279c6055c3c794 ami-123456789012 t3.nano running nagios 2019 -12-13T02:24:30.000Z ap-southeast-2a None i-a8b8dd6783e1a40cc ami-123456789012 t3.nano running postgres01 2019 -12-13T02:24:32.000Z ap-southeast-2a None i-5d74753e210bfe04d ami-123456789012 t3.nano running postgres02 2019 -12-13T02:24:34.000Z ap-southeast-2a None i-2aa95cc214a461398 ami-123456789012 t3.nano running prometheus-web 2019 -12-13T02:24:36.000Z ap-southeast-2a None stack-outputs \u00b6 stack-parameters \u00b6 stack-recreate \u00b6 stack-resources \u00b6 USAGE: stack-resources stack [stack] $ stacks | stack-resources i-7d54924538baa7a1f AWS::EC2::Instance ec2 i-c54279c6055c3c794 AWS::EC2::Instance nagios i-a8b8dd6783e1a40cc AWS::EC2::Instance postgres01 i-5d74753e210bfe04d AWS::EC2::Instance postgres02 i-2aa95cc214a461398 AWS::EC2::Instance prometheus-web stack-status \u00b6 stack-tag \u00b6 stack-tag-apply \u00b6 stack-tag-delete \u00b6 stack-tags \u00b6 stack-tags-text \u00b6 stack-tail \u00b6 stack-template \u00b6 stack-update \u00b6 stack-validate \u00b6 instance-commands \u00b6 These commands work with EC2 Instances. While the USAGE line describes command line arguments, the examples tend to use STDIN to pass resource IDs because it's more common usage. instances \u00b6 Lists EC2 instances $ instances i-4e15ece1de1a3f869 ami-123456789012 t3.nano running nagios 2019 -12-10T08:17:18.000Z ap-southeast-2a None i-89cefa9403373d7a5 ami-123456789012 t3.nano running postgres01 2019 -12-10T08:17:20.000Z ap-southeast-2a None i-806d8f1592e2a2efd ami-123456789012 t3.nano running postgres02 2019 -12-10T08:17:22.000Z ap-southeast-2a None i-61e86ac6be1e2c193 ami-123456789012 t3.nano running prometheus-web 2019 -12-10T08:17:24.000Z ap-southeast-2a None Optionally provide a filter string for a | grep effect with tighter columisation: $ instances postgres i-89cefa9403373d7a5 ami-123456789012 t3.nano running postgres01 2019 -12-10T08:17:20.000Z ap-southeast-2a None i-806d8f1592e2a2efd ami-123456789012 t3.nano running postgres02 2019 -12-10T08:17:22.000Z ap-southeast-2a None instance-asg \u00b6 instance-az \u00b6 List Availability Zone(s) for EC2 Instance(s) USAGE: instance-az instance-id [instance-id] $ instances postgres | instance-az i-89cefa9403373d7a5 ap-southeast-2a i-806d8f1592e2a2efd ap-southeast-2a instance-console \u00b6 USAGE: instance-console instance-id [instance-id] $ instances postgres | instance-console Console output for EC2 Instance i-89cefa9403373d7a5 Linux version 2 .6.16-xenU ( builder@patchbat.amazonsa ) ( gcc version 4 .0.1 20050727 ( Red Hat 4 .0.1-5 )) #1 SMP Thu Oct 26 08:41:26 SAST 2006 BIOS-provided physical RAM map: Xen: 0000000000000000 - 000000006a400000 ( usable ) 980MB HIGHMEM available. 727MB LOWMEM available. NX ( Execute Disable ) protection: active IRQ lockup detection disabled Built 1 zonelists Kernel command line: root = /dev/sda1 ro 4 Enabling fast FPU save and restore... done . Console output for EC2 Instance i-806d8f1592e2a2efd Linux version 2 .6.16-xenU ( builder@patchbat.amazonsa ) ( gcc version 4 .0.1 20050727 ( Red Hat 4 .0.1-5 )) #1 SMP Thu Oct 26 08:41:26 SAST 2006 BIOS-provided physical RAM map: Xen: 0000000000000000 - 000000006a400000 ( usable ) 980MB HIGHMEM available. 727MB LOWMEM available. NX ( Execute Disable ) protection: active IRQ lockup detection disabled Built 1 zonelists Kernel command line: root = /dev/sda1 ro 4 Enabling fast FPU save and restore... done . instance-dns \u00b6 Get DNS entries for EC2 instances USAGE: instance-dns instance-id [instance-id] $ instances postgres | instance-dns i-89cefa9403373d7a5 ip-10-155-35-61.ap-southeast-2.compute.internal ec2-54-214-206-114.ap-southeast-2.compute.amazonaws.com i-806d8f1592e2a2efd ip-10-178-243-63.ap-southeast-2.compute.internal ec2-54-214-244-90.ap-southeast-2.compute.amazonaws.com instance-health-set-unhealthy \u00b6 instance-iam-profile \u00b6 instance-ip \u00b6 Get IP Addresses for EC2 instances USAGE: instance-ip instance-id [instance-id] $ instances postgres | instance-ip i-89cefa9403373d7a5 10 .155.35.61 54 .214.206.114 i-806d8f1592e2a2efd 10 .178.243.63 54 .214.244.90 instance-ssh \u00b6 instance-ssh-details \u00b6 instance-stack \u00b6 USAGE: instance-stack instance-id [instance-id] $ instances postgres | instance-stack postgres01 i-89cefa9403373d7a5 postgres02 i-806d8f1592e2a2efd instance-start \u00b6 Start some existing stopped EC2 instances. USAGE: instance-stop instance-id [instance-id] $ instances postgres | instance-start i-a8b8dd6783e1a40cc PreviousState = stopped CurrentState = pending i-5d74753e210bfe04d PreviousState = stopped CurrentState = pending instance-state \u00b6 Get current state of instances. USAGE: instance-state instance-id [instance-id] $ instances postgres | instance-state i-89cefa9403373d7a5 running i-806d8f1592e2a2efd running You could also just get this from instances command: $ instances postgres i-89cefa9403373d7a5 ami-123456789012 t3.nano running postgres01 2019 -12-10T08:17:20.000Z ap-southeast-2a None i-806d8f1592e2a2efd ami-123456789012 t3.nano running postgres02 2019 -12-10T08:17:22.000Z ap-southeast-2a None instance-stop \u00b6 Stop EC2 instances USAGE: instance-stop instance-id [instance-id] $ instances postgres | instance-stop i-a8b8dd6783e1a40cc PreviousState = running CurrentState = stopping i-5d74753e210bfe04d PreviousState = running CurrentState = stopping instance-tags \u00b6 instance-terminate \u00b6 Terminate EC2 instance(s). USAGE: instance-terminate instance-id [instance-id] $ instances | head -3 | instance-terminate You are about to terminate the following instances: i-01c7edb986c18c16a ami-0119aa4d67e59007c t3.nano terminated asg2 2019 -12-13T03:37:51.000Z ap-southeast-2c None i-012dded46894dfa04 ami-0119aa4d67e59007c t3.nano running ec2 2019 -12-13T10:12:55.000Z ap-southeast-2b vpc-deb8edb9 Are you sure you want to continue ? y i-06ee900565652ecc5 PreviousState = terminated CurrentState = terminated i-01c7edb986c18c16a PreviousState = terminated CurrentState = terminated i-012dded46894dfa04 PreviousState = running CurrentState = shutting-down instance-termination-protection \u00b6 USAGE: instance-termination-protection instance-id [instance-id] $ instances | instance-termination-protection i-4e15ece1de1a3f869 DisableApiTermination = true i-89cefa9403373d7a5 DisableApiTermination = false i-806d8f1592e2a2efd DisableApiTermination = false i-61e86ac6be1e2c193 DisableApiTermination = false instance-termination-protection-disable \u00b6 USAGE: instance-termination-protection-disable instance-id [instance-id] instance-termination-protection-enable \u00b6 USAGE: instance-termination-protection-enable instance-id [instance-id] instance-type \u00b6 List instance type for instances. You could also just view output of instances command USAGE: instance-type instance-id [instance-id] $ instances | instance-type i-4e15ece1de1a3f869 t3.nano i-89cefa9403373d7a5 t3.nano i-806d8f1592e2a2efd t3.nano i-61e86ac6be1e2c193 t3.nano instance-userdata \u00b6 instance-volumes \u00b6 USAGE: instance-volumes instance-id [instance-id] $ instances postgres | instance-volumes i-89cefa9403373d7a5 vol-cf5ddae9 i-806d8f1592e2a2efd vol-38fd45c3 instance-vpc \u00b6 USAGE: instance-vpc instance-id [instance-id] bucket-commands \u00b6 buckets \u00b6 List S3 Buckets $ buckets example-bucket 2019 -12-07 06 :51:05.064372 another-example-bucket 2019 -12-07 06 :51:12.022496 bucket-acls \u00b6 List S3 Bucket Access Control Lists. $ bucket-acls another-example-bucket another-example-bucket Note The only recommended use case for the bucket ACL is to grant write permission to the Amazon S3 Log Delivery group to write access log objects to your bucket. AWS docs bucket-remove \u00b6 Remove an empty S3 Bucket. In this example the bucket is not empty. $ bucket-remove another-example-bucket You are about to remove the following buckets: another-example-bucket 2019 -12-07 06 :51:12.022496 Are you sure you want to continue ? y remove_bucket failed: s3://another-example-bucket An error occurred ( BucketNotEmpty ) when calling the DeleteBucket operation: The bucket you tried to delete is not empty bucket-remove-force \u00b6 Remove an S3 Bucket, and delete all objects if it's not empty. $ bucket-remove-force another-example-bucket You are about to delete all objects from and remove the following buckets: another-example-bucket 2019 -12-07 06 :51:12.022496 Are you sure you want to continue ? y delete: s3://another-example-bucket/aliases remove_bucket: another-example-bucket cert-commands \u00b6 ACM Certificates certs \u00b6 cert-delete \u00b6 cert-users \u00b6 certs-arn \u00b6 ecr-commands \u00b6 ecr-repositories \u00b6 ecr-repository-images \u00b6 elb-commands \u00b6 EC2 Classic Load Balancers elbs \u00b6 $ elbs elb-MyLoadBalancer-1FNISWJN0W6N9 2019 -12-13T10:24:55.220Z subnet-eff2cf88 another-e-MyLoadBa-171CPCZF2E84T 2019 -12-13T10:25:24.300Z subnet-eff2cf88 elb-dnsname \u00b6 USAGE: elb-dnsname load-balancer $ elbs | elb-dnsname elb-MyLoadBalancer-1FNISWJN0W6N9 elb-MyLoadBalancer-1FNISWJN0W6N9-563832045.ap-southeast-2.elb.amazonaws.com another-e-MyLoadBa-171CPCZF2E84T another-e-MyLoadBa-171CPCZF2E84T-1832721930.ap-southeast-2.elb.amazonaws.com elb-instances \u00b6 elb-stack \u00b6 USAGE: elb-stack load-balancer [load-balancer] $ elbs | elb-stack elb elb-MyLoadBalancer-1FNISWJN0W6N9 another-elb another-e-MyLoadBa-171CPCZF2E84T iam-commands \u00b6 iam-roles \u00b6 iam-role-principal \u00b6 keypair-commands \u00b6 List, create and delete EC2 SSH Keypairs keypairs \u00b6 List EC2 SSH Keypairs in current Region $ keypairs alice 8f:85:9a:1e:6c:76:29:34:37:45:de:7f:8d:f9:70:eb bob 56 :73:29:c2:ad:7b:6f:b6:f2:f3:b4:de:e4:2b:12:d4 keypair-create \u00b6 Create SSH Keypair on local machine and import public key into new EC2 Keypair. Provides benefits over AWS creating the keypair: Amazon never has access to private key Private key is protected with passphrase before being written to disk Keys is written to ~/.ssh with correct file permissions You control the SSH Key type (algorithm, length, etc) $ keypair-create yet-another-keypair Creating /home/m/.ssh/yet-another-keypair Generating public/private rsa key pair. Enter passphrase ( empty for no passphrase ) : Enter same passphrase again: Your identification has been saved in /home/m/.ssh/yet-another-keypair. Your public key has been saved in /home/m/.ssh/yet-another-keypair.pub. The key fingerprint is: SHA256:zIpbxLo7rpQvKyezOLATk96B1kSL0QP41q6x8tUrySk m@localhost.localdomain The key ' s randomart image is: +--- [ RSA 4096 ] ----+ | ..o | | .. + | | .+.o | | .oo.. o | | o+. o S | | = o.+. = . | | +++ == o+ | | XoE+*+ . | | o@+**+. | +---- [ SHA256 ] -----+ { \"KeyFingerprint\" : \"21:82:f9:5b:79:d6:dc:0f:7b:79:43:7c:c5:34:6c:2d\" , \"KeyName\" : \"yet-another-keypair\" } Note KeyPair Name defaults to \"$(aws-account-alias)-$(region)\" if none provided keypair-delete \u00b6 Delete EC2 SSH Keypairs by providing their names as arguments or via STDIN $ keypair-delete alice bob You are about to delete the following EC2 SSH KeyPairs: alice bob Are you sure you want to continue ? y $ keypairs | keypair-delete You are about to delete the following EC2 SSH KeyPairs: yet-another-keypair Are you sure you want to continue ? y vpc-commands \u00b6 vpcs \u00b6 List VPCs $ vpcs vpc-018d9739 default-vpc NO_NAME 172 .31.0.0/16 NO_STACK NO_VERSION vpc-az-count \u00b6 List number of Availability Zones for VPCs USAGE: vpc-az-count vpc-id [vpc-id] $ vpcs | vpc-az-count vpc-018d9739 3 vpc-azs \u00b6 List availability zones for VPCs $ vpc-azs USAGE: vpc-azs vpc-id [vpc-id] $ vpcs | vpc-azs vpc-018d9739 ap-southeast-2a ap-southeast-2b ap-southeast-2c vpc-default-delete \u00b6 Prints commands you would need to run to delete that pesky default VPC $ vpc-default-delete # Deleting default VPC vpc-018d9739 in ap-southeast-2 aws --region ap-southeast-2 ec2 delete-subnet --subnet-id = subnet-8bb774fe aws --region ap-southeast-2 ec2 delete-subnet --subnet-id = subnet-9eea2c07 aws --region ap-southeast-2 ec2 delete-subnet --subnet-id = subnet-34fd9cfa aws --region ap-southeast-2 ec2 delete-vpc --vpc-id = vpc-018d9739 vpc-dhcp-options-ntp \u00b6 vpc-endpoints \u00b6 vpc-igw \u00b6 vpc-lambda-commands \u00b6 vpc-nat-gateways \u00b6 USAGE: vpc-nat-gateways vpc-id [vpc-id] vpc-network-acls \u00b6 USAGE: vpc-network-acls vpc-id [vpc-id] $ vpcs | vpc-network-acls acl-ff4914d1 vpc-018d9739 vpc-rds \u00b6 vpc-route-tables \u00b6 USAGE: vpc-route-tables vpc-id [vpc-id] $ vpcs | vpc-route-tables rtb-8e841c39 vpc-018d9739 NO_NAME vpc-subnets \u00b6 List subnets for vpcs USAGE: vpc-subnets vpc-id [vpc-id] $ vpcs | vpc-subnets subnet-34fd9cfa vpc-018d9739 ap-southeast-2c 172 .31.32.0/20 NO_NAME subnet-8bb774fe vpc-018d9739 ap-southeast-2a 172 .31.0.0/20 NO_NAME subnet-9eea2c07 vpc-018d9739 ap-southeast-2b 172 .31.16.0/20 NO_NAME pcxs \u00b6 List VPC Peering Connections subnets \u00b6 List all subnets $ subnets subnet-34fd9cfa vpc-018d9739 ap-southeast-2c 172 .31.32.0/20 NO_NAME subnet-8bb774fe vpc-018d9739 ap-southeast-2a 172 .31.0.0/20 NO_NAME subnet-9eea2c07 vpc-018d9739 ap-southeast-2b 172 .31.16.0/20 NO_NAME asg-commands \u00b6 asgs \u00b6 asg-capacity \u00b6 asg-desired-size-set \u00b6 asg-instances \u00b6 asg-launch-configuration \u00b6 asg-max-size-set \u00b6 asg-min-size-set \u00b6 asg-processes_suspended \u00b6 asg-resume \u00b6 asg-scaling-activities \u00b6 asg-stack \u00b6 asg-suspend \u00b6 launch-configurations \u00b6 launch-configuration-asgs \u00b6 lambda-commands \u00b6 lambda-commands \u00b6 lambda-function-memory \u00b6 lambda-function-memory-set \u00b6 lambda-function-memory-step \u00b6 Other \u00b6 cloudtrails \u00b6 cloudtrail-status \u00b6 columnise \u00b6 image-deregister \u00b6 images \u00b6 log-groups \u00b6 rds-db-instances \u00b6 sts-assume-role \u00b6 Internal functions \u00b6 __bma_error __bma_read_filters __bma_read_inputs __bma_read_stdin __bma_usage _bma_derive_params_from_stack_and_template _bma_derive_params_from_template _bma_derive_stack_from_params _bma_derive_stack_from_template _bma_derive_template_from_params _bma_derive_template_from_stack _bma_stack_args _bma_stack_capabilities _bma_stack_diff_params _bma_stack_diff_template _bma_stack_name_arg _bma_stack_params_arg _bma_stack_template_arg","title":"Command Reference"},{"location":"command-reference/#aws-account-commands","text":"These functions target AWS Accounts and act on either the account you're authenticated to or the Account IDs provided to them.","title":"aws-account-commands"},{"location":"command-reference/#aws-account-alias","text":"Retrieve AWS Account Alias for current account $ aws-account-alias example-account-prod","title":"aws-account-alias"},{"location":"command-reference/#aws-account-id","text":"Retrieve AWS Account ID for current account $ aws-account-id 012345678901","title":"aws-account-id"},{"location":"command-reference/#aws-account-cost-explorer","text":"Use with an AWS Organisations Master Account to open multiple accounts in Cost Explorer $ grep demo AWS_ACCOUNTS | aws-account-cost-explorer #=> Opens web browser to AWS Cost Explorer with accounts selected","title":"aws-account-cost-explorer"},{"location":"command-reference/#aws-account-cost-recommendations","text":"Use with an AWS Organisations Master Account to open multiple accounts in Cost Recommendations $ grep non_prod AWS_ACCOUNTS | aws-account-each stacks FAILED #=> Opens web browser to AWS Cost Recommendations with accounts selected","title":"aws-account-cost-recommendations"},{"location":"command-reference/#aws-account-each","text":"Run a script/command across a number of AWS Accounts $ grep non_prod AWS_ACCOUNTS | aws-account-each stacks FAILED # account=012345678901 alias=example-account-prod example-stack1-prod CREATED_FAILED example-stack2-prod UPDATE_ROLLBACK_FAILED # account=123456789012 alias=example-account-staging example-stack1-staging CREATED_FAILED example-stack2-staging UPDATE_ROLLBACK_FAILED Note In order to use aws-account-each , you need to be authenticated with an IAM Role that can assume a Role in each of the specified accounts. Check the source for more info.","title":"aws-account-each"},{"location":"command-reference/#region-commands","text":"","title":"region-commands"},{"location":"command-reference/#regions","text":"List regions $ regions ap-northeast-1 ap-northeast-2 ap-south-1 ap-southeast-1 ap-southeast-2 ca-central-1 cn-north-1 eu-central-1 eu-west-1 eu-west-2 sa-east-1 us-east-1 us-east-2 us-gov-west-1 us-west-1 us-west-2","title":"regions"},{"location":"command-reference/#region","text":"Get/Set $AWS_DEFAULT_REGION shell environment variable $ region us-east-1 $ region ap-southeast-2 $ region ap-southeast-2","title":"region"},{"location":"command-reference/#region-each","text":"Run a command in every region. Any output lines will be appended with \"#${REGION}\". $ region-each stacks | column -t example-ec2-ap-northeast-1 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #ap-northeast-1 example-ec2-ap-northeast-2 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #ap-northeast-2 example-ec2-ap-south-1 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #ap-south-1 example-ec2-ap-southeast-1 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #ap-southeast-1 example-ec2-ap-southeast-2 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #ap-southeast-2 example-ec2-ca-central-1 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #ca-central-1 example-ec2-eu-central-1 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #eu-central-1 example-ec2-eu-west-1 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #eu-west-1 example-ec2-eu-west-2 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #eu-west-2 example-ec2-sa-east-1 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #sa-east-1 example-ec2-us-east-1 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #us-east-1 example-ec2-us-east-2 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #us-east-2 example-ec2-us-west-1 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #us-west-1 example-ec2-us-west-2 CREATE_COMPLETE 2011 -05-23T15:47:44Z NEVER_UPDATED NOT_NESTED #us-west-2","title":"region-each"},{"location":"command-reference/#stack-commands","text":"Act on CloudFormation stacks. This was where bash-my-aws started back in 2014. A few of these functions do not yet accept multiple stacks as piped input.","title":"stack-commands"},{"location":"command-reference/#stacks","text":"List CloudFormation stacks. $ stacks nagios CREATE_COMPLETE 2018 -03-12T11:41:31Z NEVER_UPDATED NOT_NESTED postgres01 CREATE_COMPLETE 2019 -04-14T15:22:44Z NEVER_UPDATED NOT_NESTED postgres02 CREATE_COMPLETE 2019 -05-18T05:45:50Z NEVER_UPDATED NOT_NESTED prometheus-web CREATE_COMPLETE 2019 -11-23T15:57:04Z NEVER_UPDATED NOT_NESTED Optionally provide a filter string for a | grep effect with tighter columisation: $ stacks postgres postgres01 CREATE_COMPLETE 2019 -04-14T15:22:44Z NEVER_UPDATED NOT_NESTED postgres02 CREATE_COMPLETE 2019 -05-18T05:45:50Z NEVER_UPDATED NOT_NESTED","title":"stacks"},{"location":"command-reference/#stack-arn","text":"USAGE: stack-arn stack [stack] Returns ARN(s) for stacks. $ stack-arn nagios prometheus-web arn:aws:cloudformation:us-east-1:000000000000:stack/prometheus-web/805e081c-b8eb-4f6c-9872-2b5cddc77fba Supports multiple stack names from STDIN : $ stacks | stack-arn arn:aws:cloudformation:us-east-1:000000000000:stack/nagios/c0f0ef04-b505-4c0c-87cd-ca924153ad1c arn:aws:cloudformation:us-east-1:000000000000:stack/postgres01/758b0ba2-60f2-4432-8935-f79f47708f23 arn:aws:cloudformation:us-east-1:000000000000:stack/postgres02/7420bbd4-3026-444f-b55b-fa0a9d564730 arn:aws:cloudformation:us-east-1:000000000000:stack/prometheus-web/805e081c-b8eb-4f6c-9872-2b5cddc77fba","title":"stack-arn"},{"location":"command-reference/#stack-asg-instances","text":"USAGE: stack-asg-instances stack [stack] $ stacks | stack-asg-instances i-06ee900565652ecc5 ami-0119aa4d67e59007c t3.nano running asg-bash-my-aws 2019 -12-13T03:15:22.000Z ap-southeast-2c vpc-deb8edb9 i-01c7edb986c18c16a ami-0119aa4d67e59007c t3.nano running asg2 2019 -12-13T03:37:51.000Z ap-southeast-2c vpc-deb8edb9","title":"stack-asg-instances"},{"location":"command-reference/#stack-asgs","text":"USAGE: stack-asgs stack [stack] $ stacks | stack-asgs asg-bash-my-aws-AutoScalingGroup-MSBCWRTI3PVM AWS::AutoScaling::AutoScalingGroup asg-bash-my-aws asg2-AutoScalingGroup-1FHUVUJ7SLPU7 AWS::AutoScaling::AutoScalingGroup asg2","title":"stack-asgs"},{"location":"command-reference/#stack-cancel-update","text":"","title":"stack-cancel-update"},{"location":"command-reference/#stack-create","text":"","title":"stack-create"},{"location":"command-reference/#stack-delete","text":"","title":"stack-delete"},{"location":"command-reference/#stack-diff","text":"","title":"stack-diff"},{"location":"command-reference/#stack-elbs","text":"USAGE: stack-elbs stack [stack] $ stacks | stack-elbs elb-MyLoadBalancer-NA5S72MLA5KI AWS::ElasticLoadBalancing::LoadBalancer elb-stack-1 load-bala-MyLoadBa-11HZ0DHUHJZZI AWS::ElasticLoadBalancing::LoadBalancer elb-stack-2","title":"stack-elbs"},{"location":"command-reference/#stack-events","text":"","title":"stack-events"},{"location":"command-reference/#stack-exports","text":"","title":"stack-exports"},{"location":"command-reference/#stack-failure","text":"","title":"stack-failure"},{"location":"command-reference/#stack-instances","text":"USAGE: stack-instances stack [stack] $ stacks | stack-instances i-7d54924538baa7a1f ami-123456789012 t3.nano stopped ec2 2019 -12-11T09:31:03.000Z ap-southeast-2a None i-c54279c6055c3c794 ami-123456789012 t3.nano running nagios 2019 -12-13T02:24:30.000Z ap-southeast-2a None i-a8b8dd6783e1a40cc ami-123456789012 t3.nano running postgres01 2019 -12-13T02:24:32.000Z ap-southeast-2a None i-5d74753e210bfe04d ami-123456789012 t3.nano running postgres02 2019 -12-13T02:24:34.000Z ap-southeast-2a None i-2aa95cc214a461398 ami-123456789012 t3.nano running prometheus-web 2019 -12-13T02:24:36.000Z ap-southeast-2a None","title":"stack-instances"},{"location":"command-reference/#stack-outputs","text":"","title":"stack-outputs"},{"location":"command-reference/#stack-parameters","text":"","title":"stack-parameters"},{"location":"command-reference/#stack-recreate","text":"","title":"stack-recreate"},{"location":"command-reference/#stack-resources","text":"USAGE: stack-resources stack [stack] $ stacks | stack-resources i-7d54924538baa7a1f AWS::EC2::Instance ec2 i-c54279c6055c3c794 AWS::EC2::Instance nagios i-a8b8dd6783e1a40cc AWS::EC2::Instance postgres01 i-5d74753e210bfe04d AWS::EC2::Instance postgres02 i-2aa95cc214a461398 AWS::EC2::Instance prometheus-web","title":"stack-resources"},{"location":"command-reference/#stack-status","text":"","title":"stack-status"},{"location":"command-reference/#stack-tag","text":"","title":"stack-tag"},{"location":"command-reference/#stack-tag-apply","text":"","title":"stack-tag-apply"},{"location":"command-reference/#stack-tag-delete","text":"","title":"stack-tag-delete"},{"location":"command-reference/#stack-tags","text":"","title":"stack-tags"},{"location":"command-reference/#stack-tags-text","text":"","title":"stack-tags-text"},{"location":"command-reference/#stack-tail","text":"","title":"stack-tail"},{"location":"command-reference/#stack-template","text":"","title":"stack-template"},{"location":"command-reference/#stack-update","text":"","title":"stack-update"},{"location":"command-reference/#stack-validate","text":"","title":"stack-validate"},{"location":"command-reference/#instance-commands","text":"These commands work with EC2 Instances. While the USAGE line describes command line arguments, the examples tend to use STDIN to pass resource IDs because it's more common usage.","title":"instance-commands"},{"location":"command-reference/#instances","text":"Lists EC2 instances $ instances i-4e15ece1de1a3f869 ami-123456789012 t3.nano running nagios 2019 -12-10T08:17:18.000Z ap-southeast-2a None i-89cefa9403373d7a5 ami-123456789012 t3.nano running postgres01 2019 -12-10T08:17:20.000Z ap-southeast-2a None i-806d8f1592e2a2efd ami-123456789012 t3.nano running postgres02 2019 -12-10T08:17:22.000Z ap-southeast-2a None i-61e86ac6be1e2c193 ami-123456789012 t3.nano running prometheus-web 2019 -12-10T08:17:24.000Z ap-southeast-2a None Optionally provide a filter string for a | grep effect with tighter columisation: $ instances postgres i-89cefa9403373d7a5 ami-123456789012 t3.nano running postgres01 2019 -12-10T08:17:20.000Z ap-southeast-2a None i-806d8f1592e2a2efd ami-123456789012 t3.nano running postgres02 2019 -12-10T08:17:22.000Z ap-southeast-2a None","title":"instances"},{"location":"command-reference/#instance-asg","text":"","title":"instance-asg"},{"location":"command-reference/#instance-az","text":"List Availability Zone(s) for EC2 Instance(s) USAGE: instance-az instance-id [instance-id] $ instances postgres | instance-az i-89cefa9403373d7a5 ap-southeast-2a i-806d8f1592e2a2efd ap-southeast-2a","title":"instance-az"},{"location":"command-reference/#instance-console","text":"USAGE: instance-console instance-id [instance-id] $ instances postgres | instance-console Console output for EC2 Instance i-89cefa9403373d7a5 Linux version 2 .6.16-xenU ( builder@patchbat.amazonsa ) ( gcc version 4 .0.1 20050727 ( Red Hat 4 .0.1-5 )) #1 SMP Thu Oct 26 08:41:26 SAST 2006 BIOS-provided physical RAM map: Xen: 0000000000000000 - 000000006a400000 ( usable ) 980MB HIGHMEM available. 727MB LOWMEM available. NX ( Execute Disable ) protection: active IRQ lockup detection disabled Built 1 zonelists Kernel command line: root = /dev/sda1 ro 4 Enabling fast FPU save and restore... done . Console output for EC2 Instance i-806d8f1592e2a2efd Linux version 2 .6.16-xenU ( builder@patchbat.amazonsa ) ( gcc version 4 .0.1 20050727 ( Red Hat 4 .0.1-5 )) #1 SMP Thu Oct 26 08:41:26 SAST 2006 BIOS-provided physical RAM map: Xen: 0000000000000000 - 000000006a400000 ( usable ) 980MB HIGHMEM available. 727MB LOWMEM available. NX ( Execute Disable ) protection: active IRQ lockup detection disabled Built 1 zonelists Kernel command line: root = /dev/sda1 ro 4 Enabling fast FPU save and restore... done .","title":"instance-console"},{"location":"command-reference/#instance-dns","text":"Get DNS entries for EC2 instances USAGE: instance-dns instance-id [instance-id] $ instances postgres | instance-dns i-89cefa9403373d7a5 ip-10-155-35-61.ap-southeast-2.compute.internal ec2-54-214-206-114.ap-southeast-2.compute.amazonaws.com i-806d8f1592e2a2efd ip-10-178-243-63.ap-southeast-2.compute.internal ec2-54-214-244-90.ap-southeast-2.compute.amazonaws.com","title":"instance-dns"},{"location":"command-reference/#instance-health-set-unhealthy","text":"","title":"instance-health-set-unhealthy"},{"location":"command-reference/#instance-iam-profile","text":"","title":"instance-iam-profile"},{"location":"command-reference/#instance-ip","text":"Get IP Addresses for EC2 instances USAGE: instance-ip instance-id [instance-id] $ instances postgres | instance-ip i-89cefa9403373d7a5 10 .155.35.61 54 .214.206.114 i-806d8f1592e2a2efd 10 .178.243.63 54 .214.244.90","title":"instance-ip"},{"location":"command-reference/#instance-ssh","text":"","title":"instance-ssh"},{"location":"command-reference/#instance-ssh-details","text":"","title":"instance-ssh-details"},{"location":"command-reference/#instance-stack","text":"USAGE: instance-stack instance-id [instance-id] $ instances postgres | instance-stack postgres01 i-89cefa9403373d7a5 postgres02 i-806d8f1592e2a2efd","title":"instance-stack"},{"location":"command-reference/#instance-start","text":"Start some existing stopped EC2 instances. USAGE: instance-stop instance-id [instance-id] $ instances postgres | instance-start i-a8b8dd6783e1a40cc PreviousState = stopped CurrentState = pending i-5d74753e210bfe04d PreviousState = stopped CurrentState = pending","title":"instance-start"},{"location":"command-reference/#instance-state","text":"Get current state of instances. USAGE: instance-state instance-id [instance-id] $ instances postgres | instance-state i-89cefa9403373d7a5 running i-806d8f1592e2a2efd running You could also just get this from instances command: $ instances postgres i-89cefa9403373d7a5 ami-123456789012 t3.nano running postgres01 2019 -12-10T08:17:20.000Z ap-southeast-2a None i-806d8f1592e2a2efd ami-123456789012 t3.nano running postgres02 2019 -12-10T08:17:22.000Z ap-southeast-2a None","title":"instance-state"},{"location":"command-reference/#instance-stop","text":"Stop EC2 instances USAGE: instance-stop instance-id [instance-id] $ instances postgres | instance-stop i-a8b8dd6783e1a40cc PreviousState = running CurrentState = stopping i-5d74753e210bfe04d PreviousState = running CurrentState = stopping","title":"instance-stop"},{"location":"command-reference/#instance-tags","text":"","title":"instance-tags"},{"location":"command-reference/#instance-terminate","text":"Terminate EC2 instance(s). USAGE: instance-terminate instance-id [instance-id] $ instances | head -3 | instance-terminate You are about to terminate the following instances: i-01c7edb986c18c16a ami-0119aa4d67e59007c t3.nano terminated asg2 2019 -12-13T03:37:51.000Z ap-southeast-2c None i-012dded46894dfa04 ami-0119aa4d67e59007c t3.nano running ec2 2019 -12-13T10:12:55.000Z ap-southeast-2b vpc-deb8edb9 Are you sure you want to continue ? y i-06ee900565652ecc5 PreviousState = terminated CurrentState = terminated i-01c7edb986c18c16a PreviousState = terminated CurrentState = terminated i-012dded46894dfa04 PreviousState = running CurrentState = shutting-down","title":"instance-terminate"},{"location":"command-reference/#instance-termination-protection","text":"USAGE: instance-termination-protection instance-id [instance-id] $ instances | instance-termination-protection i-4e15ece1de1a3f869 DisableApiTermination = true i-89cefa9403373d7a5 DisableApiTermination = false i-806d8f1592e2a2efd DisableApiTermination = false i-61e86ac6be1e2c193 DisableApiTermination = false","title":"instance-termination-protection"},{"location":"command-reference/#instance-termination-protection-disable","text":"USAGE: instance-termination-protection-disable instance-id [instance-id]","title":"instance-termination-protection-disable"},{"location":"command-reference/#instance-termination-protection-enable","text":"USAGE: instance-termination-protection-enable instance-id [instance-id]","title":"instance-termination-protection-enable"},{"location":"command-reference/#instance-type","text":"List instance type for instances. You could also just view output of instances command USAGE: instance-type instance-id [instance-id] $ instances | instance-type i-4e15ece1de1a3f869 t3.nano i-89cefa9403373d7a5 t3.nano i-806d8f1592e2a2efd t3.nano i-61e86ac6be1e2c193 t3.nano","title":"instance-type"},{"location":"command-reference/#instance-userdata","text":"","title":"instance-userdata"},{"location":"command-reference/#instance-volumes","text":"USAGE: instance-volumes instance-id [instance-id] $ instances postgres | instance-volumes i-89cefa9403373d7a5 vol-cf5ddae9 i-806d8f1592e2a2efd vol-38fd45c3","title":"instance-volumes"},{"location":"command-reference/#instance-vpc","text":"USAGE: instance-vpc instance-id [instance-id]","title":"instance-vpc"},{"location":"command-reference/#bucket-commands","text":"","title":"bucket-commands"},{"location":"command-reference/#buckets","text":"List S3 Buckets $ buckets example-bucket 2019 -12-07 06 :51:05.064372 another-example-bucket 2019 -12-07 06 :51:12.022496","title":"buckets"},{"location":"command-reference/#bucket-acls","text":"List S3 Bucket Access Control Lists. $ bucket-acls another-example-bucket another-example-bucket Note The only recommended use case for the bucket ACL is to grant write permission to the Amazon S3 Log Delivery group to write access log objects to your bucket. AWS docs","title":"bucket-acls"},{"location":"command-reference/#bucket-remove","text":"Remove an empty S3 Bucket. In this example the bucket is not empty. $ bucket-remove another-example-bucket You are about to remove the following buckets: another-example-bucket 2019 -12-07 06 :51:12.022496 Are you sure you want to continue ? y remove_bucket failed: s3://another-example-bucket An error occurred ( BucketNotEmpty ) when calling the DeleteBucket operation: The bucket you tried to delete is not empty","title":"bucket-remove"},{"location":"command-reference/#bucket-remove-force","text":"Remove an S3 Bucket, and delete all objects if it's not empty. $ bucket-remove-force another-example-bucket You are about to delete all objects from and remove the following buckets: another-example-bucket 2019 -12-07 06 :51:12.022496 Are you sure you want to continue ? y delete: s3://another-example-bucket/aliases remove_bucket: another-example-bucket","title":"bucket-remove-force"},{"location":"command-reference/#cert-commands","text":"ACM Certificates","title":"cert-commands"},{"location":"command-reference/#certs","text":"","title":"certs"},{"location":"command-reference/#cert-delete","text":"","title":"cert-delete"},{"location":"command-reference/#cert-users","text":"","title":"cert-users"},{"location":"command-reference/#certs-arn","text":"","title":"certs-arn"},{"location":"command-reference/#ecr-commands","text":"","title":"ecr-commands"},{"location":"command-reference/#ecr-repositories","text":"","title":"ecr-repositories"},{"location":"command-reference/#ecr-repository-images","text":"","title":"ecr-repository-images"},{"location":"command-reference/#elb-commands","text":"EC2 Classic Load Balancers","title":"elb-commands"},{"location":"command-reference/#elbs","text":"$ elbs elb-MyLoadBalancer-1FNISWJN0W6N9 2019 -12-13T10:24:55.220Z subnet-eff2cf88 another-e-MyLoadBa-171CPCZF2E84T 2019 -12-13T10:25:24.300Z subnet-eff2cf88","title":"elbs"},{"location":"command-reference/#elb-dnsname","text":"USAGE: elb-dnsname load-balancer $ elbs | elb-dnsname elb-MyLoadBalancer-1FNISWJN0W6N9 elb-MyLoadBalancer-1FNISWJN0W6N9-563832045.ap-southeast-2.elb.amazonaws.com another-e-MyLoadBa-171CPCZF2E84T another-e-MyLoadBa-171CPCZF2E84T-1832721930.ap-southeast-2.elb.amazonaws.com","title":"elb-dnsname"},{"location":"command-reference/#elb-instances","text":"","title":"elb-instances"},{"location":"command-reference/#elb-stack","text":"USAGE: elb-stack load-balancer [load-balancer] $ elbs | elb-stack elb elb-MyLoadBalancer-1FNISWJN0W6N9 another-elb another-e-MyLoadBa-171CPCZF2E84T","title":"elb-stack"},{"location":"command-reference/#iam-commands","text":"","title":"iam-commands"},{"location":"command-reference/#iam-roles","text":"","title":"iam-roles"},{"location":"command-reference/#iam-role-principal","text":"","title":"iam-role-principal"},{"location":"command-reference/#keypair-commands","text":"List, create and delete EC2 SSH Keypairs","title":"keypair-commands"},{"location":"command-reference/#keypairs","text":"List EC2 SSH Keypairs in current Region $ keypairs alice 8f:85:9a:1e:6c:76:29:34:37:45:de:7f:8d:f9:70:eb bob 56 :73:29:c2:ad:7b:6f:b6:f2:f3:b4:de:e4:2b:12:d4","title":"keypairs"},{"location":"command-reference/#keypair-create","text":"Create SSH Keypair on local machine and import public key into new EC2 Keypair. Provides benefits over AWS creating the keypair: Amazon never has access to private key Private key is protected with passphrase before being written to disk Keys is written to ~/.ssh with correct file permissions You control the SSH Key type (algorithm, length, etc) $ keypair-create yet-another-keypair Creating /home/m/.ssh/yet-another-keypair Generating public/private rsa key pair. Enter passphrase ( empty for no passphrase ) : Enter same passphrase again: Your identification has been saved in /home/m/.ssh/yet-another-keypair. Your public key has been saved in /home/m/.ssh/yet-another-keypair.pub. The key fingerprint is: SHA256:zIpbxLo7rpQvKyezOLATk96B1kSL0QP41q6x8tUrySk m@localhost.localdomain The key ' s randomart image is: +--- [ RSA 4096 ] ----+ | ..o | | .. + | | .+.o | | .oo.. o | | o+. o S | | = o.+. = . | | +++ == o+ | | XoE+*+ . | | o@+**+. | +---- [ SHA256 ] -----+ { \"KeyFingerprint\" : \"21:82:f9:5b:79:d6:dc:0f:7b:79:43:7c:c5:34:6c:2d\" , \"KeyName\" : \"yet-another-keypair\" } Note KeyPair Name defaults to \"$(aws-account-alias)-$(region)\" if none provided","title":"keypair-create"},{"location":"command-reference/#keypair-delete","text":"Delete EC2 SSH Keypairs by providing their names as arguments or via STDIN $ keypair-delete alice bob You are about to delete the following EC2 SSH KeyPairs: alice bob Are you sure you want to continue ? y $ keypairs | keypair-delete You are about to delete the following EC2 SSH KeyPairs: yet-another-keypair Are you sure you want to continue ? y","title":"keypair-delete"},{"location":"command-reference/#vpc-commands","text":"","title":"vpc-commands"},{"location":"command-reference/#vpcs","text":"List VPCs $ vpcs vpc-018d9739 default-vpc NO_NAME 172 .31.0.0/16 NO_STACK NO_VERSION","title":"vpcs"},{"location":"command-reference/#vpc-az-count","text":"List number of Availability Zones for VPCs USAGE: vpc-az-count vpc-id [vpc-id] $ vpcs | vpc-az-count vpc-018d9739 3","title":"vpc-az-count"},{"location":"command-reference/#vpc-azs","text":"List availability zones for VPCs $ vpc-azs USAGE: vpc-azs vpc-id [vpc-id] $ vpcs | vpc-azs vpc-018d9739 ap-southeast-2a ap-southeast-2b ap-southeast-2c","title":"vpc-azs"},{"location":"command-reference/#vpc-default-delete","text":"Prints commands you would need to run to delete that pesky default VPC $ vpc-default-delete # Deleting default VPC vpc-018d9739 in ap-southeast-2 aws --region ap-southeast-2 ec2 delete-subnet --subnet-id = subnet-8bb774fe aws --region ap-southeast-2 ec2 delete-subnet --subnet-id = subnet-9eea2c07 aws --region ap-southeast-2 ec2 delete-subnet --subnet-id = subnet-34fd9cfa aws --region ap-southeast-2 ec2 delete-vpc --vpc-id = vpc-018d9739","title":"vpc-default-delete"},{"location":"command-reference/#vpc-dhcp-options-ntp","text":"","title":"vpc-dhcp-options-ntp"},{"location":"command-reference/#vpc-endpoints","text":"","title":"vpc-endpoints"},{"location":"command-reference/#vpc-igw","text":"","title":"vpc-igw"},{"location":"command-reference/#vpc-lambda-commands","text":"","title":"vpc-lambda-commands"},{"location":"command-reference/#vpc-nat-gateways","text":"USAGE: vpc-nat-gateways vpc-id [vpc-id]","title":"vpc-nat-gateways"},{"location":"command-reference/#vpc-network-acls","text":"USAGE: vpc-network-acls vpc-id [vpc-id] $ vpcs | vpc-network-acls acl-ff4914d1 vpc-018d9739","title":"vpc-network-acls"},{"location":"command-reference/#vpc-rds","text":"","title":"vpc-rds"},{"location":"command-reference/#vpc-route-tables","text":"USAGE: vpc-route-tables vpc-id [vpc-id] $ vpcs | vpc-route-tables rtb-8e841c39 vpc-018d9739 NO_NAME","title":"vpc-route-tables"},{"location":"command-reference/#vpc-subnets","text":"List subnets for vpcs USAGE: vpc-subnets vpc-id [vpc-id] $ vpcs | vpc-subnets subnet-34fd9cfa vpc-018d9739 ap-southeast-2c 172 .31.32.0/20 NO_NAME subnet-8bb774fe vpc-018d9739 ap-southeast-2a 172 .31.0.0/20 NO_NAME subnet-9eea2c07 vpc-018d9739 ap-southeast-2b 172 .31.16.0/20 NO_NAME","title":"vpc-subnets"},{"location":"command-reference/#pcxs","text":"List VPC Peering Connections","title":"pcxs"},{"location":"command-reference/#subnets","text":"List all subnets $ subnets subnet-34fd9cfa vpc-018d9739 ap-southeast-2c 172 .31.32.0/20 NO_NAME subnet-8bb774fe vpc-018d9739 ap-southeast-2a 172 .31.0.0/20 NO_NAME subnet-9eea2c07 vpc-018d9739 ap-southeast-2b 172 .31.16.0/20 NO_NAME","title":"subnets"},{"location":"command-reference/#asg-commands","text":"","title":"asg-commands"},{"location":"command-reference/#asgs","text":"","title":"asgs"},{"location":"command-reference/#asg-capacity","text":"","title":"asg-capacity"},{"location":"command-reference/#asg-desired-size-set","text":"","title":"asg-desired-size-set"},{"location":"command-reference/#asg-instances","text":"","title":"asg-instances"},{"location":"command-reference/#asg-launch-configuration","text":"","title":"asg-launch-configuration"},{"location":"command-reference/#asg-max-size-set","text":"","title":"asg-max-size-set"},{"location":"command-reference/#asg-min-size-set","text":"","title":"asg-min-size-set"},{"location":"command-reference/#asg-processes_suspended","text":"","title":"asg-processes_suspended"},{"location":"command-reference/#asg-resume","text":"","title":"asg-resume"},{"location":"command-reference/#asg-scaling-activities","text":"","title":"asg-scaling-activities"},{"location":"command-reference/#asg-stack","text":"","title":"asg-stack"},{"location":"command-reference/#asg-suspend","text":"","title":"asg-suspend"},{"location":"command-reference/#launch-configurations","text":"","title":"launch-configurations"},{"location":"command-reference/#launch-configuration-asgs","text":"","title":"launch-configuration-asgs"},{"location":"command-reference/#lambda-commands","text":"","title":"lambda-commands"},{"location":"command-reference/#lambda-commands_1","text":"","title":"lambda-commands"},{"location":"command-reference/#lambda-function-memory","text":"","title":"lambda-function-memory"},{"location":"command-reference/#lambda-function-memory-set","text":"","title":"lambda-function-memory-set"},{"location":"command-reference/#lambda-function-memory-step","text":"","title":"lambda-function-memory-step"},{"location":"command-reference/#other","text":"","title":"Other"},{"location":"command-reference/#cloudtrails","text":"","title":"cloudtrails"},{"location":"command-reference/#cloudtrail-status","text":"","title":"cloudtrail-status"},{"location":"command-reference/#columnise","text":"","title":"columnise"},{"location":"command-reference/#image-deregister","text":"","title":"image-deregister"},{"location":"command-reference/#images","text":"","title":"images"},{"location":"command-reference/#log-groups","text":"","title":"log-groups"},{"location":"command-reference/#rds-db-instances","text":"","title":"rds-db-instances"},{"location":"command-reference/#sts-assume-role","text":"","title":"sts-assume-role"},{"location":"command-reference/#internal-functions","text":"__bma_error __bma_read_filters __bma_read_inputs __bma_read_stdin __bma_usage _bma_derive_params_from_stack_and_template _bma_derive_params_from_template _bma_derive_stack_from_params _bma_derive_stack_from_template _bma_derive_template_from_params _bma_derive_template_from_stack _bma_stack_args _bma_stack_capabilities _bma_stack_diff_params _bma_stack_diff_template _bma_stack_name_arg _bma_stack_params_arg _bma_stack_template_arg","title":"Internal functions"},{"location":"developer-guide/","text":"bash-my-aws development guide. \u00b6 There are three distinct classes of functions types within bash-my-aws ; query , detail , and action functions. Query functions are responsible for requesting AWS return a list of resources by their unique identifier. That would mean that when querying EC2 instances, it should return a list of instance-ids. If we were to query CloudFormation, then stacks are what would be returned. Detail functions should provide you an output of one or more attributes. eg. instance-asg(), instance-state() Action functions should perform an action against a resource. An action for an EC2 instance may be something like terminate or associate_eip . e.g. stack-create(), instance-terminate(), asg-suspend() There are some great things about bash-my-aws which I would hate to lose. It's easy to look at the code and learn how awscli works. Simple tasks have simple commands. It's really easy to extend. stdin should always be supported. You should be able to pipe one function into the next with ease. If an action function cannot be piped the output of a query function and have it work, without manipulation though other tools, then something is wrong. Namespacing \u00b6 We've decided to namespace functions by the resource they're concerned with. Yes, this may seem a bit like postgres naming their command createdb but that's OK. bash-my-aws reduces my keystrokes. We'll work something out if this becomes a problem. stack-asgs stack-elbs stack-outputs stack-tags stack-validate stack-create stack-events stack-parameters stack-tail stacks stack-delete stack-failure stack-resources stack-template stack-diff stack-instances stack-status stack-update instance-asg instance-ssh instance-stop instance-volumes instance-console instance-ssh-details instance-tags instances instance-dns instance-stack instance-terminate instance-iam-profile instance-start instance-type instance-ip instance-state instance-userdata asg-capacity asg-max-size-set asg-resume asgs asg-desired-size-set asg-min-size-set asg-suspend asg-instances asg-processes_suspended asgard Resources \u00b6 This is a partial list of resources, with possible alternative names in brackets. asg (autoscaling_group) bucket elb (load_balancer) instance instance_type rds (relational_database) dynamodb (relational_database) sg (security_group) stack (cloudformation_stack) Query Functions \u00b6 Query functions are always namespaced under the plural of the resource. Default Query \u00b6 TODO: lets talk about the details. Some example usage of this function would be: $ <resources> resource_id1 attribute attribute resource_id2 attribute attribute resource_id3 attribute attribute Detail Functions \u00b6 Detail functions are always namespaced under the singular of the resource. Some example usage of this function would be: $ <resource> <resource_id> attribute1: value1 attribute2: value2 Some example responses: $ instance_security_groups i-abcd1234 sg-00000001 i-abcd1234 sg-00000002 i-abcd1234 sg-00000003 i-abcd1234 sg-00000004 i-abcd1234 $ security_group_rules TODO: I'm not sure yet how to present a security group rule. $ instance_type i-abcd1234 c3.large i-abcd1234 $ instance_type_memory c3.large 3.75 c3.large Action Functions \u00b6 Action functions are always namespaced under the singular of the resource and are suffixed with the action they are responsible for undertaking. Some example usage of this function would be: $ <resource>_<action> <resource_id> Tests \u00b6 You can start the test suite by running the command make test . STDIN \u00b6 The first word of each line must be a resource. Additional information will be disregarded.","title":"bash-my-aws development guide."},{"location":"developer-guide/#bash-my-aws-development-guide","text":"There are three distinct classes of functions types within bash-my-aws ; query , detail , and action functions. Query functions are responsible for requesting AWS return a list of resources by their unique identifier. That would mean that when querying EC2 instances, it should return a list of instance-ids. If we were to query CloudFormation, then stacks are what would be returned. Detail functions should provide you an output of one or more attributes. eg. instance-asg(), instance-state() Action functions should perform an action against a resource. An action for an EC2 instance may be something like terminate or associate_eip . e.g. stack-create(), instance-terminate(), asg-suspend() There are some great things about bash-my-aws which I would hate to lose. It's easy to look at the code and learn how awscli works. Simple tasks have simple commands. It's really easy to extend. stdin should always be supported. You should be able to pipe one function into the next with ease. If an action function cannot be piped the output of a query function and have it work, without manipulation though other tools, then something is wrong.","title":"bash-my-aws development guide."},{"location":"developer-guide/#namespacing","text":"We've decided to namespace functions by the resource they're concerned with. Yes, this may seem a bit like postgres naming their command createdb but that's OK. bash-my-aws reduces my keystrokes. We'll work something out if this becomes a problem. stack-asgs stack-elbs stack-outputs stack-tags stack-validate stack-create stack-events stack-parameters stack-tail stacks stack-delete stack-failure stack-resources stack-template stack-diff stack-instances stack-status stack-update instance-asg instance-ssh instance-stop instance-volumes instance-console instance-ssh-details instance-tags instances instance-dns instance-stack instance-terminate instance-iam-profile instance-start instance-type instance-ip instance-state instance-userdata asg-capacity asg-max-size-set asg-resume asgs asg-desired-size-set asg-min-size-set asg-suspend asg-instances asg-processes_suspended asgard","title":"Namespacing"},{"location":"developer-guide/#resources","text":"This is a partial list of resources, with possible alternative names in brackets. asg (autoscaling_group) bucket elb (load_balancer) instance instance_type rds (relational_database) dynamodb (relational_database) sg (security_group) stack (cloudformation_stack)","title":"Resources"},{"location":"developer-guide/#query-functions","text":"Query functions are always namespaced under the plural of the resource.","title":"Query Functions"},{"location":"developer-guide/#default-query","text":"TODO: lets talk about the details. Some example usage of this function would be: $ <resources> resource_id1 attribute attribute resource_id2 attribute attribute resource_id3 attribute attribute","title":"Default Query"},{"location":"developer-guide/#detail-functions","text":"Detail functions are always namespaced under the singular of the resource. Some example usage of this function would be: $ <resource> <resource_id> attribute1: value1 attribute2: value2 Some example responses: $ instance_security_groups i-abcd1234 sg-00000001 i-abcd1234 sg-00000002 i-abcd1234 sg-00000003 i-abcd1234 sg-00000004 i-abcd1234 $ security_group_rules TODO: I'm not sure yet how to present a security group rule. $ instance_type i-abcd1234 c3.large i-abcd1234 $ instance_type_memory c3.large 3.75 c3.large","title":"Detail Functions"},{"location":"developer-guide/#action-functions","text":"Action functions are always namespaced under the singular of the resource and are suffixed with the action they are responsible for undertaking. Some example usage of this function would be: $ <resource>_<action> <resource_id>","title":"Action Functions"},{"location":"developer-guide/#tests","text":"You can start the test suite by running the command make test .","title":"Tests"},{"location":"developer-guide/#stdin","text":"The first word of each line must be a resource. Additional information will be disregarded.","title":"STDIN"},{"location":"style/","text":"bash-my-aws style guide \u00b6 Always quote \"$variables\" Only use parentheses around variables when not surrounded with whitespace (better way to phrase this?) use $(date) rather than \" date \" use [[ and ]] rather than [ , ] , or test show errors with __bma_error() show usage options with __bma_usage() parse inputs with __bma_read_inputs() regenerate and test the bash_completion script after adding new functions","title":"Style"},{"location":"style/#bash-my-aws-style-guide","text":"Always quote \"$variables\" Only use parentheses around variables when not surrounded with whitespace (better way to phrase this?) use $(date) rather than \" date \" use [[ and ]] rather than [ , ] , or test show errors with __bma_error() show usage options with __bma_usage() parse inputs with __bma_read_inputs() regenerate and test the bash_completion script after adding new functions","title":"bash-my-aws style guide"},{"location":"tour/","text":"Tour \u00b6 Check this out!","title":"Tour"},{"location":"tour/#tour","text":"Check this out!","title":"Tour"}]}